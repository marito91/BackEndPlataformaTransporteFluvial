{"version":3,"sources":["../../src/rutas/ordenesRutas.js"],"names":["Router","require","ordenesRutas","ordenModel","puertoModel","configModel","compare","sign","registroOrden","newOrden","ordenDetalle","estados","ordenes","editarOrden","ordenUpdate","tasaDolar","post","req","res","date_ob","Date","date","getDate","slice","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","defDate","console","log","user","art","height","width","length","weight","origen","destino","descr","body","find","error","order","send","estado","msg","orders","map","o","last","i","obj","order_id","orderId","findOne","oldOrder","undefined","nombre_puerto","$in","port","ports","p","distancia","milla","pesos","valor","precio","newOrder","fecha_origen_orden","nombre_contenedor","descripcion_contenedor","peso_contenedor","ancho_contenedor","alto_contenedor","largo_contenedor","puerto_origen","puerto_destino","estado_orden","costo","usuario","save","telefono","get","numero","parseInt","params","orden","finalOrder","data","username","updateOne","$set","newEstado","exports"],"mappings":"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","sourcesContent":["const { Router } = require(\"express\");\nconst ordenesRutas = Router();\nconst { ordenModel } = require(\"../modelos/orden\");\nconst { puertoModel } = require(\"../modelos/puerto\");\nconst { configModel } = require(\"../modelos/configuracion\");\nconst { compare } = require(\"bcryptjs\");\nconst { sign } = require(\"jsonwebtoken\");\n//const { userGuard } = require(\"../guards/userGuard\");\n\nconst { registroOrden, newOrden, ordenDetalle, estados, ordenes, editarOrden, ordenUpdate } = require(\"../datos\");\n\nconst tasaDolar = 4000;\n\n\n\n/**\n * API Rest Modulo de registro de órdenes\n * Descripcion: Registra las ordenes de los usuarios\n * Ruta: /registrarOrden\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { registroOrden }\n * Respuesta: { newOrden }\n */\n\n ordenesRutas.post(\"/registrarOrden\", function(req, res) {\n\n/* Codigo para realizar registro de orden de manera local\n\n    // Se recibe un json con toda la informacion respectiva para crear una nueva orden\n    const { art, height, width, length, weight, origen, destino, descr } = req.body;\n    // Se hace un loop para determinar el valor de la ultima orden\n    let last = 0;\n    for(var i = 0; i < ordenes.length; i++) {\n        var obj = ordenes[i];\n        if (last <= obj.id_orden) {\n            last += 1;\n        }\n    }\n    // Se asigna un nuevo numero de orden\n    const orderId = last + 1;\n    // Se compara una ultima vez si existe el numero de orden\n    const lastID = ordenes.find(o => o.id_orden === orderId);\n    // Si la orden ya existe envia una alerta \n    if (lastID != null && lastID != undefined) {\n        res.send({estado : \"error\", msg : \"Ya existe una orden registrada.\"});\n    } else { // de lo contrario:\n        // Se crea una variable newOrder donde a cada Key se le asigna los valores que vienen del json del front end\n        const newOrder = {id_orden: orderId, articulo: art, largo: length, ancho: width, alto: height, peso: weight, puerto_origen: origen, puerto_destino: destino, Descripcion: descr, estado_orden: \"preparando para Embarcar\" };\n        // Se agrega la nueva orden a base de datos\n        ordenes.push(newOrder);\n        // Se confirma que se estan recibiendo todos los datos correspondientes\n        // console.log(ordenes);\n        // Se envia estado y mensaje al front end para confirmar que la orden fue creada con un ID, que se le entrega al usuario\n        res.send({estado : \"ok\", msg : `Orden creada exitosamente con ID número ${orderId}. En la página de inicio podrá encontrar más detalles de su orden. Muchas gracias por usar nuestro servicio.`});\n\n    }\n*/\n\n/* ------------------------------------------------------Seccion para determinar fecha---------------------------------------------------------------*/\n    // Nuevo objeto para determinar fecha\n    let date_ob = new Date();\n\n    // current date\n    // adjust 0 before single digit date\n    let date = (\"0\" + date_ob.getDate()).slice(-2);\n\n    // current month\n    let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n\n    // current year\n    let year = date_ob.getFullYear();\n\n    // current hours\n    let hours = date_ob.getHours();\n\n    // current minutes\n    let minutes = date_ob.getMinutes();\n\n    // current seconds\n    let seconds = date_ob.getSeconds();\n\n    // prints date & time in YYYY-MM-DD HH:MM:SS format\n    const defDate = year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds\n    console.log(year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds);\n\n/* ------------------------------------------------------Seccion para determinar fecha---------------------------------------------------------------*/\n\n\n    // Se recibe un json con toda la informacion respectiva para crear una nueva orden\n    const { user, art, height, width, length, weight, origen, destino, descr } = req.body;\n\n\n    ordenModel.find({}, (error, order) => { \n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar ordenes.\" });\n        } else {\n            const orders = order.map(o => o);\n            // Se verifica que se hayan registrado las ordenes en el array\n            console.log(orders);\n\n            // Se hace un loop para determinar el valor de la ultima orden\n            let last = 0;\n            for(var i = 0; i < orders.length; i++) {\n                var obj = orders[i];\n                if (last <= obj.order_id) {\n                    last += 1;\n                }\n            }\n            // Se asigna un nuevo numero de orden\n            const orderId = last + 1;\n            console.log(orderId)\n  \n\n            // Se hace una busqueda del documento para ver si ya existe\n            ordenModel.findOne({order_id: orderId}, function (error, oldOrder) {\n                if (error) {\n                    return res.send({ estado: \"error\", msg: \"ERROR: al buscar orden\" });\n                } else {\n                    if (oldOrder !== null && oldOrder !== undefined) {\n                        return res.send({ estado: \"ok\", msg: \"Error: La orden ya se encuentra registrada en el sistema.\" });\n                    } else {\n/*--------------------------------------------------------Modulo para calcular precio a pagar-------------------------------------------------------*/\n                        puertoModel.find({ nombre_puerto: {$in: [origen, destino] } }, (error, port) => { \n                            if (error) {\n                                return res.send({ estado: \"error\", msg: \"Error: Uno de los puertos no aparece registrado en nuestro sistema.\" });\n                            } else {\n                                const ports = port.map(p => p);\n                                // Se verifica que se hayan registrado ambos puertos\n                                console.log(ports);\n                                // Se suman las distancias de ambos puertos para determinar el valor a pagar\n                                const distancia = ports[0].distancia + ports[1].distancia;\n                                // Se verifica que se haya sumado la distancia\n                                console.log(distancia);\n                                // Se busca el valor de la milla actual\n                                configModel.find({}, (error, milla) => {\n                                    if (error) {\n                                        return res.send({ estado: \"error\", msg: \"No se pudo validar el precio a pagar.\" });\n                                    } else {\n                                        console.log(milla);\n                                        // Se calcula el valor en pesos segun la tasa del dolar manifestada al inicio del archivo\n                                        const pesos = milla[0].valor * tasaDolar;\n                                        // Se determina el precio total a cancelar en pesos segun la distancia de ambos puertos\n                                        const precio = pesos * distancia;\n\n/*------------------------------------------------------------Modulo para crear nueva orden---------------------------------------------------------*/\n                                        // Se crea una nueva orden con una instancia del modelo de orden y se le agrega toda la informacion que viene del front\n                                        const newOrder = new ordenModel( {order_id: orderId, fecha_origen_orden: defDate, nombre_contenedor: art, descripcion_contenedor: descr, peso_contenedor: weight, ancho_contenedor: width, alto_contenedor: height, largo_contenedor: length, puerto_origen: origen, puerto_destino: destino, estado_orden: \"Preparando para Embarcar\",costo: precio, usuario: user});\n                                        console.log(newOrder)                         \n                                        newOrder.save(function (error) {\n                                            if (error) {\n                                                return res.send({ estado: \"error\", msg: \"ERROR: Al registrar nueva orden.\" });\n                                            } else {\n                                                return res.send({ estado: \"ok\", msg: `Orden creada exitosamente con ID número ${orderId}. En la página de inicio podrá encontrar más detalles de su orden. Muchas gracias por usar nuestro servicio.` });\n                                            }\n                                        });\n                                    }\n                                })\n                            }\n                        });   \n                    }\n                }\n            })\n        }\n    });\n})\n\n/**\n * API Rest Modulo de creación de órdenes por usuarios externos\n * Descripcion: Registra las ordenes de los usuarios externos\n * Ruta: /crearOrden\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { registroOrden }\n * Respuesta: { newOrden }\n */\n\n ordenesRutas.post(\"/crearOrden\", function(req, res) {\n\n/* ------------------------------------------------------Seccion para determinar fecha---------------------------------------------------------------*/\n    // Nuevo objeto para determinar fecha\n    let date_ob = new Date();\n\n    // current date\n    // adjust 0 before single digit date\n    let date = (\"0\" + date_ob.getDate()).slice(-2);\n\n    // current month\n    let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n\n    // current year\n    let year = date_ob.getFullYear();\n\n    // current hours\n    let hours = date_ob.getHours();\n\n    // current minutes\n    let minutes = date_ob.getMinutes();\n\n    // current seconds\n    let seconds = date_ob.getSeconds();\n\n    // prints date & time in YYYY-MM-DD HH:MM:SS format\n    const defDate = year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds\n    console.log(year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds);\n\n/* ------------------------------------------------------Seccion para determinar fecha---------------------------------------------------------------*/\n\n\n    // Se recibe un json con toda la informacion respectiva para crear una nueva orden\n    const { telefono, art, height, width, length, weight, origen, destino, descr } = req.body;\n\n\n    ordenModel.find({}, (error, order) => { \n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar ordenes.\" });\n        } else {\n            const orders = order.map(o => o);\n            // Se verifica que se hayan registrado las ordenes en el array\n            console.log(orders);\n\n            // Se hace un loop para determinar el valor de la ultima orden\n            let last = 0;\n            for(var i = 0; i < orders.length; i++) {\n                var obj = orders[i];\n                if (last <= obj.order_id) {\n                    last += 1;\n                }\n            }\n            // Se asigna un nuevo numero de orden\n            const orderId = last + 1;\n            console.log(orderId)\n  \n\n            // Se hace una busqueda del documento para ver si ya existe\n            ordenModel.findOne({order_id: orderId}, function (error, oldOrder) {\n                if (error) {\n                    return res.send({ estado: \"error\", msg: \"ERROR: al buscar orden\" });\n                } else {\n                    if (oldOrder !== null && oldOrder !== undefined) {\n                        return res.send({ estado: \"ok\", msg: \"Error: La orden ya se encuentra registrada en el sistema.\" });\n                    } else {\n/*--------------------------------------------------------Modulo para calcular precio a pagar-------------------------------------------------------*/\n                        puertoModel.find({ nombre_puerto: {$in: [origen, destino] } }, (error, port) => { \n                            if (error) {\n                                return res.send({ estado: \"error\", msg: \"Error: Uno de los puertos no aparece registrado en nuestro sistema.\" });\n                            } else {\n                                const ports = port.map(p => p);\n                                // Se verifica que se hayan registrado ambos puertos\n                                console.log(ports);\n                                // Se suman las distancias de ambos puertos para determinar el valor a pagar\n                                const distancia = ports[0].distancia + ports[1].distancia;\n                                // Se verifica que se haya sumado la distancia\n                                console.log(distancia);\n                                // Se busca el valor de la milla actual\n                                configModel.find({}, (error, milla) => {\n                                    if (error) {\n                                        return res.send({ estado: \"error\", msg: \"No se pudo validar el precio a pagar.\" });\n                                    } else {\n                                        console.log(milla);\n                                        // Se calcula el valor en pesos segun la tasa del dolar manifestada al inicio del archivo\n                                        const pesos = milla[0].valor * tasaDolar;\n                                        // Se determina el precio total a cancelar en pesos segun la distancia de ambos puertos\n                                        const precio = pesos * distancia;\n\n/*------------------------------------------------------------Modulo para crear nueva orden---------------------------------------------------------*/\n                                        // Se crea una nueva orden con una instancia del modelo de orden y se le agrega toda la informacion que viene del front\n                                        const newOrder = new ordenModel( {order_id: orderId, fecha_origen_orden: defDate, nombre_contenedor: art, descripcion_contenedor: descr, peso_contenedor: weight, ancho_contenedor: width, alto_contenedor: height, largo_contenedor: length, puerto_origen: origen, puerto_destino: destino, estado_orden: \"Preparando para Embarcar\",costo: precio, usuario: telefono});\n                                        console.log(newOrder)                         \n                                        newOrder.save(function (error) {\n                                            if (error) {\n                                                return res.send({ estado: \"error\", msg: \"ERROR: Al registrar nueva orden.\" });\n                                            } else {\n                                                return res.send({ estado: \"ok\", msg: `Orden creada exitosamente con ID número ${orderId}. En breve lo estaremos contactando para ofrecerle más detalles de su orden. Muchas gracias por usar nuestro servicio.` });\n                                            }\n                                        });\n                                    }\n                                })\n                            }\n                        });   \n                    }\n                }\n            })\n        }\n    });\n})\n\n\n/**\n * API Rest Modulo de busqueda de ordenes\n * Descripcion: Busca las ordenes\n * Ruta: /listarOrdenDetalle/?id_orden=1002\n * Metodo: GET\n * Headers:\"Content-Type: application/json\"\n * Datos de respuesta: { ordenDetalle }\n */\n\n ordenesRutas.get(\"/listarOrdenDetalle/:orden\", function(req, res) {\n    \n    /* Codigo para datos almacenados localmente\n    const numero = req.params.orden;\n    //console.log(numero);\n    const orden = ordenes.find(o => o.id_orden === parseInt(numero));\n    if (orden != null && orden != undefined) {\n        res.send({ estado: \"ok\", msg: \"Orden encontrada con éxito.\", orden })\n    } else {\n        res.send({ estado: \"error\", msg: \"No se encontró la orden solicitada\" })\n    }\n    */\n   // Se obtiene el parametro de la ruta\n    const numero = parseInt(req.params.orden);\n\n    ordenModel.findOne({order_id: numero}, function(error, orden) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"No se encontró la orden solicitada.\" })\n        } else {\n            if (orden != null && orden != undefined) {\n                res.send({ estado: \"ok\", msg: \"Orden encontrada con éxito.\", orden })\n            } else {\n                res.send({ estado: \"error\", msg: \"No se encontró la orden solicitada\" })\n            }\n        }\n    })\n})\n\n\n/**\n * API Rest Modulo de estado de ordenes\n * Descripcion: Indica el estado de las ordenes\n * Ruta: /listarOrden/?estado=Finalizada\n * Metodo: GET\n * Headers:\"Content-Type: application/json\"\n * Datos de respuesta: { estados }\n */\n\nordenesRutas.post(\"/listarOrden/factura\", function(req, res) {\n\n    ordenModel.find({}, (error, order) => { \n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar ordenes.\" });\n        } else {\n            const orders = order.map(o => o);\n            // Se verifica que se hayan registrado las ordenes en el array\n            //console.log(orders);\n\n            // Se hace un loop para determinar el valor de la ultima orden\n            let last = 0;\n            let finalOrder;\n            for(var i = 0; i < orders.length; i++) {\n                var obj = orders[i];\n                if (last <= obj.order_id) {\n                    last += 1;\n                    finalOrder = obj;\n                }\n            }\n            // Se asigna un nuevo numero de orden\n            const orderId = last;\n            console.log(orderId)\n            console.log(finalOrder)\n            res.send({ estado: \"ok\", msg: \"Ultima orden encontrada\", data: [finalOrder] });\n        }\n    })\n})\n\n\n/**\n * API Rest Modulo de listar órdenes\n * Descripcion: Buscar las órdenes y muestra toda la información de ellas\n * Ruta: /listarOrden\n * Metodo: GET\n * Headers:\"Content-Type: application/json\"\n * Datos de respuesta: { ordenes }\n */\n\n ordenesRutas.post(\"/listarOrden/:user\", function(req, res) {\n    \n    /* Codigo para datos almacenados localmente\n    //console.log(puertos);\n    res.send({ estado: \"ok\", data: ordenes })\n    */\n\n    const username = req.params.user;\n\n    ordenModel.find({usuario: username}, function(error, ordenes) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"No se encontraron órdenes.\" })\n        } else {\n            if (ordenes != null && ordenes != undefined) {\n                res.send({ estado: \"ok\", msg: \"Ordenes encontradas con éxito.\", data: ordenes })\n            } else {\n                res.send({ estado: \"error\", msg: \"No se encontraron órdenes.\" })\n            }\n        }\n    })\n})\n\n\n\n/**\n * API Rest Modulo de editar órdenes\n * Descripcion: Actualiza la información de las órdenes ya creadas\n * Ruta: /editarOrden\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { editarOrden }\n * Datos de respuesta: { ordenUpdate }\n */\n\nordenesRutas.post(\"/editarOrden\", function(req, res) {\n\n/* Codigo para datos almacenados localmente\n    // Desestructuracion\n    const {numero, estado, art, height, width, length, weight, origen, destino, descr} = req.body;\n    // Se hacen las alertas predeterminadas\n    let alerta = \"error\";\n    let mensaje = \"La orden no se encuentra registrada en nuestra base de datos\"\n    let i = 0;\n    for (const o of ordenes) {\n        if (o.id_orden === numero) {\n            if (o.estado_orden === \"Finalizada\" || o.estado_orden === \"Despachada\") {\n                alerta = \"error\"\n                mensaje = \"La orden ya fue despachada por ende no se puede editar.\"\n            } else {\n                ordenes[i].articulo = art;\n                ordenes[i].altura = height;\n                ordenes[i].ancho = width;\n                ordenes[i].largo = length;\n                ordenes[i].peso = weight;\n                ordenes[i].puerto_origen = origen;\n                ordenes[i].puerto_destino = destino;\n                ordenes[i].descripcion = descr;\n                alerta = \"ok\";\n                mensaje = \"Orden editada exitosamente\"\n                break;\n            }       \n        }\n        i++;\n    }\n    res.send({estado : alerta, msg : mensaje});\n\n    */\n\n    // Desestructuracion\n    const {numero, art, height, width, length, weight, origen, destino, descr} = req.body;\n\n    ordenModel.findOne({order_id: numero}, function (error, oldOrder) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar orden duplicada.\" });\n        } else {\n            if (oldOrder !== null && oldOrder !== undefined) {\n                ordenModel.updateOne({ order_id: numero }, { $set: { nombre_contenedor: art, descripcion_contenedor: descr, peso_contenedor: weight, ancho_contenedor: width, alto_contenedor: height, largo_contenedor: length, puerto_origen: origen, puerto_destino: destino } }, function (error) {\n                    if (error) {\n                        return res.send({ estado: \"error\", msg: \"ERROR: Al editar la orden.\" });\n                    } else {\n                        res.send({ estado: \"ok\", msg: \"Orden actualizada satisfactoriamente.\" });\n                    }\n                });\n            } \n        }\n    });\n}); \n\n\n\n/**\n * API Rest Modulo de actualizar estados\n * Descripcion: Actualiza la información de las órdenes ya creadas\n * Ruta: /editarEstado\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { estado }\n * Datos de respuesta: { estadoupdate }\n */\n\nordenesRutas.post(\"/editarEstado\", function(req, res) {\n\n    // Desestructuracion\n    const { numero, newEstado } = req.body;\n\n    ordenModel.findOne({order_id: numero}, function (error, oldOrder) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar orden duplicada.\" });\n        } else {\n            if (oldOrder !== null && oldOrder !== undefined) {\n                ordenModel.updateOne({ order_id: numero }, { $set: { estado_orden: newEstado } }, function (error) {\n                    if (error) {\n                        return res.send({ estado: \"error\", msg: \"ERROR: Al editar el estado de la orden.\" });\n                    } else {\n                        res.send({ estado: \"ok\", msg: \"Estado actualizado satisfactoriamente.\" });\n                    }\n                });\n            } \n        }\n    });\n}); \n\n\n\nexports.ordenesRutas = ordenesRutas;"],"file":"ordenesRutas.js"}