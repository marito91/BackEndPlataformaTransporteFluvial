{"version":3,"sources":["../../src/rutas/puertosRutas.js"],"names":["Router","require","puertosRutas","puertoModel","configModel","compare","sign","registroPuerto","puertoRegistrado","puertos","distanciaPuertos","costoMilla","costoUpdate","costo","distancias","tasaDolar","post","req","res","nomPto","idPto","distPto","munPto","rioPto","body","findOne","puerto_id","error","oldPort","send","estado","msg","undefined","newPort","nombre_puerto","distancia","save","find","port","ports","map","p","data","alerta","origen","destino","$in","console","log","pesos","valor","precio","dolares","updateOne","$set","puerto","remove","exports","determinarPuerto","item"],"mappings":"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","sourcesContent":["const { Router } = require(\"express\");\nconst puertosRutas = Router();\nconst { puertoModel } = require(\"../modelos/puerto\");\nconst { configModel } = require(\"../modelos/configuracion\");\nconst { compare } = require(\"bcryptjs\");\nconst { sign } = require(\"jsonwebtoken\");\n//const { userGuard } = require(\"../guards/userGuard\");\n\nconst { registroPuerto, puertoRegistrado, puertos, distanciaPuertos, costoMilla, costoUpdate, costo, distancias } = require(\"../datos\");\n\nconst tasaDolar = 4000;\n\n/**\n * API Rest Modulo de registro de puertos\n * Descripcion: Registra los puertos en la plataforma\n * Ruta: /registrarPuerto\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { registroPuerto }\n * Respuesta: { puertoRegistrado }\n */\n\n puertosRutas.post(\"/registrarPuerto\", function(req, res) {\n\n/* Codigo para realizar registro de orden de manera local\n\n    // Se recibe un json con toda la informacion respectiva para crear un usuario nuevo\n    const {nomPto, idPto, distPto, munPto, rioPto} = req.body;\n    // Se obtiene el numero de documento para revisar si el usuario ya existe\n    const id = req.body.idPto;\n    // Se hace una busqueda del documento para ver si ya existe\n    const puerto = puertos.find(p => p.id_puerto === id);\n    // Si el usuario ya existe envia una alerta \n    if (puerto != null && puerto != undefined) {\n        res.send({estado : \"error\", msg : \"El puerto ya se encuentra registrado en el sistema.\"});\n    } else { // de lo contrario:\n        // Se crea una variable newPort donde a cada Key se le asigna los valores que vienen del json del front end\n        const newPort = {nombre: nomPto, id_puerto: idPto, millas: distPto, municipio: munPto, rioPto};\n        // Se agrega el newUser a base de datos\n        puertos.push(newPort);\n        // Se confirma que se estan recibiendo todos los datos correspondientes\n        console.log(puertos);\n        // Se envia estado y mensaje al front end para confirmar que el usuario se registro\n        res.send({estado : \"ok\", msg : \"Puerto registrado exitosamente.\"});\n\n    }\n    */\n\n    // Inicio del codigo con base de datos\n\n    // Se recibe un json con toda la informacion respectiva para crear un usuario nuevo\n    const {nomPto, idPto, distPto, munPto, rioPto} = req.body;\n    // Se obtiene el numero de documento para revisar si el usuario ya existe\n    //const port = req.body.idPto;\n    // Se hace una busqueda del documento para ver si ya existe\n    puertoModel.findOne({puerto_id: idPto}, function (error, oldPort) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: en el proceso\" });\n        } else {\n            if (oldPort !== null && oldPort !== undefined) {\n                return res.send({ estado: \"ok\", msg: \"Error: El puerto ya se encuentra registrado en nuestra base de datos.\" });\n            } else {\n                // Se crea un nuevo usuario con una instancia del modelo de usuario y se le agrega toda la informacion que viene del front\n                const newPort = new puertoModel({ nombre_puerto: nomPto, puerto_id: idPto, distancia: distPto});\n                newPort.save(function (error) {\n                    if (error) {\n                        return res.send({ estado: \"error\", msg: \"ERROR: Al registrar un nuevo puerto\" });\n                    }\n                    res.send({ estado: \"ok\", msg: \"Puerto registrado exitosamente.\" });\n                });\n            }\n        }\n    })\n})\n\n\n\n/**\n* API Rest Modulo de listado de puertos\n* Descripcion: Indica los puertos activos\n* Ruta: /listarPuerto\n* Metodo: POST\n* Headers:\"Content-Type: application/json\"\n* Datos de respuesta: { puertos }\n*/\n\npuertosRutas.post(\"/listarPuerto\", function(req, res) {\n    puertoModel.find({}, (error, port) => {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: en el proceso\" });\n        } else {\n            const ports = port.map(p => p);\n            res.send({ estado: \"ok\", data: ports })\n        }\n      });\n})\n\n\n\n/**\n* API Rest Modulo de calculo de distancia\n* Descripcion: Indica el precio segun la distancia calculada\n* Ruta: /listarDistanciaPuerto/\n* Metodo: POST\n* Headers:\"Content-Type: application/json\"\n* Datos de respuesta: { distanciaPuertos, costo }\n*/\n\npuertosRutas.post(\"/listarDistanciaPuerto\", function(req, res) {\n\n/* Codigo para manejo de datos locales\n    const { origen, destino } = req.body;\n    //const portA = determinarPuerto(origen);\n    //console.log(portA);\n    // Se buscan los puertos en BD para determinar sus distancias\n    const puertoA = distancias.find(d => d.nombre.toLowerCase() === origen.toLowerCase());\n    const puertoB = distancias.find(d => d.nombre.toLowerCase() === destino.toLowerCase());\n    // Se suman las distancias de ambos puertos para determinar el valor a pagar\n    const distancia = puertoA.distancia + puertoB.distancia;\n    // Se calcula el valor en pesos segun la tasa del dolar manifestada al inicio del archivo\n    const pesos = costo.valor * tasaDolar;\n    // Se determina el precio total a cancelar en pesos segun la distancia de ambos puertos\n    const precio = pesos * distancia;\n    // Se hacen las respectivas validaciones de cada uno de los datos antes de enviarlos al Front\n    //console.log(puertoA)\n    //console.log(puertoB)\n    //console.log(distancia)\n    //console.log(precio)\n\n    res.send({ estado:\"ok\", msg:\"Distancia y valor calculado\", distancia, precio })\n\n*/\n    let alerta = \"No se pudo realizar la operación\"\n    let estado = \"error\"\n    // Se reciben los datos de origen para poder hacer los calculos\n    const { origen, destino } = req.body;\n    // Se buscan los puertos en BD para determinar sus distancias\n    puertoModel.find({ nombre_puerto: {$in: [origen, destino] } }, (error, port) => { \n        if (error) {\n            return res.send({ estado: \"error\", msg: \"Error: Uno de los puertos no aparece registrado en nuestro sistema.\" });\n        } else {\n            const ports = port.map(p => p);\n            // Se verifica que se hayan registrado ambos puertos\n            console.log(ports);\n            // Se suman las distancias de ambos puertos para determinar el valor a pagar\n            const distancia = ports[0].distancia + ports[1].distancia;\n            // Se verifica que se haya sumado la distancia\n            console.log(distancia);\n            // Se busca el valor de la milla actual\n            configModel.find({}, (error, costo) => {\n                if (error) {\n                    return res.send({ estado: \"error\", msg: \"No se pudo validar el precio a pagar.\" });\n                } else {\n                    console.log(costo);\n                    // Se calcula el valor en pesos segun la tasa del dolar manifestada al inicio del archivo\n                    const pesos = costo[0].valor * tasaDolar;\n                    // Se determina el precio total a cancelar en pesos segun la distancia de ambos puertos\n                    const precio = pesos * distancia;\n                    console.log(precio)\n                    // Se envia la info al front\n                    return res.send({ estado: \"ok\", msg: \"Distancia y valor calculado exitosamente.\", distancia, precio });\n                }\n            })\n        }\n    });   \n})\n\n\n\n/**\n* API Rest Modulo de configuracion de costo de milla\n* Descripcion: Edita el valor del costo de milla\n* Ruta: /editarCostoMilla\n* Metodo: POST\n* Headers:\"Content-Type: application/json\"\n* Datos de entrada:{ costoMilla }   \n* Datos de respuesta: { costoUpdate }\n*/\n\npuertosRutas.post(\"/editarCostoMilla\", function(req, res) {\n\n    /*\n    // Recibe el valor en dolares del Front\n    const { dolares } = req.body;\n    // Se hace seguimiento de como llega el valor\n    //console.log(dolares)\n    // Se actualiza el costo de la milla en BD\n    costo.valor = dolares;\n\n    res.send({estado: \"ok\", msg:\"Costo de milla actualizado satisfactoriamente\"});\n    */\n\n   // Se recibe info del front\n    const { dolares } = req.body;\n\n    // Se actualiza el valor de la milla en BD\n    configModel.updateOne({}, { $set: { valor: dolares } }, function (error) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: Al configurar el costo de la milla.\" });\n        } else {\n            return res.send({ estado: \"ok\", msg: \"Costo de milla actualizado satisfactoriamente.\"});\n        }\n    })   \n});\n\n\n/**\n* API Rest Modulo de vista de costo de milla\n* Descripcion: Identifica el valor del costo de milla\n* Ruta: /verCostoMilla\n* Metodo: GET\n* Headers:\"Content-Type: application/json\"\n* Datos de respuesta: { costo }\n*/\n\npuertosRutas.post(\"/verCostoMilla\", function(req, res) {\n\n/* Codigo con datos locales\n    // Hace la conversion a pesos segun el valor en doalres\n    const pesos = costo.valor * tasaDolar;\n    // Se hace seguimiento por consola para ver si la operacion es correcta\n    //console.log(pesos);\n    //console.log(costo.valor);\n    // Envia un estado ok, con un mensaje y los respectivos valores en dolares y pesos\n    res.send({ estado: \"ok\", msg: \"Costo de milla actual\", data: costo.valor, pesos });\n\n*/\n\n    // Se busca el valor actual de la milla en BD\n    configModel.findOne({}, function (error, costo) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: Al identificar el costo de la milla.\" });\n        } else {\n            // Hace la conversion a pesos segun el valor en dolares\n            const pesos = costo.valor * tasaDolar;\n            // Envia un estado ok, con un mensaje y los respectivos valores en dolares y pesos\n            return res.send({ estado: \"ok\", msg: \"Costo de milla actual\", data: costo.valor, pesos });\n        }\n    })\n});\n\n\n\n/**\n* API Rest Modulo de eliminar puertos\n* Descripcion: Elimina los puertos registrados\n* Ruta: /eliminarPuerto\n* Metodo: POST\n* Headers:\"Content-Type: application/json\"\n* Datos de respuesta: { msg }\n*/\n\npuertosRutas.post(\"/eliminarPuerto\", function(req, res) {\n    // Desestructuracion\n    const { puerto } = req.body;\n    puertoModel.findOne({puerto_id: puerto}, function (error, oldPort) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: No se encontró el puerto solicitado.\" });\n        } else {\n            if (oldPort !== null && oldPort !== undefined) {\n                puertoModel.remove({ puerto_id: puerto }, function (error) {\n                    if (error) {\n                        return res.send({ estado: \"error\", msg: \"ERROR: Al eliminar el puerto\" });\n                    } else {\n                        res.send({ estado: \"ok\", msg: \"Puerto eliminado exitosamente.\" });\n                    }\n                });\n            } \n        }\n    });    \n})\n\n\nexports.puertosRutas = puertosRutas;\n\n\n\nfunction determinarPuerto(item) {\n    let port = \"\";\n    if (item === 'Item 2') {\n        port = \"Puerto_Carreño\";\n    } else if (item === 'Item 3') {\n        port = \"Puerto_Nariño\";\n    } else if (item === 'Item 4') {\n        port = \"Puerto_Banqueta\";\n    } else if (item === 'Item 5') {\n        port = \"Puerto_Cabuyo\";\n    } else if (item === 'Item 6') {\n        port = \"Puerto_López\";\n    } else if (item === 'Item 7') {\n        port = \"Puerto_Guaviare\";\n    } else if (item === 'Item 8') {\n        port = \"Puerto_Mitú\";\n    } else if (item === 'Item 9') {\n        port = \"Puerto_Yuruparí\";\n    } else if (item === 'Item 10') {\n        port = \"Puerto_Pucarón\";\n    } else if (item === 'Item 11') {\n        port = \"Puerto_Calamar\";\n    } else if (item === 'Item 12') {\n        port = \"Puerto_Inírida\";\n    } else if (item === 'Item 13') {\n        port = \"Puerto_Tumaco\";\n    } else if (item === 'Item 14') {\n        port = \"Puerto_Buenaventura\";\n    } else if (item === 'Item 15') {\n        port = \"Puerto_Salgar\";\n    } else if (item === 'Item 16') {\n        port = \"Puerto_Berrio\";\n    } else if (item === 'Item 17') {\n        port = \"Puerto_Barrancabermeja\";\n    } else if (item === 'Item 18') {\n        port = \"Puerto_Cartagena\";\n    } else if (item === 'Item 19') {\n        port = \"Puerto_Santa_Marta\";\n    } else if (item === 'Item 20') {\n        port = \"Puerto_Barranquilla\";\n    } else if (item === 'Item 21') {\n        port = \"Puerto_Gamarra\";\n    }\n    return port;\n}"],"file":"puertosRutas.js"}