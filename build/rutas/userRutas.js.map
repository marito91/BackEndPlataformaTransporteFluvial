{"version":3,"sources":["../../src/rutas/userRutas.js"],"names":["Router","require","userRutas","usuarioModel","Usuario","compare","sign","login","loginUpdate","registroUsuario","usuarioRegistrado","usuarios","post","req","res","usuario","password","body","user","findOne","documento","status","json","estado","msg","passOK","token","rol","perfil","nombre","process","env","JWT_SECRET_KEY","url","nom","lastName","documentType","document","emailAddress","userType","phone","profile","idType","error","oldUser","send","newUser","apellido","tipo_documento","email","telefono","save","get","alerta","params","undefined","data","updateOne","$set","remove","exports"],"mappings":"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","sourcesContent":["const { Router } = require(\"express\");\nconst userRutas = Router();\nconst { usuarioModel } = require(\"../modelos/usuarioModel\");\nconst Usuario = require(\"../modelos/usuarioModel\");\nconst { compare } = require(\"bcryptjs\");\nconst { sign } = require(\"jsonwebtoken\");\n//const { userGuard } = require(\"../guards/userGuard\");\n\nconst { login, loginUpdate, registroUsuario, usuarioRegistrado, usuarios } = require(\"../datos\");\n\n\n    /**\n * API Rest Modulo de Login\n * Descripcion: Indica el ingreso de los usuarios a la plataforma.\n * Ruta: /login\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { login }\n * Respuesta: { loginUpdate }\n */\n\nuserRutas.post(\"/login\", async function(req, res) {\n    //Capturar usuario / password\n    const { usuario, password } = req.body;\n    // Comprobar el usuario exista en BD\n    const user = await usuarioModel.findOne({ documento: usuario });\n\n    if (!user) {\n        return res.status(401).json({ estado: \"error\", msg: \"ERROR: Credenciales inválidas. 1\" })\n    }\n    // Comparar la contraseña \n    const passOK = await compare(password, user.password);\n    if (passOK === true) {\n        const token = sign(\n            {\n                usuario: user.documento,\n                rol: user.perfil,\n                nombre: user.nombre\n            },\n            process.env.JWT_SECRET_KEY\n        )\n        return res.status(200).json({ estado: \"ok\", msg: \"Logueado\", token, url:\"/inicio\" });\n    }\n    return res.status(401).json({ estado: \"error\", msg: \"ERROR: Credenciales inválidas. 2\" });\n    // Dar/denegar acceso\n});\n\n\n/**\n * API Rest Modulo de registro de usuarios\n * Descripcion: Registra los usuarios a la plataforma\n * Ruta: /registrarUsuario\n * Metodo: POSTs\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada:  { registroUsuario }\n * Respuesta: { usuarioRegistrado }\n */\n\nuserRutas.post(\"/registrarUsuario\", function(req, res) {\n /* Codigo Local NO DATABASE\n    // Se recibe un json con toda la informacion respectiva para crear un usuario nuevo\n    const {nom, lastName, documentType, document, emailAddress, userType, phone, password} = req.body;\n    // Se obtiene el numero de documento para revisar si el usuario ya existe\n    const id = req.body.document;\n    // Se hace una busqueda del documento para ver si ya existe\n    const oldUser = usuarios.find(u => u.numero_documento === id);\n    // Si el usuario ya existe envia una alerta \n    if (oldUser != null && oldUser != undefined) {\n        res.send({estado : \"error\", msg : \"El usuario ya se encuentra registrado en el sistema.\"});\n    } else { // de lo contrario:\n        // Se determina el tipo de perfil segun la informacion que recibe\n        if (userType === 'Item 2') {\n            profile = 1;\n        } else if (userType === 'Item 3') {\n            profile = 2;\n        }\n        // Se determina el tipo de documento segun la informacion que recibe\n        if (documentType === 'Item 2') {\n            idType = \"C.C\";\n        } else if (documentType === 'Item 3') {\n            idType = \"C.E\";\n        } else if (documentType === 'Item 4') {\n            idType = \"NIT\";\n        }\n        // Se crea una variable newUser donde a cada Key se le asigna los valores que vienen del json del front end\n        const newUser = {nombre: nom, apellido: lastName, tipo_documento: idType, numero_documento: document, email: emailAddress, perfil: profile, celular: phone, pass: password};\n        // Se agrega el newUser a base de datos\n        usuarios.push(newUser);\n        // Se confirma que se estan recibiendo todos los datos correspondientes\n        console.log(usuarios);\n        // Se envia estado y mensaje al front end para confirmar que el usuario se registro\n        res.send({estado : \"ok\", msg : \"Usuario Registrado\"});\n    }\n    */\n\n    // Aqui inicia el codigo con base de datos\n\n    // Se recibe un json con toda la informacion respectiva para crear un usuario nuevo\n    const {nom, lastName, documentType, document, emailAddress, userType, phone, password} = req.body;\n    // Se determina el tipo de perfil segun la informacion que recibe\n    if (userType === 'Item 2') {\n        profile = \"1\";\n    } else if (userType === 'Item 3') {\n        profile = \"2\";\n    }\n    // Se determina el tipo de documento segun la informacion que recibe\n    if (documentType === 'Item 2') {\n        idType = \"C.C\";\n    } else if (documentType === 'Item 3') {\n        idType = \"C.E\";\n    } else if (documentType === 'Item 4') {\n        idType = \"NIT\";\n    }\n\n    // Se hace una busqueda del documento para ver si ya existe\n    usuarioModel.findOne({documento: document}, function (error, oldUser) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar usuario\" });\n        } else {\n            if (oldUser !== null) {\n                return res.send({ estado: \"ok\", msg: \"Error: El usuario ya se encuentra registrado en el sistema.\" });\n            } else {\n                // Se crea un nuevo usuario con una instancia del modelo de usuario y se le agrega toda la informacion que viene del front\n                const newUser = new usuarioModel({nombre: nom, apellido: lastName, tipo_documento: idType, documento: document, email: emailAddress, perfil: profile, telefono: phone, password: password});\n                newUser.save(function (error) {\n                    if (error) {\n                        return res.send({ estado: \"error\", msg: \"ERROR: Al registrar nuevo usuario.\" });\n                    }\n                    res.send({ estado: \"ok\", msg: \"Usuario registrado exitosamente.\" });\n                });\n            }\n        }\n    })\n})\n\n\n/**\n * API Rest Modulo de listar usuarios\n * Descripcion: Buscar los usuarios y muestra la información de ellos\n * Ruta: /listarUsuario\n * Metodo: GET\n * Headers:\"Content-Type: application/json\"\n * Datos de respuesta: { usuarios }\n */\n\n userRutas.get(\"/listarUsuario/:documento\", function(req, res) {\n    let alerta = \"No se encontró el usuario solicitado\";\n    let estado = \"error\";\n    const document = req.params.documento; //Viene un json {numero_documento:\"24526698\"}\n    // Se hace una busqueda del documento para ver si ya existe\n    usuarioModel.findOne({documento: document}, function (error, oldUser) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar usuario\" });\n        } else {\n            if (oldUser !== null && oldUser != undefined) {\n                alerta = \"Usuario encontrado exitosamente\"\n                estado = \"ok\"\n                return res.send({estado: estado, msg: alerta, data: oldUser});\n            } else {\n                return res.send({estado: estado, msg: alerta, data: oldUser});\n            } \n        }\n    })\n}); \n\n\n/**\n * API Rest Modulo de editar usuarios\n * Descripcion: Busca los usuarios y actualiza la información de ellos\n * Ruta: /editarUsuario\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: {nom, lastName, documentType, document, emailAddress, userType, phone, password}\n * Datos de respuesta: {estado : \"ok\", mensaje : \"Usuario Guardado\"}\n */\n\n userRutas.post(\"/editarUsuario\", function(req, res) {\n/*\n    // Desestructuracion\n    const {nom, lastName, documentType, document, emailAddress, userType, phone, password} = req.body;\n    // Se hacen las alertas predeterminadas\n    let alerta = \"error\";\n    let mensaje = \"El usuario no se encuentra registrado en nuestra base de datos\"\n    let i = 0;\n    for (const u of usuarios) {\n        if (u.numero_documento.toLowerCase() == document.toLowerCase()) {\n            // Se hacen las respectivas validaciones con la informacion que viene de los SELECT FIELDS\n            if (userType === 'Item 2') {\n                profile = 1;\n            } else if (userType === 'Item 3') {\n                profile = 2;\n            }\n            // Se determina el tipo de documento segun la informacion que recibe\n            if (documentType === 'Item 2') {\n                idType = \"C.C\";\n            } else if (documentType === 'Item 3') {\n                idType = \"C.E\";\n            } else if (documentType === 'Item 4') {\n                idType = \"NIT\";\n            }\n            // Actualiza el producto con los nuevos datos\n            usuarios[i].nombre = nom; // Se modifican los datos almacenados con los que trae el json \n            usuarios[i].apellido = lastName; // Se modifican los datos almacenados con los que trae el json \n            usuarios[i].tipo_documento = idType; // Se modifican los datos almacenados con los que trae el json \n            usuarios[i].numero_documento = document; // Se modifican los datos almacenados con los que trae el json \n            usuarios[i].email = emailAddress; // Se modifican los datos almacenados con los que trae el json \n            usuarios[i].perfil = profile; // Se modifican los datos almacenados con los que trae el json \n            usuarios[i].celular = phone; // Se modifican los datos almacenados con los que trae el json \n            usuarios[i].pass = password; // Se modifican los datos almacenados con los que trae el json - ESTE SE DEBE AJUSTAR CUANDO SE HAGA LA AUTENTICACION\n            alerta = \"ok\";\n            mensaje = \"Usuario editado exitosamente\"\n            break;            \n        }\n        i++;\n    }\n    res.send({estado : alerta, msg : mensaje});\n*/\n\n    // Se trae la informacion del Front\n    const {nom, lastName, documentType, document, emailAddress, userType, phone, password} = req.body;\n    // Se identifican los valores de tipo de usuario y tipo de documento\n    if (userType === 'Item 2') {\n        profile = \"1\";\n    } else if (userType === 'Item 3') {\n        profile = \"2\";\n    }\n    // Se determina el tipo de documento segun la informacion que recibe\n    if (documentType === 'Item 2') {\n        idType = \"C.C\";\n    } else if (documentType === 'Item 3') {\n        idType = \"C.E\";\n    } else if (documentType === 'Item 4') {\n        idType = \"NIT\";\n    }\n    usuarioModel.findOne({documento: document}, function (error, oldUser) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar usuario\" });\n        } else {\n            if (oldUser !== null && oldUser !== undefined) {\n                usuarioModel.updateOne({ documento: document }, { $set: { nombre: nom, apellido: lastName, tipo_documento: idType, documento: document, email: emailAddress, perfil: profile, telefono: phone, /*password: password*/ } }, function (error) {\n                    if (error) {\n                        return res.send({ estado: \"error\", msg: \"ERROR: Al editar el usuario\" });\n                    } else {\n                        res.send({ estado: \"ok\", msg: \"Usuario editado\" });\n                    }\n                });\n            } \n        }\n    });    \n }); \n\n\n/**\n * API Rest Modulo de eliminacion de Usuarios (se ajusta a BD)\n * Descripcion: Elimina un usuario guardado en la base de datos.\n * Ruta: /eliminarUsuario\n * Metodo: POST\n * Datos de entrada: { document }\n * Respuesta: {estado : \"ok\", mensaje : \"Usuario Eliminado\"}\n */\n userRutas.post(\"/eliminarUsuario\", function(req,res) {\n\n    /* Codigo para eliminar usuario local\n    // Desestructuracion\n    const { document } = req.body;\n    // Buscar el usuario a Eliminar\n    let i = 0;\n    for (const u of usuarios) {\n        if (u.numero_documento.toLowerCase() == document.toLowerCase()) {\n            usuarios.splice(i, 1);\n            break;\n        }\n        i++;\n    }\n    res.send({estado : \"ok\", msg : \"Usuario Eliminado\"});\n\n*/\n\n// Codigo para eliminar usuario en base de datos\n    // Desestructuracion\n    const { document } = req.body;\n    usuarioModel.findOne({documento: document}, function (error, oldUser) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar usuario\" });\n        } else {\n            if (oldUser !== null && oldUser !== undefined) {\n                usuarioModel.remove({ documento: document }, function (error) {\n                    if (error) {\n                        return res.send({ estado: \"error\", msg: \"ERROR: Al eliminar el usuario\" });\n                    } else {\n                        res.send({ estado: \"ok\", msg: \"Usuario eliminado exitosamente.\" });\n                    }\n                });\n            } \n        }\n    });    \n\n\n})\n\nexports.userRutas = userRutas;"],"file":"userRutas.js"}