{"version":3,"sources":["../../src/guards/userAuthGuard.js"],"names":["verify","require","userAuthGuard","req","res","next","authorization","headers","status","json","estado","msg","token","split","payload","process","env","JWT_SECRET_KEY","usuario","error","console","log","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,cAAD,CAA1B,C,CAEA;;;AACA,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,IAAjC,EAAuC;AACnC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAoBH,GAAG,CAACI,OAA9B,CAFmC,CAGnC;;AACA,MAAI,CAACD,aAAL,EAAoB;AAChB;AACAD,IAAAA,IAAI,CAACD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,MAAM,EAAE,OAAV;AAAmBC,MAAAA,GAAG,EAAE;AAAxB,KAArB,CAAD,CAAJ;AACH;;AACD,MAAI;AACA;AACA,UAAMC,KAAK,GAAGN,aAAa,CAACO,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAd,CAFA,CAGA;;AACA,UAAMC,OAAO,GAAGd,MAAM,CAACY,KAAD,EAAQG,OAAO,CAACC,GAAR,CAAYC,cAApB,CAAtB,CAJA,CAKA;;AACA,QAAI,CAACH,OAAO,CAACI,OAAb,EAAsB;AAClBb,MAAAA,IAAI,CAACD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,GAAG,EAAE;AAAxB,OAArB,CAAD,CAAJ;AACH;AACJ,GATD,CASE,OAAOQ,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAd,IAAAA,IAAI,CAACD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,MAAM,EAAE,OAAV;AAAmBC,MAAAA,GAAG,EAAE;AAAxB,KAArB,CAAD,CAAJ;AACH,GApBkC,CAqBnC;;;AACAN,EAAAA,IAAI;AACP;;AAEDiB,OAAO,CAACpB,aAAR,GAAwBA,aAAxB","sourcesContent":["const { verify } = require(\"jsonwebtoken\");\n\n// Se crea un Guardian para denegar/autorizar al usuario\nfunction userAuthGuard(req, res, next) {\n    //Captura la cabecera Authorization\n    const { authorization } = req.headers;\n    // Se comprueba que tenga la cabecera Authorization\n    if (!authorization) {\n        // Devuelve error 403, sino envi√≥ cabecera\n        next(res.status(403).json({ estado: \"error\", msg: \"NO autorizado\" }));\n    }\n    try {\n        //Obtiene el token desde la cabera Authorization\n        const token = authorization.split(\" \")[1];\n        //Obtiene el payload del token\n        const payload = verify(token, process.env.JWT_SECRET_KEY);\n        //Verifica el rol del usuario, admite solo \"admin\"\n        if (!payload.usuario) {\n            next(res.status(403).json({ estado: \"error\", msg: \"NO autorizado\" }));\n        }\n    } catch (error) {\n        console.log(error);\n        next(res.status(500).json({ estado: \"error\", msg: \"NO autorizado\" }));\n    }\n    // Pasa a ejecutar la API\n    next();\n}\n\nexports.userAuthGuard = userAuthGuard"],"file":"userAuthGuard.js"}