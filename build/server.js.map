{"version":3,"sources":["../src/server.js"],"names":["express","require","cors","mongoose","Usuario","Orden","Puerto","userRutas","ordenesRutas","puertosRutas","app","use","json","urlencoded","extended","config","connect","process","env","MONGODB_SERVER_URL","then","res","console","log","catch","error","get","req","send","post","nombre","email","mensaje","body","estado","msg","listen"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,iBAAD,CAArB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,kBAAD,CAAtB,C,CAGA;;;AACA,MAAM;AAAEM,EAAAA;AAAF,IAAgBN,OAAO,CAAC,mBAAD,CAA7B;;AACA,MAAM;AAAEO,EAAAA;AAAF,IAAmBP,OAAO,CAAC,sBAAD,CAAhC;;AACA,MAAM;AAAEQ,EAAAA;AAAF,IAAmBR,OAAO,CAAC,sBAAD,CAAhC;;AAGA,MAAMS,GAAG,GAAGV,OAAO,EAAnB;AACAU,GAAG,CAACC,GAAJ,CAAQT,IAAI,EAAZ,E,CAAiB;;AACjBQ,GAAG,CAACC,GAAJ,CAAQX,OAAO,CAACY,IAAR,EAAR,E,CAAwB;;AACxBF,GAAG,CAACC,GAAJ,CAAQX,OAAO,CAACa,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR,E,CAAiD;AAGjD;;AACAb,OAAO,CAAC,QAAD,CAAP,CAAkBc,MAAlB,G,CAEA;;;AACAL,GAAG,CAACC,GAAJ,CAAQ,OAAR,EAAiBJ,SAAjB;AACAG,GAAG,CAACC,GAAJ,CAAQ,UAAR,EAAoBH,YAApB;AACAE,GAAG,CAACC,GAAJ,CAAQ,UAAR,EAAoBF,YAApB,E,CAGA;;AACAN,QAAQ,CAACa,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,kBAA7B,EACCC,IADD,CACMC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,2BAAZ,CADb,EAECC,KAFD,CAEOC,KAAK,IAAIH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CAFhB;AAKAf,GAAG,CAACgB,GAAJ,CAAQ,GAAR,EAAa,UAAUC,GAAV,EAAeN,GAAf,EAAoB;AAC7BA,EAAAA,GAAG,CAACO,IAAJ,CAAS,YAAT;AACH,CAFD;AAIAlB,GAAG,CAACmB,IAAJ,CAAS,WAAT,EAAsB,UAASF,GAAT,EAAcN,GAAd,EAAmB;AACrC,QAAM;AAAES,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAA6BL,GAAG,CAACM,IAAvC;AACAZ,EAAAA,GAAG,CAACO,IAAJ,CAAS;AAACM,IAAAA,MAAM,EAAG,IAAV;AAAgBC,IAAAA,GAAG,EAAG;AAAtB,GAAT;AACH,CAHD;AAMAzB,GAAG,CAAC0B,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACnBd,EAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACH,CAFD","sourcesContent":["//npm init -y\n//npm install @babel/cli @babel/core @babel/node @babel/preset-env --save-dev\n//npm install -g @babel/core @babel/cli\n//npm install express --save\n//npm run build && node ./build/server.jsclear\n//npm install cors --save\n//npm i mongoose (desde la carpeta back)\n//npm install jsonwebtoken bcryptjs --save (Instala los webtoken y bcrypt)\n//node require('crypto').randomBytes(32).toString('hex')\n\n\nconst express = require(\"express\");\nconst cors = require(\"cors\"); \nconst mongoose = require(\"mongoose\");\nconst Usuario = require(\"./modelos/usuarioModel\");\nconst Orden = require(\"./modelos/orden\");\nconst Puerto = require(\"./modelos/puerto\");\n\n\n// Se importan las rutas principales donde se almacenan las APIs respectivas\nconst { userRutas } = require(\"./rutas/userRutas\")\nconst { ordenesRutas } = require(\"./rutas/ordenesRutas\")\nconst { puertosRutas } = require(\"./rutas/puertosRutas\")\n\n        \nconst app = express();\napp.use(cors()); // Middleware CORS\napp.use(express.json()) // Middleware convertir json\napp.use(express.urlencoded({ extended: true })); // Codifica la informacion que viene por el cliente en la barra de busqueda del navegador\n\n\n// Distribucion de Rutas\nrequire(\"dotenv\").config();\n\n// APIs \napp.use(\"/user\", userRutas);\napp.use(\"/ordenes\", ordenesRutas);\napp.use(\"/puertos\", puertosRutas);\n\n\n// Se conecta la aplicaciÃ³n a Base de Datos\nmongoose.connect(process.env.MONGODB_SERVER_URL)\n.then(res => console.log(\"Conectado a base de datos\"))\n.catch(error => console.log(error));\n\n\napp.get(\"/\", function (req, res) {\n    res.send(\"Main route\")\n})\n\napp.post(\"/contacto\", function(req, res) {\n    const { nombre, email, mensaje } = req.body;\n    res.send({estado : \"ok\", msg : \"Gracias por su mensaje. Lo estaremos contactando pronto!\"});\n})\n\n\napp.listen(5000, () => {\n    console.log(\"Servidor escuchando en el puerto 5000\")\n})"],"file":"server.js"}