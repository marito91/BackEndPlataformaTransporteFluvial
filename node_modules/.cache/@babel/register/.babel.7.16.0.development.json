{
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"filename\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/server.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.0": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/server.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "//npm init -y\n//npm install @babel/cli @babel/core @babel/node @babel/preset-env --save-dev\n//npm install express --save\n//npm run build && node ./build/server.jsclear\n//npm install cors --save\n//npm i mongoose (desde la carpeta back)\n//npm install jsonwebtoken bcryptjs --save (Instala los webtoken y bcrypt)\n//node require('crypto').randomBytes(32).toString('hex')\nconst express = require(\"express\");\n\nconst cors = require(\"cors\");\n\nconst mongoose = require(\"mongoose\");\n\nconst Usuario = require(\"./modelos/usuarioModel\");\n\nconst Orden = require(\"./modelos/orden\");\n\nconst Puerto = require(\"./modelos/puerto\"); // Se importan las rutas principales donde se almacenan las APIs respectivas\n\n\nconst {\n  userRutas\n} = require(\"./rutas/userRutas\");\n\nconst {\n  ordenesRutas\n} = require(\"./rutas/ordenesRutas\");\n\nconst {\n  puertosRutas\n} = require(\"./rutas/puertosRutas\");\n\nconst app = express();\napp.use(cors()); // Middleware CORS\n\napp.use(express.json()); // Middleware convertir json\n\napp.use(express.urlencoded({\n  extended: true\n})); // Codifica la informacion que viene por el cliente en la barra de busqueda del navegador\n// Distribucion de Rutas\n\nrequire(\"dotenv\").config(); // APIs \n\n\napp.use(\"/user\", userRutas);\napp.use(\"/ordenes\", ordenesRutas);\napp.use(\"/puertos\", puertosRutas); // Se conecta la aplicaciÃ³n a Base de Datos\n\nmongoose.connect(process.env.MONGODB_SERVER_URL).then(res => console.log(\"Conectado a base de datos\")).catch(error => console.log(error));\napp.get(\"/\", function (req, res) {\n  res.send(\"Main route\");\n});\napp.post(\"/contacto\", function (req, res) {\n  const {\n    nombre,\n    email,\n    mensaje\n  } = req.body;\n  res.send({\n    estado: \"ok\",\n    msg: \"Gracias por su mensaje. Lo estaremos contactando pronto!\"\n  });\n});\napp.listen(5000, () => {\n  console.log(\"Servidor escuchando en el puerto 5000\");\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImNvcnMiLCJtb25nb29zZSIsIlVzdWFyaW8iLCJPcmRlbiIsIlB1ZXJ0byIsInVzZXJSdXRhcyIsIm9yZGVuZXNSdXRhcyIsInB1ZXJ0b3NSdXRhcyIsImFwcCIsInVzZSIsImpzb24iLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJjb25maWciLCJjb25uZWN0IiwicHJvY2VzcyIsImVudiIsIk1PTkdPREJfU0VSVkVSX1VSTCIsInRoZW4iLCJyZXMiLCJjb25zb2xlIiwibG9nIiwiY2F0Y2giLCJlcnJvciIsImdldCIsInJlcSIsInNlbmQiLCJwb3N0Iiwibm9tYnJlIiwiZW1haWwiLCJtZW5zYWplIiwiYm9keSIsImVzdGFkbyIsIm1zZyIsImxpc3RlbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxRQUFRLEdBQUdGLE9BQU8sQ0FBQyxVQUFELENBQXhCOztBQUNBLE1BQU1HLE9BQU8sR0FBR0gsT0FBTyxDQUFDLHdCQUFELENBQXZCOztBQUNBLE1BQU1JLEtBQUssR0FBR0osT0FBTyxDQUFDLGlCQUFELENBQXJCOztBQUNBLE1BQU1LLE1BQU0sR0FBR0wsT0FBTyxDQUFDLGtCQUFELENBQXRCLEMsQ0FHQTs7O0FBQ0EsTUFBTTtBQUFFTSxFQUFBQTtBQUFGLElBQWdCTixPQUFPLENBQUMsbUJBQUQsQ0FBN0I7O0FBQ0EsTUFBTTtBQUFFTyxFQUFBQTtBQUFGLElBQW1CUCxPQUFPLENBQUMsc0JBQUQsQ0FBaEM7O0FBQ0EsTUFBTTtBQUFFUSxFQUFBQTtBQUFGLElBQW1CUixPQUFPLENBQUMsc0JBQUQsQ0FBaEM7O0FBR0EsTUFBTVMsR0FBRyxHQUFHVixPQUFPLEVBQW5CO0FBQ0FVLEdBQUcsQ0FBQ0MsR0FBSixDQUFRVCxJQUFJLEVBQVosRSxDQUFpQjs7QUFDakJRLEdBQUcsQ0FBQ0MsR0FBSixDQUFRWCxPQUFPLENBQUNZLElBQVIsRUFBUixFLENBQXdCOztBQUN4QkYsR0FBRyxDQUFDQyxHQUFKLENBQVFYLE9BQU8sQ0FBQ2EsVUFBUixDQUFtQjtBQUFFQyxFQUFBQSxRQUFRLEVBQUU7QUFBWixDQUFuQixDQUFSLEUsQ0FBaUQ7QUFHakQ7O0FBQ0FiLE9BQU8sQ0FBQyxRQUFELENBQVAsQ0FBa0JjLE1BQWxCLEcsQ0FFQTs7O0FBQ0FMLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLE9BQVIsRUFBaUJKLFNBQWpCO0FBQ0FHLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLFVBQVIsRUFBb0JILFlBQXBCO0FBQ0FFLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLFVBQVIsRUFBb0JGLFlBQXBCLEUsQ0FHQTs7QUFDQU4sUUFBUSxDQUFDYSxPQUFULENBQWlCQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsa0JBQTdCLEVBQ0NDLElBREQsQ0FDTUMsR0FBRyxJQUFJQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSwyQkFBWixDQURiLEVBRUNDLEtBRkQsQ0FFT0MsS0FBSyxJQUFJSCxPQUFPLENBQUNDLEdBQVIsQ0FBWUUsS0FBWixDQUZoQjtBQUtBZixHQUFHLENBQUNnQixHQUFKLENBQVEsR0FBUixFQUFhLFVBQVVDLEdBQVYsRUFBZU4sR0FBZixFQUFvQjtBQUM3QkEsRUFBQUEsR0FBRyxDQUFDTyxJQUFKLENBQVMsWUFBVDtBQUNILENBRkQ7QUFJQWxCLEdBQUcsQ0FBQ21CLElBQUosQ0FBUyxXQUFULEVBQXNCLFVBQVNGLEdBQVQsRUFBY04sR0FBZCxFQUFtQjtBQUNyQyxRQUFNO0FBQUVTLElBQUFBLE1BQUY7QUFBVUMsSUFBQUEsS0FBVjtBQUFpQkMsSUFBQUE7QUFBakIsTUFBNkJMLEdBQUcsQ0FBQ00sSUFBdkM7QUFDQVosRUFBQUEsR0FBRyxDQUFDTyxJQUFKLENBQVM7QUFBQ00sSUFBQUEsTUFBTSxFQUFHLElBQVY7QUFBZ0JDLElBQUFBLEdBQUcsRUFBRztBQUF0QixHQUFUO0FBQ0gsQ0FIRDtBQU1BekIsR0FBRyxDQUFDMEIsTUFBSixDQUFXLElBQVgsRUFBaUIsTUFBTTtBQUNuQmQsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksdUNBQVo7QUFDSCxDQUZEIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9tYXJpb2dvbWV6L0RvY3VtZW50cy9HaXRIdWIvQmFja0VuZFBsYXRhZm9ybWFUcmFuc3BvcnRlRmx1dmlhbC9zcmMvIiwic291cmNlc0NvbnRlbnQiOlsiLy9ucG0gaW5pdCAteVxuLy9ucG0gaW5zdGFsbCBAYmFiZWwvY2xpIEBiYWJlbC9jb3JlIEBiYWJlbC9ub2RlIEBiYWJlbC9wcmVzZXQtZW52IC0tc2F2ZS1kZXZcbi8vbnBtIGluc3RhbGwgZXhwcmVzcyAtLXNhdmVcbi8vbnBtIHJ1biBidWlsZCAmJiBub2RlIC4vYnVpbGQvc2VydmVyLmpzY2xlYXJcbi8vbnBtIGluc3RhbGwgY29ycyAtLXNhdmVcbi8vbnBtIGkgbW9uZ29vc2UgKGRlc2RlIGxhIGNhcnBldGEgYmFjaylcbi8vbnBtIGluc3RhbGwganNvbndlYnRva2VuIGJjcnlwdGpzIC0tc2F2ZSAoSW5zdGFsYSBsb3Mgd2VidG9rZW4geSBiY3J5cHQpXG4vL25vZGUgcmVxdWlyZSgnY3J5cHRvJykucmFuZG9tQnl0ZXMoMzIpLnRvU3RyaW5nKCdoZXgnKVxuXG5cbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTtcbmNvbnN0IGNvcnMgPSByZXF1aXJlKFwiY29yc1wiKTsgXG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoXCJtb25nb29zZVwiKTtcbmNvbnN0IFVzdWFyaW8gPSByZXF1aXJlKFwiLi9tb2RlbG9zL3VzdWFyaW9Nb2RlbFwiKTtcbmNvbnN0IE9yZGVuID0gcmVxdWlyZShcIi4vbW9kZWxvcy9vcmRlblwiKTtcbmNvbnN0IFB1ZXJ0byA9IHJlcXVpcmUoXCIuL21vZGVsb3MvcHVlcnRvXCIpO1xuXG5cbi8vIFNlIGltcG9ydGFuIGxhcyBydXRhcyBwcmluY2lwYWxlcyBkb25kZSBzZSBhbG1hY2VuYW4gbGFzIEFQSXMgcmVzcGVjdGl2YXNcbmNvbnN0IHsgdXNlclJ1dGFzIH0gPSByZXF1aXJlKFwiLi9ydXRhcy91c2VyUnV0YXNcIilcbmNvbnN0IHsgb3JkZW5lc1J1dGFzIH0gPSByZXF1aXJlKFwiLi9ydXRhcy9vcmRlbmVzUnV0YXNcIilcbmNvbnN0IHsgcHVlcnRvc1J1dGFzIH0gPSByZXF1aXJlKFwiLi9ydXRhcy9wdWVydG9zUnV0YXNcIilcblxuICAgICAgICBcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmFwcC51c2UoY29ycygpKTsgLy8gTWlkZGxld2FyZSBDT1JTXG5hcHAudXNlKGV4cHJlc3MuanNvbigpKSAvLyBNaWRkbGV3YXJlIGNvbnZlcnRpciBqc29uXG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTsgLy8gQ29kaWZpY2EgbGEgaW5mb3JtYWNpb24gcXVlIHZpZW5lIHBvciBlbCBjbGllbnRlIGVuIGxhIGJhcnJhIGRlIGJ1c3F1ZWRhIGRlbCBuYXZlZ2Fkb3JcblxuXG4vLyBEaXN0cmlidWNpb24gZGUgUnV0YXNcbnJlcXVpcmUoXCJkb3RlbnZcIikuY29uZmlnKCk7XG5cbi8vIEFQSXMgXG5hcHAudXNlKFwiL3VzZXJcIiwgdXNlclJ1dGFzKTtcbmFwcC51c2UoXCIvb3JkZW5lc1wiLCBvcmRlbmVzUnV0YXMpO1xuYXBwLnVzZShcIi9wdWVydG9zXCIsIHB1ZXJ0b3NSdXRhcyk7XG5cblxuLy8gU2UgY29uZWN0YSBsYSBhcGxpY2FjacOzbiBhIEJhc2UgZGUgRGF0b3Ncbm1vbmdvb3NlLmNvbm5lY3QocHJvY2Vzcy5lbnYuTU9OR09EQl9TRVJWRVJfVVJMKVxuLnRoZW4ocmVzID0+IGNvbnNvbGUubG9nKFwiQ29uZWN0YWRvIGEgYmFzZSBkZSBkYXRvc1wiKSlcbi5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcikpO1xuXG5cbmFwcC5nZXQoXCIvXCIsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgIHJlcy5zZW5kKFwiTWFpbiByb3V0ZVwiKVxufSlcblxuYXBwLnBvc3QoXCIvY29udGFjdG9cIiwgZnVuY3Rpb24ocmVxLCByZXMpIHtcbiAgICBjb25zdCB7IG5vbWJyZSwgZW1haWwsIG1lbnNhamUgfSA9IHJlcS5ib2R5O1xuICAgIHJlcy5zZW5kKHtlc3RhZG8gOiBcIm9rXCIsIG1zZyA6IFwiR3JhY2lhcyBwb3Igc3UgbWVuc2FqZS4gTG8gZXN0YXJlbW9zIGNvbnRhY3RhbmRvIHByb250byFcIn0pO1xufSlcblxuXG5hcHAubGlzdGVuKDUwMDAsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIlNlcnZpZG9yIGVzY3VjaGFuZG8gZW4gZWwgcHVlcnRvIDUwMDBcIilcbn0pIl19",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "express",
        "require",
        "cors",
        "mongoose",
        "Usuario",
        "Orden",
        "Puerto",
        "userRutas",
        "ordenesRutas",
        "puertosRutas",
        "app",
        "use",
        "json",
        "urlencoded",
        "extended",
        "config",
        "connect",
        "process",
        "env",
        "MONGODB_SERVER_URL",
        "then",
        "res",
        "console",
        "log",
        "catch",
        "error",
        "get",
        "req",
        "send",
        "post",
        "nombre",
        "email",
        "mensaje",
        "body",
        "estado",
        "msg",
        "listen"
      ],
      "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,iBAAD,CAArB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,kBAAD,CAAtB,C,CAGA;;;AACA,MAAM;AAAEM,EAAAA;AAAF,IAAgBN,OAAO,CAAC,mBAAD,CAA7B;;AACA,MAAM;AAAEO,EAAAA;AAAF,IAAmBP,OAAO,CAAC,sBAAD,CAAhC;;AACA,MAAM;AAAEQ,EAAAA;AAAF,IAAmBR,OAAO,CAAC,sBAAD,CAAhC;;AAGA,MAAMS,GAAG,GAAGV,OAAO,EAAnB;AACAU,GAAG,CAACC,GAAJ,CAAQT,IAAI,EAAZ,E,CAAiB;;AACjBQ,GAAG,CAACC,GAAJ,CAAQX,OAAO,CAACY,IAAR,EAAR,E,CAAwB;;AACxBF,GAAG,CAACC,GAAJ,CAAQX,OAAO,CAACa,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR,E,CAAiD;AAGjD;;AACAb,OAAO,CAAC,QAAD,CAAP,CAAkBc,MAAlB,G,CAEA;;;AACAL,GAAG,CAACC,GAAJ,CAAQ,OAAR,EAAiBJ,SAAjB;AACAG,GAAG,CAACC,GAAJ,CAAQ,UAAR,EAAoBH,YAApB;AACAE,GAAG,CAACC,GAAJ,CAAQ,UAAR,EAAoBF,YAApB,E,CAGA;;AACAN,QAAQ,CAACa,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,kBAA7B,EACCC,IADD,CACMC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,2BAAZ,CADb,EAECC,KAFD,CAEOC,KAAK,IAAIH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CAFhB;AAKAf,GAAG,CAACgB,GAAJ,CAAQ,GAAR,EAAa,UAAUC,GAAV,EAAeN,GAAf,EAAoB;AAC7BA,EAAAA,GAAG,CAACO,IAAJ,CAAS,YAAT;AACH,CAFD;AAIAlB,GAAG,CAACmB,IAAJ,CAAS,WAAT,EAAsB,UAASF,GAAT,EAAcN,GAAd,EAAmB;AACrC,QAAM;AAAES,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAA6BL,GAAG,CAACM,IAAvC;AACAZ,EAAAA,GAAG,CAACO,IAAJ,CAAS;AAACM,IAAAA,MAAM,EAAG,IAAV;AAAgBC,IAAAA,GAAG,EAAG;AAAtB,GAAT;AACH,CAHD;AAMAzB,GAAG,CAAC0B,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACnBd,EAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACH,CAFD",
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/",
      "sourcesContent": [
        "//npm init -y\n//npm install @babel/cli @babel/core @babel/node @babel/preset-env --save-dev\n//npm install express --save\n//npm run build && node ./build/server.jsclear\n//npm install cors --save\n//npm i mongoose (desde la carpeta back)\n//npm install jsonwebtoken bcryptjs --save (Instala los webtoken y bcrypt)\n//node require('crypto').randomBytes(32).toString('hex')\n\n\nconst express = require(\"express\");\nconst cors = require(\"cors\"); \nconst mongoose = require(\"mongoose\");\nconst Usuario = require(\"./modelos/usuarioModel\");\nconst Orden = require(\"./modelos/orden\");\nconst Puerto = require(\"./modelos/puerto\");\n\n\n// Se importan las rutas principales donde se almacenan las APIs respectivas\nconst { userRutas } = require(\"./rutas/userRutas\")\nconst { ordenesRutas } = require(\"./rutas/ordenesRutas\")\nconst { puertosRutas } = require(\"./rutas/puertosRutas\")\n\n        \nconst app = express();\napp.use(cors()); // Middleware CORS\napp.use(express.json()) // Middleware convertir json\napp.use(express.urlencoded({ extended: true })); // Codifica la informacion que viene por el cliente en la barra de busqueda del navegador\n\n\n// Distribucion de Rutas\nrequire(\"dotenv\").config();\n\n// APIs \napp.use(\"/user\", userRutas);\napp.use(\"/ordenes\", ordenesRutas);\napp.use(\"/puertos\", puertosRutas);\n\n\n// Se conecta la aplicaciÃ³n a Base de Datos\nmongoose.connect(process.env.MONGODB_SERVER_URL)\n.then(res => console.log(\"Conectado a base de datos\"))\n.catch(error => console.log(error));\n\n\napp.get(\"/\", function (req, res) {\n    res.send(\"Main route\")\n})\n\napp.post(\"/contacto\", function(req, res) {\n    const { nombre, email, mensaje } = req.body;\n    res.send({estado : \"ok\", msg : \"Gracias por su mensaje. Lo estaremos contactando pronto!\"});\n})\n\n\napp.listen(5000, () => {\n    console.log(\"Servidor escuchando en el puerto 5000\")\n})"
      ]
    },
    "sourceType": "module",
    "mtime": 1640027737207
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"filename\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/datos.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.0": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/datos.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/datos.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/datos.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/",
        "sourceFileName": "datos.js"
      }
    },
    "ast": null,
    "code": "/**\n * Method: GET \nRoute: /listarUsuario\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n\nBody Response:\n*/\nconst usuarios = [{\n  \"numero_documento\": \"24526698\",\n  \"nombre\": \"Pedro\",\n  \"apellido\": \"Lopez\",\n  \"perfil\": 2,\n  \"celular\": \"31098442945\",\n  \"email\": \"pedro.lopez@gmail.com\"\n}, {\n  \"numero_documento\": \"102234456\",\n  \"nombre\": \"Juan Carlos\",\n  \"apellido\": \"Gutierrez\",\n  \"perfil\": 2,\n  \"celular\": \"3208694311\",\n  \"email\": \"gutijc@gmail.com\"\n}, {\n  \"numero_documento\": \"13009884\",\n  \"nombre\": \"Maria\",\n  \"apellido\": \"Arenas\",\n  \"perfil\": 1,\n  \"celular\": \"3145566787\",\n  \"email\": \"marenas@gmail.com\"\n}, {\n  \"numero_documento\": \"108844532\",\n  \"nombre\": \"Dario\",\n  \"apellido\": \"Diaz\",\n  \"perfil\": 0,\n  \"celular\": \"3005782311\",\n  \"email\": \"dario.diaz@gmail.com\"\n}];\nexports.usuarios = usuarios;\n/*\n\nMethod: GET \nRoute: /listarPuerto\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n\nBody Response:\n*/\n\nconst puertos = [{\n  \"id_puerto\": 1,\n  \"nombre\": \"Puerto CarreÃ±o\"\n}, {\n  \"id_puerto\": 2,\n  \"nombre\": \"Puerto NariÃ±o\"\n}, {\n  \"id_puerto\": 3,\n  \"nombre\": \"Puerto Banqueta\"\n}, {\n  \"id_puerto\": 4,\n  \"nombre\": \"Puerto Cabuyo\"\n}, {\n  \"id_puerto\": 5,\n  \"nombre\": \"Puerto LÃ³pez\"\n}, {\n  \"id_puerto\": 6,\n  \"nombre\": \"Puerto Guaviare\"\n}, {\n  \"id_puerto\": 7,\n  \"nombre\": \"Puerto MitÃº\"\n}, {\n  \"id_puerto\": 8,\n  \"nombre\": \"Puerto YuruparÃ­\"\n}, {\n  \"id_puerto\": 9,\n  \"nombre\": \"Puerto PucarÃ³n\"\n}, {\n  \"id_puerto\": 10,\n  \"nombre\": \"Puerto Calamar\"\n}, {\n  \"id_puerto\": 11,\n  \"nombre\": \"Puerto InÃ­rida\"\n}, {\n  \"id_puerto\": 12,\n  \"nombre\": \"Puerto Tumaco\"\n}, {\n  \"id_puerto\": 13,\n  \"nombre\": \"Puerto Buenaventura\"\n}, {\n  \"id_puerto\": 14,\n  \"nombre\": \"Puerto Salgar\"\n}, {\n  \"id_puerto\": 15,\n  \"nombre\": \"Puerto Berrio\"\n}, {\n  \"id_puerto\": 16,\n  \"nombre\": \"Puerto Barrancabermeja\"\n}, {\n  \"id_puerto\": 17,\n  \"nombre\": \"Puerto Cartagena\"\n}, {\n  \"id_puerto\": 18,\n  \"nombre\": \"Puerto Santa Marta\"\n}, {\n  \"id_puerto\": 19,\n  \"nombre\": \"Puerto Barranquilla\"\n}, {\n  \"id_puerto\": 20,\n  \"nombre\": \"Puerto Gamarra\"\n}];\nexports.puertos = puertos;\n/*\nMethod: GET \nRoute: /listarOrdenDetalle/?id_orden=1002\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n\nBody Response:\n*/\n\nconst ordenDetalle = {\n  \"id_orden\": 0,\n  \"fecha_orden\": \"2021-10-13 10:21:44\",\n  \"nombre_contenedor\": \"FFA5893\",\n  \"descripciÃ³n_contenedor\": \"Telas\",\n  \"peso_contenedor\": \"22\",\n  \"ancho_contenedor\": \"2.43\",\n  \"alto_contenedor\": \"2.9\",\n  \"largo_contenedor\": \"12.2\",\n  \"puerto_origen\": \"Puerto Barranquilla\",\n  \"puerto_destino\": \"Puerto Berrio\",\n  \"estado_orden\": \"Finalizada\",\n  \"fecha_fin_orden\": \"2021-10-28 11:05:01\",\n  \"costo\": 1520000\n};\nexports.ordenDetalle = ordenDetalle;\n/*\nMethod: GET \nRoute: /verCostoMilla\nHeaders: \n\"Content-Type: application/json\"\n\n//Body Request:\n\n//Body Response:\n*/\n\nlet costo = {\n  \"valor\": 150\n};\nexports.costo = costo;\n/*\nMethod: GET \nRoute: /listarDistanciaPuerto/?origen=Puerto_CarreÃ±o&destino=Puerto_NariÃ±o\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n\nBody Response:\n*/\n\nconst distanciaPuertos = {\n  \"nombre_origen\": \"Puerto_CarreÃ±o\",\n  \"nombre_destino\": \"Puerto_NariÃ±o\",\n  \"distancia\": 120\n};\nexports.distanciaPuertos = distanciaPuertos;\n/*\nMethod: GET \nRoute: /listarOrden\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n\nBody Response:\n*/\n\nconst ordenes = [{\n  \"id_orden\": 1,\n  \"articulo\": \"Joyas\",\n  \"fecha_orden\": \"2021-10-12 14:30:25\",\n  \"nombre_contenedor\": \"SKO4477\",\n  \"puerto_origen\": \"Puerto CarreÃ±o\",\n  \"puerto_destino\": \"Puerto Cabuyo\",\n  \"estado_orden\": \"Finalizada\"\n}, {\n  \"id_orden\": 2,\n  \"articulo\": \"Prendas\",\n  \"fecha_orden\": \"2021-10-13 10:21:44\",\n  \"nombre_contenedor\": \"FFA5893\",\n  \"puerto_origen\": \"Puerto Barranquilla\",\n  \"puerto_destino\": \"Puerto Berrio\",\n  \"estado_orden\": \"Finalizada\"\n}, {\n  \"id_orden\": 3,\n  \"articulo\": \"Televisores\",\n  \"fecha_orden\": \"2021-11-30 17:44:30\",\n  \"nombre_contenedor\": \"MIC1322\",\n  \"puerto_origen\": \"Puerto Salgar\",\n  \"puerto_destino\": \"Puerto Tumaco\",\n  \"estado_orden\": \"Despachada\"\n}, {\n  \"id_orden\": 4,\n  \"fecha_orden\": \"2021-11-30 17:44:30\",\n  \"articulo\": \"Telas\",\n  \"alto\": 34,\n  \"ancho\": 56,\n  \"largo\": 32,\n  \"peso\": 20,\n  \"nombre_contenedor\": \"MIC1322\",\n  \"puerto_origen\": \"Puerto Santa Marta\",\n  \"puerto_destino\": \"Puerto Cartagena\",\n  \"descripcion\": \"Mercancia de telas\",\n  \"estado_orden\": \"preparando para Embarcar\"\n}];\nexports.ordenes = ordenes;\n/*\nMethod: POST \nRoute: /registrarUsuario\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n*/\n\nconst registroUsuario = {\n  \"numero_documento\": \"24526698\",\n  \"nombre\": \"Pedro\",\n  \"apellido\": \"Lopez\",\n  \"perfil\": 2,\n  \"celular\": \"31098442945\",\n  \"email\": \"pedro.lopez@gmail.com\",\n  \"password\": \"Pedro102030\"\n};\nexports.registroUsuario = registroUsuario; // Body Response:\n\nconst usuarioRegistrado = {\n  \"codigo\": \"200\",\n  \"descripcion\": \"Usuario registrado exitosamente\"\n};\nexports.usuarioRegistrado = usuarioRegistrado;\n/*\nMethod: POST \nRoute: /registrarPuerto\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n*/\n\nconst registroPuerto = {\n  \"nombre_puerto_origen\": \"Puerto_Virginia\",\n  \"nombre_puerto_destino\": \"Puerto_CarreÃ±o\",\n  \"distancia\": 1024\n};\nexports.registroPuerto = registroPuerto; // Body Response:\n\nconst puertoRegistrado = {\n  \"codigo\": \"200\",\n  \"descripcion\": \"Puerto registrado exitosamente\",\n  \"id_puerto\": 21\n};\nexports.puertoRegistrado = puertoRegistrado;\n/*\nMethod: POST \nRoute: /registrarOrden\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n*/\n\nconst registroOrden = [{\n  \"id_orden\": 0,\n  \"articulo\": \"Cargamento\",\n  \"largo\": 250,\n  \"ancho\": 150,\n  \"alto\": 150,\n  \"peso\": 300,\n  \"puertoOrigen\": \"Puerto A\",\n  \"PuertoDestino\": \"Puerto B\",\n  \"Descripcion\": \"Descripcion Cargamento\"\n}];\nexports.registroOrden = registroOrden; // Body Response:\n\nconst newOrden = {\n  \"orden\": \"200\",\n  \"mensaje\": \"Orden creada exitosamente\"\n};\nexports.newOrden = newOrden;\n/*\nMethod: POST \nRoute: /editarCostoMilla\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n*/\n\nconst costoMilla = {\n  \"valor\": 181000\n};\nexports.costoMilla = costoMilla; //Body Response:\n\nconst costoUpdate = {\n  \"codigo\": \"200\",\n  \"descripcion\": \"Valor milla actualizado exitosamente\"\n};\nexports.costoUpdate = costoUpdate;\n/*\nMethod: POST \nRoute: /editarOrden\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n*/\n\nconst editarOrden = {\n  \"id_orden\": 1004,\n  \"estado_orden\": \"Finalizada\"\n};\nexports.editarOrden = editarOrden; // Body Response:\n\nconst ordenUpdate = {\n  \"codigo\": \"200\",\n  \"descripcion\": \"Orden actualizada exitosamente\"\n};\nexports.ordenUpdate = ordenUpdate;\n/*\nMethod: POST \nRoute: /login\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n*/\n\nconst login = {\n  \"usuario\": 24526698,\n  \"password\": \"Pablo102030\"\n};\nexports.login = login; // Body Response:\n\nconst loginUpdate = {\n  \"codigo\": \"200\",\n  \"descripcion\": \"credenciales exitosas\"\n};\nexports.loginUpdate = loginUpdate;\n/*\nMethod: GET \nRoute: /listarOrden/?estado=Finalizada\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n\nBody Response:\n*/\n\nconst estados = [{\n  \"id_orden\": 1001,\n  \"fecha_orden\": \"2021-10-12 14:30:25\",\n  \"nombre_contenedor\": \"SKO4477\",\n  \"puerto_origen\": \"Puerto CarreÃ±o\",\n  \"puerto_destino\": \"Puerto Cabuyo\",\n  \"estado_orden\": \"Finalizada\"\n}, {\n  \"id_orden\": 1002,\n  \"fecha_orden\": \"2021-10-13 10:21:44\",\n  \"nombre_contenedor\": \"FFA5893\",\n  \"puerto_origen\": \"Puerto Barranquilla\",\n  \"puerto_destino\": \"Puerto Berrio\",\n  \"estado_orden\": \"Finalizada\"\n}];\nexports.estados = estados;\n/*\nMethod: GET \nRoute: /listarPuertoDistancia\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n\nBody Response:\n*/\n\nconst distancias = [{\n  \"id_puerto\": 1,\n  \"nombre\": \"Puerto CarreÃ±o\",\n  \"distancia\": 220\n}, {\n  \"id_puerto\": 2,\n  \"nombre\": \"Puerto NariÃ±o\",\n  \"distancia\": 300\n}, {\n  \"id_puerto\": 3,\n  \"nombre\": \"Puerto Banqueta\",\n  \"distancia\": 270\n}, {\n  \"id_puerto\": 4,\n  \"nombre\": \"Puerto Cabuyo\",\n  \"distancia\": 140\n}, {\n  \"id_puerto\": 5,\n  \"nombre\": \"Puerto LÃ³pez\",\n  \"distancia\": 200\n}, {\n  \"id_puerto\": 6,\n  \"nombre\": \"Puerto Guaviare\",\n  \"distancia\": 100\n}, {\n  \"id_puerto\": 7,\n  \"nombre\": \"Puerto MitÃº\",\n  \"distancia\": 150\n}, {\n  \"id_puerto\": 8,\n  \"nombre\": \"Puerto YuruparÃ­\",\n  \"distancia\": 180\n}, {\n  \"id_puerto\": 9,\n  \"nombre\": \"Puerto PucarÃ³n\",\n  \"distancia\": 220\n}, {\n  \"id_puerto\": 10,\n  \"nombre\": \"Puerto Calamar\",\n  \"distancia\": 190\n}, {\n  \"id_puerto\": 11,\n  \"nombre\": \"Puerto InÃ­rida\",\n  \"distancia\": 170\n}, {\n  \"id_puerto\": 12,\n  \"nombre\": \"Puerto Tumaco\",\n  \"distancia\": 80\n}, {\n  \"id_puerto\": 13,\n  \"nombre\": \"Puerto Buenaventura\",\n  \"distancia\": 230\n}, {\n  \"id_puerto\": 14,\n  \"nombre\": \"Puerto Salgar\",\n  \"distancia\": 110\n}, {\n  \"id_puerto\": 15,\n  \"nombre\": \"Puerto Berrio\",\n  \"distancia\": 180\n}, {\n  \"id_puerto\": 16,\n  \"nombre\": \"Puerto Barrancabermeja\",\n  \"distancia\": 240\n}, {\n  \"id_puerto\": 17,\n  \"nombre\": \"Puerto Cartagena\",\n  \"distancia\": 90\n}, {\n  \"id_puerto\": 18,\n  \"nombre\": \"Puerto Santa Marta\",\n  \"distancia\": 150\n}, {\n  \"id_puerto\": 19,\n  \"nombre\": \"Puerto Barranquilla\",\n  \"distancia\": 100\n}, {\n  \"id_puerto\": 20,\n  \"nombre\": \"Puerto Gamarra\",\n  \"distancia\": 190\n}];\nexports.distancias = distancias;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "datos.js"
      ],
      "names": [
        "usuarios",
        "exports",
        "puertos",
        "ordenDetalle",
        "costo",
        "distanciaPuertos",
        "ordenes",
        "registroUsuario",
        "usuarioRegistrado",
        "registroPuerto",
        "puertoRegistrado",
        "registroOrden",
        "newOrden",
        "costoMilla",
        "costoUpdate",
        "editarOrden",
        "ordenUpdate",
        "login",
        "loginUpdate",
        "estados",
        "distancias"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/",
      "sourcesContent": [
        "/**\n * Method: GET \nRoute: /listarUsuario\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n\nBody Response:\n*/\n\nconst usuarios = [\n   {\n      \"numero_documento\":\"24526698\",\n      \"nombre\":\"Pedro\",\n      \"apellido\":\"Lopez\",\n      \"perfil\":2,\n      \"celular\":\"31098442945\",\n      \"email\":\"pedro.lopez@gmail.com\"\n   },\n   {\n      \"numero_documento\":\"102234456\",\n      \"nombre\":\"Juan Carlos\",\n      \"apellido\":\"Gutierrez\",\n      \"perfil\":2,\n      \"celular\":\"3208694311\",\n      \"email\":\"gutijc@gmail.com\"\n   },\n   {\n      \"numero_documento\":\"13009884\",\n      \"nombre\":\"Maria\",\n      \"apellido\":\"Arenas\",\n      \"perfil\":1,\n      \"celular\":\"3145566787\",\n      \"email\":\"marenas@gmail.com\"\n   },\n   {\n      \"numero_documento\":\"108844532\",\n      \"nombre\":\"Dario\",\n      \"apellido\":\"Diaz\",\n      \"perfil\":0,\n      \"celular\":\"3005782311\",\n      \"email\":\"dario.diaz@gmail.com\"\n   }\n]\n\nexports.usuarios = usuarios;\n\n/*\n\nMethod: GET \nRoute: /listarPuerto\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n\nBody Response:\n*/\n\nconst puertos = [\n   {\n      \"id_puerto\":1,\n      \"nombre\":\"Puerto CarreÃ±o\"\n   },\n   {\n      \"id_puerto\":2,\n      \"nombre\":\"Puerto NariÃ±o\"\n   },\n   {\n      \"id_puerto\":3,\n      \"nombre\":\"Puerto Banqueta\"\n   },\n   {\n      \"id_puerto\":4,\n      \"nombre\":\"Puerto Cabuyo\"\n   }\n   ,\n   {\n      \"id_puerto\":5,\n      \"nombre\":\"Puerto LÃ³pez\"\n   }\n   ,\n   {\n      \"id_puerto\":6,\n      \"nombre\":\"Puerto Guaviare\"\n   }\n   ,\n   {\n      \"id_puerto\":7,\n      \"nombre\":\"Puerto MitÃº\"\n   }\n   ,\n   {\n      \"id_puerto\":8,\n      \"nombre\":\"Puerto YuruparÃ­\"\n   }\n   ,\n   {\n      \"id_puerto\":9,\n      \"nombre\":\"Puerto PucarÃ³n\"\n   }\n   ,\n   {\n      \"id_puerto\":10,\n      \"nombre\":\"Puerto Calamar\"\n   }\n   ,\n   {\n      \"id_puerto\":11,\n      \"nombre\":\"Puerto InÃ­rida\"\n   }\n   ,\n   {\n      \"id_puerto\":12,\n      \"nombre\":\"Puerto Tumaco\"\n   }\n   ,\n   {\n      \"id_puerto\":13,\n      \"nombre\":\"Puerto Buenaventura\"\n   }\n   ,\n   {\n      \"id_puerto\":14,\n      \"nombre\":\"Puerto Salgar\"\n   }\n   ,\n   {\n      \"id_puerto\":15,\n      \"nombre\":\"Puerto Berrio\"\n   }\n   ,\n   {\n      \"id_puerto\":16,\n      \"nombre\":\"Puerto Barrancabermeja\"\n   }\n   ,\n   {\n      \"id_puerto\":17,\n      \"nombre\":\"Puerto Cartagena\"\n   }\n   ,\n   {\n      \"id_puerto\":18,\n      \"nombre\":\"Puerto Santa Marta\"\n   }\n   ,\n   {\n      \"id_puerto\":19,\n      \"nombre\":\"Puerto Barranquilla\"\n   }\n   ,\n   {\n      \"id_puerto\":20,\n      \"nombre\":\"Puerto Gamarra\"\n   }\n]\n\nexports.puertos = puertos;\n\n/*\nMethod: GET \nRoute: /listarOrdenDetalle/?id_orden=1002\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n\nBody Response:\n*/\n\nconst ordenDetalle = {\n  \"id_orden\": 0,\n  \"fecha_orden\":\"2021-10-13 10:21:44\",\n  \"nombre_contenedor\":\"FFA5893\",\n  \"descripciÃ³n_contenedor\":\"Telas\",\t  \n  \"peso_contenedor\":\"22\",\n  \"ancho_contenedor\":\"2.43\",\n  \"alto_contenedor\":\"2.9\",\n  \"largo_contenedor\":\"12.2\",\n  \"puerto_origen\":\"Puerto Barranquilla\",\n  \"puerto_destino\":\"Puerto Berrio\",\n  \"estado_orden\":\"Finalizada\",\n  \"fecha_fin_orden\":\"2021-10-28 11:05:01\",\n  \"costo\": 1520000\n}\n\nexports.ordenDetalle = ordenDetalle;\n\n/*\nMethod: GET \nRoute: /verCostoMilla\nHeaders: \n\"Content-Type: application/json\"\n\n//Body Request:\n\n//Body Response:\n*/\n\nlet costo = {\n    \"valor\": 150\n};\nexports.costo = costo;\n\n\n/*\nMethod: GET \nRoute: /listarDistanciaPuerto/?origen=Puerto_CarreÃ±o&destino=Puerto_NariÃ±o\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n\nBody Response:\n*/\nconst distanciaPuertos = {\n  \"nombre_origen\":\"Puerto_CarreÃ±o\",\n  \"nombre_destino\":\"Puerto_NariÃ±o\",\n  \"distancia\":120\n}\n\nexports.distanciaPuertos = distanciaPuertos;\n\n/*\nMethod: GET \nRoute: /listarOrden\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n\nBody Response:\n*/\n\nconst ordenes = [\n   {\n      \"id_orden\":1,\n      \"articulo\":\"Joyas\",\n\t  \"fecha_orden\":\"2021-10-12 14:30:25\",\n\t  \"nombre_contenedor\":\"SKO4477\",\n      \"puerto_origen\":\"Puerto CarreÃ±o\",\n\t  \"puerto_destino\":\"Puerto Cabuyo\",\n\t  \"estado_orden\":\"Finalizada\"\n   },\n   {\n      \"id_orden\":2,\n      \"articulo\":\"Prendas\",\n\t  \"fecha_orden\":\"2021-10-13 10:21:44\",\n\t  \"nombre_contenedor\":\"FFA5893\",\n      \"puerto_origen\":\"Puerto Barranquilla\",\n\t  \"puerto_destino\":\"Puerto Berrio\",\n\t  \"estado_orden\":\"Finalizada\"\n   },\n   {\n      \"id_orden\":3,\n      \"articulo\":\"Televisores\",\n\t  \"fecha_orden\":\"2021-11-30 17:44:30\",\n\t  \"nombre_contenedor\":\"MIC1322\",\n      \"puerto_origen\":\"Puerto Salgar\",\n\t  \"puerto_destino\":\"Puerto Tumaco\",\n\t  \"estado_orden\":\"Despachada\"\n   },\n   {\n      \"id_orden\":4,\n\t  \"fecha_orden\":\"2021-11-30 17:44:30\",\n     \"articulo\":\"Telas\",\n     \"alto\":34,\n     \"ancho\":56,\n     \"largo\":32,\n     \"peso\":20,\n\t  \"nombre_contenedor\":\"MIC1322\",\n      \"puerto_origen\":\"Puerto Santa Marta\",\n\t  \"puerto_destino\":\"Puerto Cartagena\",\n     \"descripcion\":\"Mercancia de telas\",\n\t  \"estado_orden\":\"preparando para Embarcar\"\n   }\n]\n\nexports.ordenes = ordenes;\n\n/*\nMethod: POST \nRoute: /registrarUsuario\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n*/\n\nconst registroUsuario = {\n  \"numero_documento\":\"24526698\",\n  \"nombre\":\"Pedro\",\n  \"apellido\":\"Lopez\",\n  \"perfil\":2,\n  \"celular\":\"31098442945\",\n  \"email\":\"pedro.lopez@gmail.com\",\n  \"password\":\"Pedro102030\"\n}\n\nexports.registroUsuario = registroUsuario;\n\n// Body Response:\n\nconst usuarioRegistrado = {\n  \"codigo\": \"200\",\n  \"descripcion\": \"Usuario registrado exitosamente\"\n}\n\nexports.usuarioRegistrado = usuarioRegistrado;\n\n/*\nMethod: POST \nRoute: /registrarPuerto\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n*/\n\nconst registroPuerto = {\n\t  \"nombre_puerto_origen\":\"Puerto_Virginia\",\n\t  \"nombre_puerto_destino\":\"Puerto_CarreÃ±o\",\n\t  \"distancia\": 1024\n}\n\nexports.registroPuerto = registroPuerto;\n\n// Body Response:\n\nconst puertoRegistrado = {\n  \"codigo\": \"200\",\n  \"descripcion\": \"Puerto registrado exitosamente\",\n  \"id_puerto\":21,\n}\n\nexports.puertoRegistrado = puertoRegistrado;\n\n\n/*\nMethod: POST \nRoute: /registrarOrden\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n*/\n\nconst registroOrden = [{\n   \"id_orden\":0,\n   \"articulo\":\"Cargamento\",\n   \"largo\":250,\n   \"ancho\":150,\n   \"alto\": 150,\n   \"peso\":300,\n   \"puertoOrigen\":\"Puerto A\",\n   \"PuertoDestino\":\"Puerto B\",\n   \"Descripcion\":\"Descripcion Cargamento\"\n}]\n\nexports.registroOrden = registroOrden;\n\n// Body Response:\n\nconst newOrden = {\n    \"orden\": \"200\",\n    \"mensaje\": \"Orden creada exitosamente\"\n}\n\nexports.newOrden = newOrden;\n\n\n\n/*\nMethod: POST \nRoute: /editarCostoMilla\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n*/\n\nconst costoMilla = {\n\t  \"valor\": 181000\n}\n\nexports.costoMilla = costoMilla;\n\n//Body Response:\n\nconst costoUpdate = {\n  \"codigo\": \"200\",\n  \"descripcion\": \"Valor milla actualizado exitosamente\"\n}\n\nexports.costoUpdate = costoUpdate;\n\n/*\nMethod: POST \nRoute: /editarOrden\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n*/\n\nconst editarOrden = {\n\t  \"id_orden\": 1004,\n\t  \"estado_orden\": \"Finalizada\"\n}\n\nexports.editarOrden = editarOrden;\n\n// Body Response:\n\nconst ordenUpdate = {\n  \"codigo\": \"200\",\n  \"descripcion\": \"Orden actualizada exitosamente\"\n}\n\nexports.ordenUpdate = ordenUpdate;\n\n/*\nMethod: POST \nRoute: /login\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n*/\n\nconst login = {\n    \"usuario\": 24526698,\n    \"password\": \"Pablo102030\"\n}\n\nexports.login = login;\n\n// Body Response:\n\nconst loginUpdate = {\n  \"codigo\": \"200\",\n  \"descripcion\": \"credenciales exitosas\"\n}\n\nexports.loginUpdate = loginUpdate\n\n/*\nMethod: GET \nRoute: /listarOrden/?estado=Finalizada\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n\nBody Response:\n*/\nconst estados = [\n   {\n      \"id_orden\":1001,\n\t  \"fecha_orden\":\"2021-10-12 14:30:25\",\n\t  \"nombre_contenedor\":\"SKO4477\",\n      \"puerto_origen\":\"Puerto CarreÃ±o\",\n\t  \"puerto_destino\":\"Puerto Cabuyo\",\n\t  \"estado_orden\":\"Finalizada\"\n   },\n   {\n      \"id_orden\":1002,\n\t  \"fecha_orden\":\"2021-10-13 10:21:44\",\n\t  \"nombre_contenedor\":\"FFA5893\",\n      \"puerto_origen\":\"Puerto Barranquilla\",\n\t  \"puerto_destino\":\"Puerto Berrio\",\n\t  \"estado_orden\":\"Finalizada\"\n   },\n]\n\nexports.estados = estados;\n\n/*\nMethod: GET \nRoute: /listarPuertoDistancia\nHeaders: \n\"Content-Type: application/json\"\n\nBody Request:\n\nBody Response:\n*/\n\nconst distancias = [\n   {\n      \"id_puerto\":1,\n      \"nombre\":\"Puerto CarreÃ±o\",\n      \"distancia\":220\n   },\n   {\n      \"id_puerto\":2,\n      \"nombre\":\"Puerto NariÃ±o\",\n      \"distancia\":300\n   },\n   {\n      \"id_puerto\":3,\n      \"nombre\":\"Puerto Banqueta\",\n      \"distancia\":270\n   },\n   {\n      \"id_puerto\":4,\n      \"nombre\":\"Puerto Cabuyo\",\n      \"distancia\":140\n   }\n   ,\n   {\n      \"id_puerto\":5,\n      \"nombre\":\"Puerto LÃ³pez\",\n      \"distancia\":200\n   }\n   ,\n   {\n      \"id_puerto\":6,\n      \"nombre\":\"Puerto Guaviare\",\n      \"distancia\":100\n   }\n   ,\n   {\n      \"id_puerto\":7,\n      \"nombre\":\"Puerto MitÃº\",\n      \"distancia\":150\n   }\n   ,\n   {\n      \"id_puerto\":8,\n      \"nombre\":\"Puerto YuruparÃ­\",\n      \"distancia\":180\n   }\n   ,\n   {\n      \"id_puerto\":9,\n      \"nombre\":\"Puerto PucarÃ³n\",\n      \"distancia\":220\n   }\n   ,\n   {\n      \"id_puerto\":10,\n      \"nombre\":\"Puerto Calamar\",\n      \"distancia\":190\n   }\n   ,\n   {\n      \"id_puerto\":11,\n      \"nombre\":\"Puerto InÃ­rida\",\n      \"distancia\":170\n   }\n   ,\n   {\n      \"id_puerto\":12,\n      \"nombre\":\"Puerto Tumaco\",\n      \"distancia\":80\n   }\n   ,\n   {\n      \"id_puerto\":13,\n      \"nombre\":\"Puerto Buenaventura\",\n      \"distancia\":230\n   }\n   ,\n   {\n      \"id_puerto\":14,\n      \"nombre\":\"Puerto Salgar\",\n      \"distancia\":110\n   }\n   ,\n   {\n      \"id_puerto\":15,\n      \"nombre\":\"Puerto Berrio\",\n      \"distancia\":180\n   }\n   ,\n   {\n      \"id_puerto\":16,\n      \"nombre\":\"Puerto Barrancabermeja\",\n      \"distancia\":240\n   }\n   ,\n   {\n      \"id_puerto\":17,\n      \"nombre\":\"Puerto Cartagena\",\n      \"distancia\":90\n   }\n   ,\n   {\n      \"id_puerto\":18,\n      \"nombre\":\"Puerto Santa Marta\",\n      \"distancia\":150\n   }\n   ,\n   {\n      \"id_puerto\":19,\n      \"nombre\":\"Puerto Barranquilla\",\n      \"distancia\":100\n   }\n   ,\n   {\n      \"id_puerto\":20,\n      \"nombre\":\"Puerto Gamarra\",\n      \"distancia\":190\n   }\n]\n\nexports.distancias = distancias;"
      ]
    },
    "sourceType": "module",
    "mtime": 1639857225632
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"filename\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/usuarioModel.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.0": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/usuarioModel.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/usuarioModel.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/usuarioModel.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/",
        "sourceFileName": "usuarioModel.js"
      }
    },
    "ast": null,
    "code": "const {\n  genSalt,\n  hash\n} = require(\"bcryptjs\");\n\nconst {\n  model,\n  Schema\n} = require(\"mongoose\");\n\nconst usuarioSchema = new Schema({\n  nombre: {\n    type: \"string\",\n    required: true\n  },\n  apellido: {\n    type: \"string\",\n    required: true\n  },\n  email: {\n    type: \"string\"\n  },\n  telefono: {\n    type: \"number\",\n    required: true\n  },\n  tipo_documento: {\n    type: \"string\",\n    required: true\n  },\n  documento: {\n    type: \"string\",\n    unique: true,\n    required: true\n  },\n  password: {\n    type: \"string\",\n    required: true\n  },\n  perfil: {\n    type: \"string\",\n    required: true\n  }\n});\nusuarioSchema.pre(\"save\", async function (next) {\n  const salt = await genSalt(10);\n  this.password = await hash(this.password, salt);\n  next();\n});\nconst usuarioModel = model(\"usuarios\", usuarioSchema);\nexports.usuarioModel = usuarioModel;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzdWFyaW9Nb2RlbC5qcyJdLCJuYW1lcyI6WyJnZW5TYWx0IiwiaGFzaCIsInJlcXVpcmUiLCJtb2RlbCIsIlNjaGVtYSIsInVzdWFyaW9TY2hlbWEiLCJub21icmUiLCJ0eXBlIiwicmVxdWlyZWQiLCJhcGVsbGlkbyIsImVtYWlsIiwidGVsZWZvbm8iLCJ0aXBvX2RvY3VtZW50byIsImRvY3VtZW50byIsInVuaXF1ZSIsInBhc3N3b3JkIiwicGVyZmlsIiwicHJlIiwibmV4dCIsInNhbHQiLCJ1c3VhcmlvTW9kZWwiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0FBQUVBLEVBQUFBLE9BQUY7QUFBV0MsRUFBQUE7QUFBWCxJQUFvQkMsT0FBTyxDQUFDLFVBQUQsQ0FBakM7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQSxLQUFGO0FBQVNDLEVBQUFBO0FBQVQsSUFBb0JGLE9BQU8sQ0FBQyxVQUFELENBQWpDOztBQUVBLE1BQU1HLGFBQWEsR0FBRyxJQUFJRCxNQUFKLENBQ2xCO0FBQ0lFLEVBQUFBLE1BQU0sRUFBQztBQUNIQyxJQUFBQSxJQUFJLEVBQUUsUUFESDtBQUVIQyxJQUFBQSxRQUFRLEVBQUM7QUFGTixHQURYO0FBS0lDLEVBQUFBLFFBQVEsRUFBQztBQUNMRixJQUFBQSxJQUFJLEVBQUUsUUFERDtBQUVMQyxJQUFBQSxRQUFRLEVBQUM7QUFGSixHQUxiO0FBU0lFLEVBQUFBLEtBQUssRUFBQztBQUNGSCxJQUFBQSxJQUFJLEVBQUU7QUFESixHQVRWO0FBWUlJLEVBQUFBLFFBQVEsRUFBQztBQUNMSixJQUFBQSxJQUFJLEVBQUUsUUFERDtBQUVMQyxJQUFBQSxRQUFRLEVBQUM7QUFGSixHQVpiO0FBZ0JJSSxFQUFBQSxjQUFjLEVBQUM7QUFDWEwsSUFBQUEsSUFBSSxFQUFFLFFBREs7QUFFWEMsSUFBQUEsUUFBUSxFQUFDO0FBRkUsR0FoQm5CO0FBb0JJSyxFQUFBQSxTQUFTLEVBQUM7QUFDTk4sSUFBQUEsSUFBSSxFQUFFLFFBREE7QUFFTk8sSUFBQUEsTUFBTSxFQUFFLElBRkY7QUFHTk4sSUFBQUEsUUFBUSxFQUFDO0FBSEgsR0FwQmQ7QUF5QklPLEVBQUFBLFFBQVEsRUFBQztBQUNMUixJQUFBQSxJQUFJLEVBQUUsUUFERDtBQUVMQyxJQUFBQSxRQUFRLEVBQUM7QUFGSixHQXpCYjtBQTZCSVEsRUFBQUEsTUFBTSxFQUFDO0FBQ0hULElBQUFBLElBQUksRUFBRSxRQURIO0FBRUhDLElBQUFBLFFBQVEsRUFBQztBQUZOO0FBN0JYLENBRGtCLENBQXRCO0FBcUNBSCxhQUFhLENBQUNZLEdBQWQsQ0FBa0IsTUFBbEIsRUFBMEIsZ0JBQWdCQyxJQUFoQixFQUFzQjtBQUM1QyxRQUFNQyxJQUFJLEdBQUcsTUFBTW5CLE9BQU8sQ0FBQyxFQUFELENBQTFCO0FBQ0EsT0FBS2UsUUFBTCxHQUFnQixNQUFNZCxJQUFJLENBQUMsS0FBS2MsUUFBTixFQUFnQkksSUFBaEIsQ0FBMUI7QUFDQUQsRUFBQUEsSUFBSTtBQUNQLENBSkQ7QUFNQSxNQUFNRSxZQUFZLEdBQUdqQixLQUFLLENBQUMsVUFBRCxFQUFhRSxhQUFiLENBQTFCO0FBRUFnQixPQUFPLENBQUNELFlBQVIsR0FBdUJBLFlBQXZCIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9tYXJpb2dvbWV6L0RvY3VtZW50cy9HaXRIdWIvQmFja0VuZFBsYXRhZm9ybWFUcmFuc3BvcnRlRmx1dmlhbC9zcmMvbW9kZWxvcy8iLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGdlblNhbHQsIGhhc2ggfSA9IHJlcXVpcmUoXCJiY3J5cHRqc1wiKTtcclxuY29uc3QgeyBtb2RlbCwgU2NoZW1hIH0gPSByZXF1aXJlKFwibW9uZ29vc2VcIik7XHJcblxyXG5jb25zdCB1c3VhcmlvU2NoZW1hID0gbmV3IFNjaGVtYShcclxuICAgIHtcclxuICAgICAgICBub21icmU6e1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICByZXF1aXJlZDp0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhcGVsbGlkbzp7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOnRydWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVtYWlsOntcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGVsZWZvbm86e1xyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiLFxyXG4gICAgICAgICAgICByZXF1aXJlZDp0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0aXBvX2RvY3VtZW50bzp7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOnRydWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRvY3VtZW50bzp7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgICAgICAgIHVuaXF1ZTogdHJ1ZSxcclxuICAgICAgICAgICAgcmVxdWlyZWQ6dHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGFzc3dvcmQ6e1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICByZXF1aXJlZDp0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwZXJmaWw6e1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICByZXF1aXJlZDp0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4pO1xyXG5cclxudXN1YXJpb1NjaGVtYS5wcmUoXCJzYXZlXCIsIGFzeW5jIGZ1bmN0aW9uIChuZXh0KSB7XHJcbiAgICBjb25zdCBzYWx0ID0gYXdhaXQgZ2VuU2FsdCgxMCk7XHJcbiAgICB0aGlzLnBhc3N3b3JkID0gYXdhaXQgaGFzaCh0aGlzLnBhc3N3b3JkLCBzYWx0KTtcclxuICAgIG5leHQoKTtcclxufSk7XHJcblxyXG5jb25zdCB1c3VhcmlvTW9kZWwgPSBtb2RlbChcInVzdWFyaW9zXCIsIHVzdWFyaW9TY2hlbWEpO1xyXG5cclxuZXhwb3J0cy51c3VhcmlvTW9kZWwgPSB1c3VhcmlvTW9kZWw7Il19",
    "map": {
      "version": 3,
      "sources": [
        "usuarioModel.js"
      ],
      "names": [
        "genSalt",
        "hash",
        "require",
        "model",
        "Schema",
        "usuarioSchema",
        "nombre",
        "type",
        "required",
        "apellido",
        "email",
        "telefono",
        "tipo_documento",
        "documento",
        "unique",
        "password",
        "perfil",
        "pre",
        "next",
        "salt",
        "usuarioModel",
        "exports"
      ],
      "mappings": "AAAA,MAAM;AAAEA,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAoBC,OAAO,CAAC,UAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAAoBF,OAAO,CAAC,UAAD,CAAjC;;AAEA,MAAMG,aAAa,GAAG,IAAID,MAAJ,CAClB;AACIE,EAAAA,MAAM,EAAC;AACHC,IAAAA,IAAI,EAAE,QADH;AAEHC,IAAAA,QAAQ,EAAC;AAFN,GADX;AAKIC,EAAAA,QAAQ,EAAC;AACLF,IAAAA,IAAI,EAAE,QADD;AAELC,IAAAA,QAAQ,EAAC;AAFJ,GALb;AASIE,EAAAA,KAAK,EAAC;AACFH,IAAAA,IAAI,EAAE;AADJ,GATV;AAYII,EAAAA,QAAQ,EAAC;AACLJ,IAAAA,IAAI,EAAE,QADD;AAELC,IAAAA,QAAQ,EAAC;AAFJ,GAZb;AAgBII,EAAAA,cAAc,EAAC;AACXL,IAAAA,IAAI,EAAE,QADK;AAEXC,IAAAA,QAAQ,EAAC;AAFE,GAhBnB;AAoBIK,EAAAA,SAAS,EAAC;AACNN,IAAAA,IAAI,EAAE,QADA;AAENO,IAAAA,MAAM,EAAE,IAFF;AAGNN,IAAAA,QAAQ,EAAC;AAHH,GApBd;AAyBIO,EAAAA,QAAQ,EAAC;AACLR,IAAAA,IAAI,EAAE,QADD;AAELC,IAAAA,QAAQ,EAAC;AAFJ,GAzBb;AA6BIQ,EAAAA,MAAM,EAAC;AACHT,IAAAA,IAAI,EAAE,QADH;AAEHC,IAAAA,QAAQ,EAAC;AAFN;AA7BX,CADkB,CAAtB;AAqCAH,aAAa,CAACY,GAAd,CAAkB,MAAlB,EAA0B,gBAAgBC,IAAhB,EAAsB;AAC5C,QAAMC,IAAI,GAAG,MAAMnB,OAAO,CAAC,EAAD,CAA1B;AACA,OAAKe,QAAL,GAAgB,MAAMd,IAAI,CAAC,KAAKc,QAAN,EAAgBI,IAAhB,CAA1B;AACAD,EAAAA,IAAI;AACP,CAJD;AAMA,MAAME,YAAY,GAAGjB,KAAK,CAAC,UAAD,EAAaE,aAAb,CAA1B;AAEAgB,OAAO,CAACD,YAAR,GAAuBA,YAAvB",
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/",
      "sourcesContent": [
        "const { genSalt, hash } = require(\"bcryptjs\");\r\nconst { model, Schema } = require(\"mongoose\");\r\n\r\nconst usuarioSchema = new Schema(\r\n    {\r\n        nombre:{\r\n            type: \"string\",\r\n            required:true\r\n        },\r\n        apellido:{\r\n            type: \"string\",\r\n            required:true\r\n        },\r\n        email:{\r\n            type: \"string\"\r\n        },\r\n        telefono:{\r\n            type: \"number\",\r\n            required:true\r\n        },\r\n        tipo_documento:{\r\n            type: \"string\",\r\n            required:true\r\n        },\r\n        documento:{\r\n            type: \"string\",\r\n            unique: true,\r\n            required:true\r\n        },\r\n        password:{\r\n            type: \"string\",\r\n            required:true\r\n        },\r\n        perfil:{\r\n            type: \"string\",\r\n            required:true\r\n        }\r\n    }\r\n);\r\n\r\nusuarioSchema.pre(\"save\", async function (next) {\r\n    const salt = await genSalt(10);\r\n    this.password = await hash(this.password, salt);\r\n    next();\r\n});\r\n\r\nconst usuarioModel = model(\"usuarios\", usuarioSchema);\r\n\r\nexports.usuarioModel = usuarioModel;"
      ]
    },
    "sourceType": "module",
    "mtime": 1639789929830
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"filename\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/orden.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.0": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/orden.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/orden.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/orden.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/",
        "sourceFileName": "orden.js"
      }
    },
    "ast": null,
    "code": "const {\n  model,\n  Schema\n} = require(\"mongoose\");\n\nconst ordenSchema = new Schema({\n  order_id: {\n    type: \"number\",\n    required: true\n  },\n  fecha_origen_orden: {\n    type: \"string\",\n    required: true\n  },\n  nombre_contenedor: {\n    type: \"string\",\n    required: true\n  },\n  descripcion_contenedor: {\n    type: \"string\",\n    required: true\n  },\n  peso_contenedor: {\n    type: \"number\",\n    required: true\n  },\n  ancho_contenedor: {\n    type: \"number\",\n    required: true\n  },\n  alto_contenedor: {\n    type: \"number\",\n    required: true\n  },\n  largo_contenedor: {\n    type: \"number\",\n    required: true\n  },\n  puerto_origen: {\n    type: \"string\",\n    required: true\n  },\n  puerto_destino: {\n    type: \"string\",\n    required: true\n  },\n  estado_orden: {\n    type: \"string\"\n  },\n  fecha_fin_orden: {\n    type: \"date\"\n  },\n  costo: {\n    type: \"string\",\n    required: true\n  },\n  usuario: {\n    type: \"string\",\n    required: true\n  }\n});\nconst ordenModel = model(\"ordenes\", ordenSchema);\nexports.ordenModel = ordenModel;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yZGVuLmpzIl0sIm5hbWVzIjpbIm1vZGVsIiwiU2NoZW1hIiwicmVxdWlyZSIsIm9yZGVuU2NoZW1hIiwib3JkZXJfaWQiLCJ0eXBlIiwicmVxdWlyZWQiLCJmZWNoYV9vcmlnZW5fb3JkZW4iLCJub21icmVfY29udGVuZWRvciIsImRlc2NyaXBjaW9uX2NvbnRlbmVkb3IiLCJwZXNvX2NvbnRlbmVkb3IiLCJhbmNob19jb250ZW5lZG9yIiwiYWx0b19jb250ZW5lZG9yIiwibGFyZ29fY29udGVuZWRvciIsInB1ZXJ0b19vcmlnZW4iLCJwdWVydG9fZGVzdGlubyIsImVzdGFkb19vcmRlbiIsImZlY2hhX2Zpbl9vcmRlbiIsImNvc3RvIiwidXN1YXJpbyIsIm9yZGVuTW9kZWwiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0FBQUVBLEVBQUFBLEtBQUY7QUFBU0MsRUFBQUE7QUFBVCxJQUFvQkMsT0FBTyxDQUFDLFVBQUQsQ0FBakM7O0FBR0EsTUFBTUMsV0FBVyxHQUFHLElBQUlGLE1BQUosQ0FDaEI7QUFDSUcsRUFBQUEsUUFBUSxFQUFDO0FBQ0xDLElBQUFBLElBQUksRUFBQyxRQURBO0FBRUxDLElBQUFBLFFBQVEsRUFBQztBQUZKLEdBRGI7QUFLSUMsRUFBQUEsa0JBQWtCLEVBQUM7QUFDZkYsSUFBQUEsSUFBSSxFQUFFLFFBRFM7QUFFZkMsSUFBQUEsUUFBUSxFQUFDO0FBRk0sR0FMdkI7QUFTSUUsRUFBQUEsaUJBQWlCLEVBQUM7QUFDZEgsSUFBQUEsSUFBSSxFQUFFLFFBRFE7QUFFZEMsSUFBQUEsUUFBUSxFQUFDO0FBRkssR0FUdEI7QUFhSUcsRUFBQUEsc0JBQXNCLEVBQUM7QUFDbkJKLElBQUFBLElBQUksRUFBRSxRQURhO0FBRW5CQyxJQUFBQSxRQUFRLEVBQUM7QUFGVSxHQWIzQjtBQWlCSUksRUFBQUEsZUFBZSxFQUFDO0FBQ1pMLElBQUFBLElBQUksRUFBRSxRQURNO0FBRVpDLElBQUFBLFFBQVEsRUFBQztBQUZHLEdBakJwQjtBQXFCSUssRUFBQUEsZ0JBQWdCLEVBQUM7QUFDYk4sSUFBQUEsSUFBSSxFQUFFLFFBRE87QUFFYkMsSUFBQUEsUUFBUSxFQUFDO0FBRkksR0FyQnJCO0FBeUJJTSxFQUFBQSxlQUFlLEVBQUM7QUFDWlAsSUFBQUEsSUFBSSxFQUFFLFFBRE07QUFFWkMsSUFBQUEsUUFBUSxFQUFDO0FBRkcsR0F6QnBCO0FBNkJJTyxFQUFBQSxnQkFBZ0IsRUFBQztBQUNiUixJQUFBQSxJQUFJLEVBQUUsUUFETztBQUViQyxJQUFBQSxRQUFRLEVBQUM7QUFGSSxHQTdCckI7QUFpQ0lRLEVBQUFBLGFBQWEsRUFBQztBQUNWVCxJQUFBQSxJQUFJLEVBQUUsUUFESTtBQUVWQyxJQUFBQSxRQUFRLEVBQUM7QUFGQyxHQWpDbEI7QUFxQ0lTLEVBQUFBLGNBQWMsRUFBQztBQUNYVixJQUFBQSxJQUFJLEVBQUUsUUFESztBQUVYQyxJQUFBQSxRQUFRLEVBQUM7QUFGRSxHQXJDbkI7QUF5Q0lVLEVBQUFBLFlBQVksRUFBQztBQUNUWCxJQUFBQSxJQUFJLEVBQUU7QUFERyxHQXpDakI7QUE0Q0lZLEVBQUFBLGVBQWUsRUFBQztBQUNaWixJQUFBQSxJQUFJLEVBQUU7QUFETSxHQTVDcEI7QUErQ0lhLEVBQUFBLEtBQUssRUFBQztBQUNGYixJQUFBQSxJQUFJLEVBQUUsUUFESjtBQUVGQyxJQUFBQSxRQUFRLEVBQUM7QUFGUCxHQS9DVjtBQW1ESWEsRUFBQUEsT0FBTyxFQUFDO0FBQ0pkLElBQUFBLElBQUksRUFBRSxRQURGO0FBRUpDLElBQUFBLFFBQVEsRUFBQztBQUZMO0FBbkRaLENBRGdCLENBQXBCO0FBMkRBLE1BQU1jLFVBQVUsR0FBR3BCLEtBQUssQ0FBQyxTQUFELEVBQVlHLFdBQVosQ0FBeEI7QUFFQWtCLE9BQU8sQ0FBQ0QsVUFBUixHQUFxQkEsVUFBckIiLCJzb3VyY2VSb290IjoiL1VzZXJzL21hcmlvZ29tZXovRG9jdW1lbnRzL0dpdEh1Yi9CYWNrRW5kUGxhdGFmb3JtYVRyYW5zcG9ydGVGbHV2aWFsL3NyYy9tb2RlbG9zLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgbW9kZWwsIFNjaGVtYSB9ID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpO1xyXG5cclxuXHJcbmNvbnN0IG9yZGVuU2NoZW1hID0gbmV3IFNjaGVtYShcclxuICAgIHtcclxuICAgICAgICBvcmRlcl9pZDp7XHJcbiAgICAgICAgICAgIHR5cGU6XCJudW1iZXJcIixcclxuICAgICAgICAgICAgcmVxdWlyZWQ6dHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmVjaGFfb3JpZ2VuX29yZGVuOntcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgICAgICAgcmVxdWlyZWQ6dHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbm9tYnJlX2NvbnRlbmVkb3I6e1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICByZXF1aXJlZDp0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZXNjcmlwY2lvbl9jb250ZW5lZG9yOntcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgICAgICAgcmVxdWlyZWQ6dHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGVzb19jb250ZW5lZG9yOntcclxuICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIixcclxuICAgICAgICAgICAgcmVxdWlyZWQ6dHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYW5jaG9fY29udGVuZWRvcjp7XHJcbiAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCIsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOnRydWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFsdG9fY29udGVuZWRvcjp7XHJcbiAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCIsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOnRydWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxhcmdvX2NvbnRlbmVkb3I6e1xyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiLFxyXG4gICAgICAgICAgICByZXF1aXJlZDp0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwdWVydG9fb3JpZ2VuOntcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgICAgICAgcmVxdWlyZWQ6dHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHVlcnRvX2Rlc3Rpbm86e1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICByZXF1aXJlZDp0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlc3RhZG9fb3JkZW46e1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmZWNoYV9maW5fb3JkZW46e1xyXG4gICAgICAgICAgICB0eXBlOiBcImRhdGVcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29zdG86e1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICByZXF1aXJlZDp0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICB1c3VhcmlvOntcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgICAgICAgcmVxdWlyZWQ6dHJ1ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuKTtcclxuXHJcbmNvbnN0IG9yZGVuTW9kZWwgPSBtb2RlbChcIm9yZGVuZXNcIiwgb3JkZW5TY2hlbWEpO1xyXG5cclxuZXhwb3J0cy5vcmRlbk1vZGVsID0gb3JkZW5Nb2RlbDsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "orden.js"
      ],
      "names": [
        "model",
        "Schema",
        "require",
        "ordenSchema",
        "order_id",
        "type",
        "required",
        "fecha_origen_orden",
        "nombre_contenedor",
        "descripcion_contenedor",
        "peso_contenedor",
        "ancho_contenedor",
        "alto_contenedor",
        "largo_contenedor",
        "puerto_origen",
        "puerto_destino",
        "estado_orden",
        "fecha_fin_orden",
        "costo",
        "usuario",
        "ordenModel",
        "exports"
      ],
      "mappings": "AAAA,MAAM;AAAEA,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAAoBC,OAAO,CAAC,UAAD,CAAjC;;AAGA,MAAMC,WAAW,GAAG,IAAIF,MAAJ,CAChB;AACIG,EAAAA,QAAQ,EAAC;AACLC,IAAAA,IAAI,EAAC,QADA;AAELC,IAAAA,QAAQ,EAAC;AAFJ,GADb;AAKIC,EAAAA,kBAAkB,EAAC;AACfF,IAAAA,IAAI,EAAE,QADS;AAEfC,IAAAA,QAAQ,EAAC;AAFM,GALvB;AASIE,EAAAA,iBAAiB,EAAC;AACdH,IAAAA,IAAI,EAAE,QADQ;AAEdC,IAAAA,QAAQ,EAAC;AAFK,GATtB;AAaIG,EAAAA,sBAAsB,EAAC;AACnBJ,IAAAA,IAAI,EAAE,QADa;AAEnBC,IAAAA,QAAQ,EAAC;AAFU,GAb3B;AAiBII,EAAAA,eAAe,EAAC;AACZL,IAAAA,IAAI,EAAE,QADM;AAEZC,IAAAA,QAAQ,EAAC;AAFG,GAjBpB;AAqBIK,EAAAA,gBAAgB,EAAC;AACbN,IAAAA,IAAI,EAAE,QADO;AAEbC,IAAAA,QAAQ,EAAC;AAFI,GArBrB;AAyBIM,EAAAA,eAAe,EAAC;AACZP,IAAAA,IAAI,EAAE,QADM;AAEZC,IAAAA,QAAQ,EAAC;AAFG,GAzBpB;AA6BIO,EAAAA,gBAAgB,EAAC;AACbR,IAAAA,IAAI,EAAE,QADO;AAEbC,IAAAA,QAAQ,EAAC;AAFI,GA7BrB;AAiCIQ,EAAAA,aAAa,EAAC;AACVT,IAAAA,IAAI,EAAE,QADI;AAEVC,IAAAA,QAAQ,EAAC;AAFC,GAjClB;AAqCIS,EAAAA,cAAc,EAAC;AACXV,IAAAA,IAAI,EAAE,QADK;AAEXC,IAAAA,QAAQ,EAAC;AAFE,GArCnB;AAyCIU,EAAAA,YAAY,EAAC;AACTX,IAAAA,IAAI,EAAE;AADG,GAzCjB;AA4CIY,EAAAA,eAAe,EAAC;AACZZ,IAAAA,IAAI,EAAE;AADM,GA5CpB;AA+CIa,EAAAA,KAAK,EAAC;AACFb,IAAAA,IAAI,EAAE,QADJ;AAEFC,IAAAA,QAAQ,EAAC;AAFP,GA/CV;AAmDIa,EAAAA,OAAO,EAAC;AACJd,IAAAA,IAAI,EAAE,QADF;AAEJC,IAAAA,QAAQ,EAAC;AAFL;AAnDZ,CADgB,CAApB;AA2DA,MAAMc,UAAU,GAAGpB,KAAK,CAAC,SAAD,EAAYG,WAAZ,CAAxB;AAEAkB,OAAO,CAACD,UAAR,GAAqBA,UAArB",
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/",
      "sourcesContent": [
        "const { model, Schema } = require(\"mongoose\");\r\n\r\n\r\nconst ordenSchema = new Schema(\r\n    {\r\n        order_id:{\r\n            type:\"number\",\r\n            required:true\r\n        },\r\n        fecha_origen_orden:{\r\n            type: \"string\",\r\n            required:true\r\n        },\r\n        nombre_contenedor:{\r\n            type: \"string\",\r\n            required:true\r\n        },\r\n        descripcion_contenedor:{\r\n            type: \"string\",\r\n            required:true\r\n        },\r\n        peso_contenedor:{\r\n            type: \"number\",\r\n            required:true\r\n        },\r\n        ancho_contenedor:{\r\n            type: \"number\",\r\n            required:true\r\n        },\r\n        alto_contenedor:{\r\n            type: \"number\",\r\n            required:true\r\n        },\r\n        largo_contenedor:{\r\n            type: \"number\",\r\n            required:true\r\n        },\r\n        puerto_origen:{\r\n            type: \"string\",\r\n            required:true\r\n        },\r\n        puerto_destino:{\r\n            type: \"string\",\r\n            required:true\r\n        },\r\n        estado_orden:{\r\n            type: \"string\"\r\n        },\r\n        fecha_fin_orden:{\r\n            type: \"date\"\r\n        },\r\n        costo:{\r\n            type: \"string\",\r\n            required:true\r\n        },\r\n        usuario:{\r\n            type: \"string\",\r\n            required:true\r\n        }\r\n    }\r\n);\r\n\r\nconst ordenModel = model(\"ordenes\", ordenSchema);\r\n\r\nexports.ordenModel = ordenModel;"
      ]
    },
    "sourceType": "module",
    "mtime": 1639942667180
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"filename\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/puerto.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.0": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/puerto.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/puerto.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/puerto.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/",
        "sourceFileName": "puerto.js"
      }
    },
    "ast": null,
    "code": "const {\n  model,\n  Schema\n} = require(\"mongoose\");\n\nconst puertoSchema = new Schema({\n  /*_id:{\r\n  \tunique: true,\r\n            type: \"number\",\r\n            required:true\r\n        },*/\n  nombre_puerto: {\n    type: \"string\",\n    required: true\n  },\n  distancia: {\n    type: \"number\"\n  },\n  puerto_id: {\n    type: \"number\"\n  }\n});\nconst puertoModel = model(\"puertos\", puertoSchema);\nexports.puertoModel = puertoModel;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1ZXJ0by5qcyJdLCJuYW1lcyI6WyJtb2RlbCIsIlNjaGVtYSIsInJlcXVpcmUiLCJwdWVydG9TY2hlbWEiLCJub21icmVfcHVlcnRvIiwidHlwZSIsInJlcXVpcmVkIiwiZGlzdGFuY2lhIiwicHVlcnRvX2lkIiwicHVlcnRvTW9kZWwiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0FBQUVBLEVBQUFBLEtBQUY7QUFBU0MsRUFBQUE7QUFBVCxJQUFvQkMsT0FBTyxDQUFDLFVBQUQsQ0FBakM7O0FBR0EsTUFBTUMsWUFBWSxHQUFHLElBQUlGLE1BQUosQ0FDakI7QUFDRjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ1FHLEVBQUFBLGFBQWEsRUFBQztBQUNWQyxJQUFBQSxJQUFJLEVBQUUsUUFESTtBQUVWQyxJQUFBQSxRQUFRLEVBQUM7QUFGQyxHQU5sQjtBQVVJQyxFQUFBQSxTQUFTLEVBQUM7QUFDTkYsSUFBQUEsSUFBSSxFQUFFO0FBREEsR0FWZDtBQWFJRyxFQUFBQSxTQUFTLEVBQUM7QUFDTkgsSUFBQUEsSUFBSSxFQUFFO0FBREE7QUFiZCxDQURpQixDQUFyQjtBQXFCQSxNQUFNSSxXQUFXLEdBQUdULEtBQUssQ0FBQyxTQUFELEVBQVlHLFlBQVosQ0FBekI7QUFFQU8sT0FBTyxDQUFDRCxXQUFSLEdBQXNCQSxXQUF0QiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbWFyaW9nb21lei9Eb2N1bWVudHMvR2l0SHViL0JhY2tFbmRQbGF0YWZvcm1hVHJhbnNwb3J0ZUZsdXZpYWwvc3JjL21vZGVsb3MvIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBtb2RlbCwgU2NoZW1hIH0gPSByZXF1aXJlKFwibW9uZ29vc2VcIik7XHJcblxyXG5cclxuY29uc3QgcHVlcnRvU2NoZW1hID0gbmV3IFNjaGVtYShcclxuICAgIHtcclxuXHRcdC8qX2lkOntcclxuXHRcdFx0dW5pcXVlOiB0cnVlLFxyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiLFxyXG4gICAgICAgICAgICByZXF1aXJlZDp0cnVlXHJcbiAgICAgICAgfSwqL1xyXG4gICAgICAgIG5vbWJyZV9wdWVydG86e1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICByZXF1aXJlZDp0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaXN0YW5jaWE6e1xyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwdWVydG9faWQ6e1xyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiLFxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbik7XHJcblxyXG5jb25zdCBwdWVydG9Nb2RlbCA9IG1vZGVsKFwicHVlcnRvc1wiLCBwdWVydG9TY2hlbWEpO1xyXG5cclxuZXhwb3J0cy5wdWVydG9Nb2RlbCA9IHB1ZXJ0b01vZGVsOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "puerto.js"
      ],
      "names": [
        "model",
        "Schema",
        "require",
        "puertoSchema",
        "nombre_puerto",
        "type",
        "required",
        "distancia",
        "puerto_id",
        "puertoModel",
        "exports"
      ],
      "mappings": "AAAA,MAAM;AAAEA,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAAoBC,OAAO,CAAC,UAAD,CAAjC;;AAGA,MAAMC,YAAY,GAAG,IAAIF,MAAJ,CACjB;AACF;AACF;AACA;AACA;AACA;AACQG,EAAAA,aAAa,EAAC;AACVC,IAAAA,IAAI,EAAE,QADI;AAEVC,IAAAA,QAAQ,EAAC;AAFC,GANlB;AAUIC,EAAAA,SAAS,EAAC;AACNF,IAAAA,IAAI,EAAE;AADA,GAVd;AAaIG,EAAAA,SAAS,EAAC;AACNH,IAAAA,IAAI,EAAE;AADA;AAbd,CADiB,CAArB;AAqBA,MAAMI,WAAW,GAAGT,KAAK,CAAC,SAAD,EAAYG,YAAZ,CAAzB;AAEAO,OAAO,CAACD,WAAR,GAAsBA,WAAtB",
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/",
      "sourcesContent": [
        "const { model, Schema } = require(\"mongoose\");\r\n\r\n\r\nconst puertoSchema = new Schema(\r\n    {\r\n\t\t/*_id:{\r\n\t\t\tunique: true,\r\n            type: \"number\",\r\n            required:true\r\n        },*/\r\n        nombre_puerto:{\r\n            type: \"string\",\r\n            required:true\r\n        },\r\n        distancia:{\r\n            type: \"number\"\r\n        },\r\n        puerto_id:{\r\n            type: \"number\",\r\n        }\r\n\r\n    }\r\n);\r\n\r\nconst puertoModel = model(\"puertos\", puertoSchema);\r\n\r\nexports.puertoModel = puertoModel;"
      ]
    },
    "sourceType": "module",
    "mtime": 1639851419126
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"filename\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/userRutas.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.0": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/userRutas.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/userRutas.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/userRutas.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/",
        "sourceFileName": "userRutas.js"
      }
    },
    "ast": null,
    "code": "const {\n  Router\n} = require(\"express\");\n\nconst userRutas = Router();\n\nconst {\n  usuarioModel\n} = require(\"../modelos/usuarioModel\");\n\nconst Usuario = require(\"../modelos/usuarioModel\");\n\nconst {\n  compare\n} = require(\"bcryptjs\");\n\nconst {\n  sign\n} = require(\"jsonwebtoken\"); //const { userGuard } = require(\"../guards/userGuard\");\n\n\nconst {\n  login,\n  loginUpdate,\n  registroUsuario,\n  usuarioRegistrado,\n  usuarios\n} = require(\"../datos\");\n/**\n* API Rest Modulo de Login\n* Descripcion: Indica el ingreso de los usuarios a la plataforma.\n* Ruta: /login\n* Metodo: POST\n* Headers:\"Content-Type: application/json\"\n* Datos de entrada: { login }\n* Respuesta: { loginUpdate }\n*/\n\n\nuserRutas.post(\"/login\", async function (req, res) {\n  //Capturar usuario / password\n  const {\n    usuario,\n    password\n  } = req.body; // Comprobar el usuario exista en BD\n\n  const user = await usuarioModel.findOne({\n    documento: usuario\n  });\n\n  if (!user) {\n    return res.status(401).json({\n      estado: \"error\",\n      msg: \"ERROR: Credenciales invÃ¡lidas. 1\"\n    });\n  } // Comparar la contraseÃ±a \n\n\n  const passOK = await compare(password, user.password);\n\n  if (passOK === true) {\n    const token = sign({\n      usuario: user.documento,\n      rol: user.perfil,\n      nombre: user.nombre\n    }, process.env.JWT_SECRET_KEY);\n    return res.status(200).json({\n      estado: \"ok\",\n      msg: \"Logueado\",\n      token,\n      url: \"/inicio\"\n    });\n  }\n\n  return res.status(401).json({\n    estado: \"error\",\n    msg: \"ERROR: Credenciales invÃ¡lidas. 2\"\n  }); // Dar/denegar acceso\n});\n/**\n * API Rest Modulo de registro de usuarios\n * Descripcion: Registra los usuarios a la plataforma\n * Ruta: /registrarUsuario\n * Metodo: POSTs\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada:  { registroUsuario }\n * Respuesta: { usuarioRegistrado }\n */\n\nuserRutas.post(\"/registrarUsuario\", function (req, res) {\n  /* Codigo Local NO DATABASE\n     // Se recibe un json con toda la informacion respectiva para crear un usuario nuevo\n     const {nom, lastName, documentType, document, emailAddress, userType, phone, password} = req.body;\n     // Se obtiene el numero de documento para revisar si el usuario ya existe\n     const id = req.body.document;\n     // Se hace una busqueda del documento para ver si ya existe\n     const oldUser = usuarios.find(u => u.numero_documento === id);\n     // Si el usuario ya existe envia una alerta \n     if (oldUser != null && oldUser != undefined) {\n         res.send({estado : \"error\", msg : \"El usuario ya se encuentra registrado en el sistema.\"});\n     } else { // de lo contrario:\n         // Se determina el tipo de perfil segun la informacion que recibe\n         if (userType === 'Item 2') {\n             profile = 1;\n         } else if (userType === 'Item 3') {\n             profile = 2;\n         }\n         // Se determina el tipo de documento segun la informacion que recibe\n         if (documentType === 'Item 2') {\n             idType = \"C.C\";\n         } else if (documentType === 'Item 3') {\n             idType = \"C.E\";\n         } else if (documentType === 'Item 4') {\n             idType = \"NIT\";\n         }\n         // Se crea una variable newUser donde a cada Key se le asigna los valores que vienen del json del front end\n         const newUser = {nombre: nom, apellido: lastName, tipo_documento: idType, numero_documento: document, email: emailAddress, perfil: profile, celular: phone, pass: password};\n         // Se agrega el newUser a base de datos\n         usuarios.push(newUser);\n         // Se confirma que se estan recibiendo todos los datos correspondientes\n         console.log(usuarios);\n         // Se envia estado y mensaje al front end para confirmar que el usuario se registro\n         res.send({estado : \"ok\", msg : \"Usuario Registrado\"});\n     }\n     */\n  // Aqui inicia el codigo con base de datos\n  // Se recibe un json con toda la informacion respectiva para crear un usuario nuevo\n  const {\n    nom,\n    lastName,\n    documentType,\n    document,\n    emailAddress,\n    userType,\n    phone,\n    password\n  } = req.body; // Se determina el tipo de perfil segun la informacion que recibe\n\n  if (userType === 'Item 2') {\n    profile = \"1\";\n  } else if (userType === 'Item 3') {\n    profile = \"2\";\n  } // Se determina el tipo de documento segun la informacion que recibe\n\n\n  if (documentType === 'Item 2') {\n    idType = \"C.C\";\n  } else if (documentType === 'Item 3') {\n    idType = \"C.E\";\n  } else if (documentType === 'Item 4') {\n    idType = \"NIT\";\n  } // Se hace una busqueda del documento para ver si ya existe\n\n\n  usuarioModel.findOne({\n    documento: document\n  }, function (error, oldUser) {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"ERROR: al buscar usuario\"\n      });\n    } else {\n      if (oldUser !== null) {\n        return res.send({\n          estado: \"ok\",\n          msg: \"Error: El usuario ya se encuentra registrado en el sistema.\"\n        });\n      } else {\n        // Se crea un nuevo usuario con una instancia del modelo de usuario y se le agrega toda la informacion que viene del front\n        const newUser = new usuarioModel({\n          nombre: nom,\n          apellido: lastName,\n          tipo_documento: idType,\n          documento: document,\n          email: emailAddress,\n          perfil: profile,\n          telefono: phone,\n          password: password\n        });\n        newUser.save(function (error) {\n          if (error) {\n            return res.send({\n              estado: \"error\",\n              msg: \"ERROR: Al registrar nuevo usuario.\"\n            });\n          }\n\n          res.send({\n            estado: \"ok\",\n            msg: \"Usuario registrado exitosamente.\"\n          });\n        });\n      }\n    }\n  });\n});\n/**\n * API Rest Modulo de listar usuarios\n * Descripcion: Buscar los usuarios y muestra la informaciÃ³n de ellos\n * Ruta: /listarUsuario\n * Metodo: GET\n * Headers:\"Content-Type: application/json\"\n * Datos de respuesta: { usuarios }\n */\n\nuserRutas.get(\"/listarUsuario/:documento\", function (req, res) {\n  let alerta = \"No se encontrÃ³ el usuario solicitado\";\n  let estado = \"error\";\n  const document = req.params.documento; //Viene un json {numero_documento:\"24526698\"}\n  // Se hace una busqueda del documento para ver si ya existe\n\n  usuarioModel.findOne({\n    documento: document\n  }, function (error, oldUser) {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"ERROR: al buscar usuario\"\n      });\n    } else {\n      if (oldUser !== null && oldUser != undefined) {\n        alerta = \"Usuario encontrado exitosamente\";\n        estado = \"ok\";\n        return res.send({\n          estado: estado,\n          msg: alerta,\n          data: oldUser\n        });\n      } else {\n        return res.send({\n          estado: estado,\n          msg: alerta,\n          data: oldUser\n        });\n      }\n    }\n  });\n});\n/**\n * API Rest Modulo de editar usuarios\n * Descripcion: Busca los usuarios y actualiza la informaciÃ³n de ellos\n * Ruta: /editarUsuario\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: {nom, lastName, documentType, document, emailAddress, userType, phone, password}\n * Datos de respuesta: {estado : \"ok\", mensaje : \"Usuario Guardado\"}\n */\n\nuserRutas.post(\"/editarUsuario\", function (req, res) {\n  /*\n      // Desestructuracion\n      const {nom, lastName, documentType, document, emailAddress, userType, phone, password} = req.body;\n      // Se hacen las alertas predeterminadas\n      let alerta = \"error\";\n      let mensaje = \"El usuario no se encuentra registrado en nuestra base de datos\"\n      let i = 0;\n      for (const u of usuarios) {\n          if (u.numero_documento.toLowerCase() == document.toLowerCase()) {\n              // Se hacen las respectivas validaciones con la informacion que viene de los SELECT FIELDS\n              if (userType === 'Item 2') {\n                  profile = 1;\n              } else if (userType === 'Item 3') {\n                  profile = 2;\n              }\n              // Se determina el tipo de documento segun la informacion que recibe\n              if (documentType === 'Item 2') {\n                  idType = \"C.C\";\n              } else if (documentType === 'Item 3') {\n                  idType = \"C.E\";\n              } else if (documentType === 'Item 4') {\n                  idType = \"NIT\";\n              }\n              // Actualiza el producto con los nuevos datos\n              usuarios[i].nombre = nom; // Se modifican los datos almacenados con los que trae el json \n              usuarios[i].apellido = lastName; // Se modifican los datos almacenados con los que trae el json \n              usuarios[i].tipo_documento = idType; // Se modifican los datos almacenados con los que trae el json \n              usuarios[i].numero_documento = document; // Se modifican los datos almacenados con los que trae el json \n              usuarios[i].email = emailAddress; // Se modifican los datos almacenados con los que trae el json \n              usuarios[i].perfil = profile; // Se modifican los datos almacenados con los que trae el json \n              usuarios[i].celular = phone; // Se modifican los datos almacenados con los que trae el json \n              usuarios[i].pass = password; // Se modifican los datos almacenados con los que trae el json - ESTE SE DEBE AJUSTAR CUANDO SE HAGA LA AUTENTICACION\n              alerta = \"ok\";\n              mensaje = \"Usuario editado exitosamente\"\n              break;            \n          }\n          i++;\n      }\n      res.send({estado : alerta, msg : mensaje});\n  */\n  // Se trae la informacion del Front\n  const {\n    nom,\n    lastName,\n    documentType,\n    document,\n    emailAddress,\n    userType,\n    phone,\n    password\n  } = req.body; // Se identifican los valores de tipo de usuario y tipo de documento\n\n  if (userType === 'Item 2') {\n    profile = \"1\";\n  } else if (userType === 'Item 3') {\n    profile = \"2\";\n  } // Se determina el tipo de documento segun la informacion que recibe\n\n\n  if (documentType === 'Item 2') {\n    idType = \"C.C\";\n  } else if (documentType === 'Item 3') {\n    idType = \"C.E\";\n  } else if (documentType === 'Item 4') {\n    idType = \"NIT\";\n  }\n\n  usuarioModel.findOne({\n    documento: document\n  }, function (error, oldUser) {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"ERROR: al buscar usuario\"\n      });\n    } else {\n      if (oldUser !== null && oldUser !== undefined) {\n        usuarioModel.updateOne({\n          documento: document\n        }, {\n          $set: {\n            nombre: nom,\n            apellido: lastName,\n            tipo_documento: idType,\n            documento: document,\n            email: emailAddress,\n            perfil: profile,\n            telefono: phone\n            /*password: password*/\n\n          }\n        }, function (error) {\n          if (error) {\n            return res.send({\n              estado: \"error\",\n              msg: \"ERROR: Al editar el usuario\"\n            });\n          } else {\n            res.send({\n              estado: \"ok\",\n              msg: \"Usuario editado\"\n            });\n          }\n        });\n      }\n    }\n  });\n});\n/**\n * API Rest Modulo de eliminacion de Usuarios (se ajusta a BD)\n * Descripcion: Elimina un usuario guardado en la base de datos.\n * Ruta: /eliminarUsuario\n * Metodo: POST\n * Datos de entrada: { document }\n * Respuesta: {estado : \"ok\", mensaje : \"Usuario Eliminado\"}\n */\n\nuserRutas.post(\"/eliminarUsuario\", function (req, res) {\n  /* Codigo para eliminar usuario local\n  // Desestructuracion\n  const { document } = req.body;\n  // Buscar el usuario a Eliminar\n  let i = 0;\n  for (const u of usuarios) {\n      if (u.numero_documento.toLowerCase() == document.toLowerCase()) {\n          usuarios.splice(i, 1);\n          break;\n      }\n      i++;\n  }\n  res.send({estado : \"ok\", msg : \"Usuario Eliminado\"});\n  */\n  // Codigo para eliminar usuario en base de datos\n  // Desestructuracion\n  const {\n    document\n  } = req.body;\n  usuarioModel.findOne({\n    documento: document\n  }, function (error, oldUser) {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"ERROR: al buscar usuario\"\n      });\n    } else {\n      if (oldUser !== null && oldUser !== undefined) {\n        usuarioModel.remove({\n          documento: document\n        }, function (error) {\n          if (error) {\n            return res.send({\n              estado: \"error\",\n              msg: \"ERROR: Al eliminar el usuario\"\n            });\n          } else {\n            res.send({\n              estado: \"ok\",\n              msg: \"Usuario eliminado exitosamente.\"\n            });\n          }\n        });\n      }\n    }\n  });\n});\nexports.userRutas = userRutas;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "userRutas.js"
      ],
      "names": [
        "Router",
        "require",
        "userRutas",
        "usuarioModel",
        "Usuario",
        "compare",
        "sign",
        "login",
        "loginUpdate",
        "registroUsuario",
        "usuarioRegistrado",
        "usuarios",
        "post",
        "req",
        "res",
        "usuario",
        "password",
        "body",
        "user",
        "findOne",
        "documento",
        "status",
        "json",
        "estado",
        "msg",
        "passOK",
        "token",
        "rol",
        "perfil",
        "nombre",
        "process",
        "env",
        "JWT_SECRET_KEY",
        "url",
        "nom",
        "lastName",
        "documentType",
        "document",
        "emailAddress",
        "userType",
        "phone",
        "profile",
        "idType",
        "error",
        "oldUser",
        "send",
        "newUser",
        "apellido",
        "tipo_documento",
        "email",
        "telefono",
        "save",
        "get",
        "alerta",
        "params",
        "undefined",
        "data",
        "updateOne",
        "$set",
        "remove",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/",
      "sourcesContent": [
        "const { Router } = require(\"express\");\nconst userRutas = Router();\nconst { usuarioModel } = require(\"../modelos/usuarioModel\");\nconst Usuario = require(\"../modelos/usuarioModel\");\nconst { compare } = require(\"bcryptjs\");\nconst { sign } = require(\"jsonwebtoken\");\n//const { userGuard } = require(\"../guards/userGuard\");\n\nconst { login, loginUpdate, registroUsuario, usuarioRegistrado, usuarios } = require(\"../datos\");\n\n\n    /**\n * API Rest Modulo de Login\n * Descripcion: Indica el ingreso de los usuarios a la plataforma.\n * Ruta: /login\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { login }\n * Respuesta: { loginUpdate }\n */\n\nuserRutas.post(\"/login\", async function(req, res) {\n    //Capturar usuario / password\n    const { usuario, password } = req.body;\n    // Comprobar el usuario exista en BD\n    const user = await usuarioModel.findOne({ documento: usuario });\n\n    if (!user) {\n        return res.status(401).json({ estado: \"error\", msg: \"ERROR: Credenciales invÃ¡lidas. 1\" })\n    }\n    // Comparar la contraseÃ±a \n    const passOK = await compare(password, user.password);\n    if (passOK === true) {\n        const token = sign(\n            {\n                usuario: user.documento,\n                rol: user.perfil,\n                nombre: user.nombre\n            },\n            process.env.JWT_SECRET_KEY\n        )\n        return res.status(200).json({ estado: \"ok\", msg: \"Logueado\", token, url:\"/inicio\" });\n    }\n    return res.status(401).json({ estado: \"error\", msg: \"ERROR: Credenciales invÃ¡lidas. 2\" });\n    // Dar/denegar acceso\n});\n\n\n/**\n * API Rest Modulo de registro de usuarios\n * Descripcion: Registra los usuarios a la plataforma\n * Ruta: /registrarUsuario\n * Metodo: POSTs\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada:  { registroUsuario }\n * Respuesta: { usuarioRegistrado }\n */\n\nuserRutas.post(\"/registrarUsuario\", function(req, res) {\n /* Codigo Local NO DATABASE\n    // Se recibe un json con toda la informacion respectiva para crear un usuario nuevo\n    const {nom, lastName, documentType, document, emailAddress, userType, phone, password} = req.body;\n    // Se obtiene el numero de documento para revisar si el usuario ya existe\n    const id = req.body.document;\n    // Se hace una busqueda del documento para ver si ya existe\n    const oldUser = usuarios.find(u => u.numero_documento === id);\n    // Si el usuario ya existe envia una alerta \n    if (oldUser != null && oldUser != undefined) {\n        res.send({estado : \"error\", msg : \"El usuario ya se encuentra registrado en el sistema.\"});\n    } else { // de lo contrario:\n        // Se determina el tipo de perfil segun la informacion que recibe\n        if (userType === 'Item 2') {\n            profile = 1;\n        } else if (userType === 'Item 3') {\n            profile = 2;\n        }\n        // Se determina el tipo de documento segun la informacion que recibe\n        if (documentType === 'Item 2') {\n            idType = \"C.C\";\n        } else if (documentType === 'Item 3') {\n            idType = \"C.E\";\n        } else if (documentType === 'Item 4') {\n            idType = \"NIT\";\n        }\n        // Se crea una variable newUser donde a cada Key se le asigna los valores que vienen del json del front end\n        const newUser = {nombre: nom, apellido: lastName, tipo_documento: idType, numero_documento: document, email: emailAddress, perfil: profile, celular: phone, pass: password};\n        // Se agrega el newUser a base de datos\n        usuarios.push(newUser);\n        // Se confirma que se estan recibiendo todos los datos correspondientes\n        console.log(usuarios);\n        // Se envia estado y mensaje al front end para confirmar que el usuario se registro\n        res.send({estado : \"ok\", msg : \"Usuario Registrado\"});\n    }\n    */\n\n    // Aqui inicia el codigo con base de datos\n\n    // Se recibe un json con toda la informacion respectiva para crear un usuario nuevo\n    const {nom, lastName, documentType, document, emailAddress, userType, phone, password} = req.body;\n    // Se determina el tipo de perfil segun la informacion que recibe\n    if (userType === 'Item 2') {\n        profile = \"1\";\n    } else if (userType === 'Item 3') {\n        profile = \"2\";\n    }\n    // Se determina el tipo de documento segun la informacion que recibe\n    if (documentType === 'Item 2') {\n        idType = \"C.C\";\n    } else if (documentType === 'Item 3') {\n        idType = \"C.E\";\n    } else if (documentType === 'Item 4') {\n        idType = \"NIT\";\n    }\n\n    // Se hace una busqueda del documento para ver si ya existe\n    usuarioModel.findOne({documento: document}, function (error, oldUser) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar usuario\" });\n        } else {\n            if (oldUser !== null) {\n                return res.send({ estado: \"ok\", msg: \"Error: El usuario ya se encuentra registrado en el sistema.\" });\n            } else {\n                // Se crea un nuevo usuario con una instancia del modelo de usuario y se le agrega toda la informacion que viene del front\n                const newUser = new usuarioModel({nombre: nom, apellido: lastName, tipo_documento: idType, documento: document, email: emailAddress, perfil: profile, telefono: phone, password: password});\n                newUser.save(function (error) {\n                    if (error) {\n                        return res.send({ estado: \"error\", msg: \"ERROR: Al registrar nuevo usuario.\" });\n                    }\n                    res.send({ estado: \"ok\", msg: \"Usuario registrado exitosamente.\" });\n                });\n            }\n        }\n    })\n})\n\n\n/**\n * API Rest Modulo de listar usuarios\n * Descripcion: Buscar los usuarios y muestra la informaciÃ³n de ellos\n * Ruta: /listarUsuario\n * Metodo: GET\n * Headers:\"Content-Type: application/json\"\n * Datos de respuesta: { usuarios }\n */\n\n userRutas.get(\"/listarUsuario/:documento\", function(req, res) {\n    let alerta = \"No se encontrÃ³ el usuario solicitado\";\n    let estado = \"error\";\n    const document = req.params.documento; //Viene un json {numero_documento:\"24526698\"}\n    // Se hace una busqueda del documento para ver si ya existe\n    usuarioModel.findOne({documento: document}, function (error, oldUser) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar usuario\" });\n        } else {\n            if (oldUser !== null && oldUser != undefined) {\n                alerta = \"Usuario encontrado exitosamente\"\n                estado = \"ok\"\n                return res.send({estado: estado, msg: alerta, data: oldUser});\n            } else {\n                return res.send({estado: estado, msg: alerta, data: oldUser});\n            } \n        }\n    })\n}); \n\n\n/**\n * API Rest Modulo de editar usuarios\n * Descripcion: Busca los usuarios y actualiza la informaciÃ³n de ellos\n * Ruta: /editarUsuario\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: {nom, lastName, documentType, document, emailAddress, userType, phone, password}\n * Datos de respuesta: {estado : \"ok\", mensaje : \"Usuario Guardado\"}\n */\n\n userRutas.post(\"/editarUsuario\", function(req, res) {\n/*\n    // Desestructuracion\n    const {nom, lastName, documentType, document, emailAddress, userType, phone, password} = req.body;\n    // Se hacen las alertas predeterminadas\n    let alerta = \"error\";\n    let mensaje = \"El usuario no se encuentra registrado en nuestra base de datos\"\n    let i = 0;\n    for (const u of usuarios) {\n        if (u.numero_documento.toLowerCase() == document.toLowerCase()) {\n            // Se hacen las respectivas validaciones con la informacion que viene de los SELECT FIELDS\n            if (userType === 'Item 2') {\n                profile = 1;\n            } else if (userType === 'Item 3') {\n                profile = 2;\n            }\n            // Se determina el tipo de documento segun la informacion que recibe\n            if (documentType === 'Item 2') {\n                idType = \"C.C\";\n            } else if (documentType === 'Item 3') {\n                idType = \"C.E\";\n            } else if (documentType === 'Item 4') {\n                idType = \"NIT\";\n            }\n            // Actualiza el producto con los nuevos datos\n            usuarios[i].nombre = nom; // Se modifican los datos almacenados con los que trae el json \n            usuarios[i].apellido = lastName; // Se modifican los datos almacenados con los que trae el json \n            usuarios[i].tipo_documento = idType; // Se modifican los datos almacenados con los que trae el json \n            usuarios[i].numero_documento = document; // Se modifican los datos almacenados con los que trae el json \n            usuarios[i].email = emailAddress; // Se modifican los datos almacenados con los que trae el json \n            usuarios[i].perfil = profile; // Se modifican los datos almacenados con los que trae el json \n            usuarios[i].celular = phone; // Se modifican los datos almacenados con los que trae el json \n            usuarios[i].pass = password; // Se modifican los datos almacenados con los que trae el json - ESTE SE DEBE AJUSTAR CUANDO SE HAGA LA AUTENTICACION\n            alerta = \"ok\";\n            mensaje = \"Usuario editado exitosamente\"\n            break;            \n        }\n        i++;\n    }\n    res.send({estado : alerta, msg : mensaje});\n*/\n\n    // Se trae la informacion del Front\n    const {nom, lastName, documentType, document, emailAddress, userType, phone, password} = req.body;\n    // Se identifican los valores de tipo de usuario y tipo de documento\n    if (userType === 'Item 2') {\n        profile = \"1\";\n    } else if (userType === 'Item 3') {\n        profile = \"2\";\n    }\n    // Se determina el tipo de documento segun la informacion que recibe\n    if (documentType === 'Item 2') {\n        idType = \"C.C\";\n    } else if (documentType === 'Item 3') {\n        idType = \"C.E\";\n    } else if (documentType === 'Item 4') {\n        idType = \"NIT\";\n    }\n    usuarioModel.findOne({documento: document}, function (error, oldUser) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar usuario\" });\n        } else {\n            if (oldUser !== null && oldUser !== undefined) {\n                usuarioModel.updateOne({ documento: document }, { $set: { nombre: nom, apellido: lastName, tipo_documento: idType, documento: document, email: emailAddress, perfil: profile, telefono: phone, /*password: password*/ } }, function (error) {\n                    if (error) {\n                        return res.send({ estado: \"error\", msg: \"ERROR: Al editar el usuario\" });\n                    } else {\n                        res.send({ estado: \"ok\", msg: \"Usuario editado\" });\n                    }\n                });\n            } \n        }\n    });    \n }); \n\n\n/**\n * API Rest Modulo de eliminacion de Usuarios (se ajusta a BD)\n * Descripcion: Elimina un usuario guardado en la base de datos.\n * Ruta: /eliminarUsuario\n * Metodo: POST\n * Datos de entrada: { document }\n * Respuesta: {estado : \"ok\", mensaje : \"Usuario Eliminado\"}\n */\n userRutas.post(\"/eliminarUsuario\", function(req,res) {\n\n    /* Codigo para eliminar usuario local\n    // Desestructuracion\n    const { document } = req.body;\n    // Buscar el usuario a Eliminar\n    let i = 0;\n    for (const u of usuarios) {\n        if (u.numero_documento.toLowerCase() == document.toLowerCase()) {\n            usuarios.splice(i, 1);\n            break;\n        }\n        i++;\n    }\n    res.send({estado : \"ok\", msg : \"Usuario Eliminado\"});\n\n*/\n\n// Codigo para eliminar usuario en base de datos\n    // Desestructuracion\n    const { document } = req.body;\n    usuarioModel.findOne({documento: document}, function (error, oldUser) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar usuario\" });\n        } else {\n            if (oldUser !== null && oldUser !== undefined) {\n                usuarioModel.remove({ documento: document }, function (error) {\n                    if (error) {\n                        return res.send({ estado: \"error\", msg: \"ERROR: Al eliminar el usuario\" });\n                    } else {\n                        res.send({ estado: \"ok\", msg: \"Usuario eliminado exitosamente.\" });\n                    }\n                });\n            } \n        }\n    });    \n\n\n})\n\nexports.userRutas = userRutas;"
      ]
    },
    "sourceType": "module",
    "mtime": 1640065696018
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"filename\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/ordenesRutas.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.0": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/ordenesRutas.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/ordenesRutas.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/ordenesRutas.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/",
        "sourceFileName": "ordenesRutas.js"
      }
    },
    "ast": null,
    "code": "const {\n  Router\n} = require(\"express\");\n\nconst ordenesRutas = Router();\n\nconst {\n  ordenModel\n} = require(\"../modelos/orden\");\n\nconst {\n  puertoModel\n} = require(\"../modelos/puerto\");\n\nconst {\n  configModel\n} = require(\"../modelos/configuracion\");\n\nconst {\n  compare\n} = require(\"bcryptjs\");\n\nconst {\n  sign\n} = require(\"jsonwebtoken\"); //const { userGuard } = require(\"../guards/userGuard\");\n\n\nconst {\n  registroOrden,\n  newOrden,\n  ordenDetalle,\n  estados,\n  ordenes,\n  editarOrden,\n  ordenUpdate\n} = require(\"../datos\");\n\nconst tasaDolar = 4000;\n/**\n * API Rest Modulo de registro de Ã³rdenes\n * Descripcion: Registra las ordenes de los usuarios\n * Ruta: /registrarOrden\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { registroOrden }\n * Respuesta: { newOrden }\n */\n\nordenesRutas.post(\"/registrarOrden\", function (req, res) {\n  /* Codigo para realizar registro de orden de manera local\n  \n      // Se recibe un json con toda la informacion respectiva para crear una nueva orden\n      const { art, height, width, length, weight, origen, destino, descr } = req.body;\n      // Se hace un loop para determinar el valor de la ultima orden\n      let last = 0;\n      for(var i = 0; i < ordenes.length; i++) {\n          var obj = ordenes[i];\n          if (last <= obj.id_orden) {\n              last += 1;\n          }\n      }\n      // Se asigna un nuevo numero de orden\n      const orderId = last + 1;\n      // Se compara una ultima vez si existe el numero de orden\n      const lastID = ordenes.find(o => o.id_orden === orderId);\n      // Si la orden ya existe envia una alerta \n      if (lastID != null && lastID != undefined) {\n          res.send({estado : \"error\", msg : \"Ya existe una orden registrada.\"});\n      } else { // de lo contrario:\n          // Se crea una variable newOrder donde a cada Key se le asigna los valores que vienen del json del front end\n          const newOrder = {id_orden: orderId, articulo: art, largo: length, ancho: width, alto: height, peso: weight, puerto_origen: origen, puerto_destino: destino, Descripcion: descr, estado_orden: \"preparando para Embarcar\" };\n          // Se agrega la nueva orden a base de datos\n          ordenes.push(newOrder);\n          // Se confirma que se estan recibiendo todos los datos correspondientes\n          // console.log(ordenes);\n          // Se envia estado y mensaje al front end para confirmar que la orden fue creada con un ID, que se le entrega al usuario\n          res.send({estado : \"ok\", msg : `Orden creada exitosamente con ID nÃºmero ${orderId}. En la pÃ¡gina de inicio podrÃ¡ encontrar mÃ¡s detalles de su orden. Muchas gracias por usar nuestro servicio.`});\n  \n      }\n  */\n\n  /* ------------------------------------------------------Seccion para determinar fecha---------------------------------------------------------------*/\n  // Nuevo objeto para determinar fecha\n  let date_ob = new Date(); // current date\n  // adjust 0 before single digit date\n\n  let date = (\"0\" + date_ob.getDate()).slice(-2); // current month\n\n  let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2); // current year\n\n  let year = date_ob.getFullYear(); // current hours\n\n  let hours = date_ob.getHours(); // current minutes\n\n  let minutes = date_ob.getMinutes(); // current seconds\n\n  let seconds = date_ob.getSeconds(); // prints date & time in YYYY-MM-DD HH:MM:SS format\n\n  const defDate = year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds;\n  console.log(year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds);\n  /* ------------------------------------------------------Seccion para determinar fecha---------------------------------------------------------------*/\n  // Se recibe un json con toda la informacion respectiva para crear una nueva orden\n\n  const {\n    user,\n    art,\n    height,\n    width,\n    length,\n    weight,\n    origen,\n    destino,\n    descr\n  } = req.body;\n  ordenModel.find({}, (error, order) => {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"ERROR: al buscar ordenes.\"\n      });\n    } else {\n      const orders = order.map(o => o); // Se verifica que se hayan registrado las ordenes en el array\n\n      console.log(orders); // Se hace un loop para determinar el valor de la ultima orden\n\n      let last = 0;\n\n      for (var i = 0; i < orders.length; i++) {\n        var obj = orders[i];\n\n        if (last <= obj.order_id) {\n          last += 1;\n        }\n      } // Se asigna un nuevo numero de orden\n\n\n      const orderId = last + 1;\n      console.log(orderId); // Se hace una busqueda del documento para ver si ya existe\n\n      ordenModel.findOne({\n        order_id: orderId\n      }, function (error, oldOrder) {\n        if (error) {\n          return res.send({\n            estado: \"error\",\n            msg: \"ERROR: al buscar orden\"\n          });\n        } else {\n          if (oldOrder !== null && oldOrder !== undefined) {\n            return res.send({\n              estado: \"ok\",\n              msg: \"Error: La orden ya se encuentra registrada en el sistema.\"\n            });\n          } else {\n            /*--------------------------------------------------------Modulo para calcular precio a pagar-------------------------------------------------------*/\n            puertoModel.find({\n              nombre_puerto: {\n                $in: [origen, destino]\n              }\n            }, (error, port) => {\n              if (error) {\n                return res.send({\n                  estado: \"error\",\n                  msg: \"Error: Uno de los puertos no aparece registrado en nuestro sistema.\"\n                });\n              } else {\n                const ports = port.map(p => p); // Se verifica que se hayan registrado ambos puertos\n\n                console.log(ports); // Se suman las distancias de ambos puertos para determinar el valor a pagar\n\n                const distancia = ports[0].distancia + ports[1].distancia; // Se verifica que se haya sumado la distancia\n\n                console.log(distancia); // Se busca el valor de la milla actual\n\n                configModel.find({}, (error, milla) => {\n                  if (error) {\n                    return res.send({\n                      estado: \"error\",\n                      msg: \"No se pudo validar el precio a pagar.\"\n                    });\n                  } else {\n                    console.log(milla); // Se calcula el valor en pesos segun la tasa del dolar manifestada al inicio del archivo\n\n                    const pesos = milla[0].valor * tasaDolar; // Se determina el precio total a cancelar en pesos segun la distancia de ambos puertos\n\n                    const precio = pesos * distancia;\n                    /*------------------------------------------------------------Modulo para crear nueva orden---------------------------------------------------------*/\n                    // Se crea una nueva orden con una instancia del modelo de orden y se le agrega toda la informacion que viene del front\n\n                    const newOrder = new ordenModel({\n                      order_id: orderId,\n                      fecha_origen_orden: defDate,\n                      nombre_contenedor: art,\n                      descripcion_contenedor: descr,\n                      peso_contenedor: weight,\n                      ancho_contenedor: width,\n                      alto_contenedor: height,\n                      largo_contenedor: length,\n                      puerto_origen: origen,\n                      puerto_destino: destino,\n                      estado_orden: \"Preparando para Embarcar\",\n                      costo: precio,\n                      usuario: user\n                    });\n                    console.log(newOrder);\n                    newOrder.save(function (error) {\n                      if (error) {\n                        return res.send({\n                          estado: \"error\",\n                          msg: \"ERROR: Al registrar nueva orden.\"\n                        });\n                      } else {\n                        return res.send({\n                          estado: \"ok\",\n                          msg: `Orden creada exitosamente con ID nÃºmero ${orderId}. En la pÃ¡gina de inicio podrÃ¡ encontrar mÃ¡s detalles de su orden. Muchas gracias por usar nuestro servicio.`\n                        });\n                      }\n                    });\n                  }\n                });\n              }\n            });\n          }\n        }\n      });\n    }\n  });\n});\n/**\n * API Rest Modulo de creaciÃ³n de Ã³rdenes por usuarios externos\n * Descripcion: Registra las ordenes de los usuarios externos\n * Ruta: /crearOrden\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { registroOrden }\n * Respuesta: { newOrden }\n */\n\nordenesRutas.post(\"/crearOrden\", function (req, res) {\n  /* ------------------------------------------------------Seccion para determinar fecha---------------------------------------------------------------*/\n  // Nuevo objeto para determinar fecha\n  let date_ob = new Date(); // current date\n  // adjust 0 before single digit date\n\n  let date = (\"0\" + date_ob.getDate()).slice(-2); // current month\n\n  let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2); // current year\n\n  let year = date_ob.getFullYear(); // current hours\n\n  let hours = date_ob.getHours(); // current minutes\n\n  let minutes = date_ob.getMinutes(); // current seconds\n\n  let seconds = date_ob.getSeconds(); // prints date & time in YYYY-MM-DD HH:MM:SS format\n\n  const defDate = year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds;\n  console.log(year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds);\n  /* ------------------------------------------------------Seccion para determinar fecha---------------------------------------------------------------*/\n  // Se recibe un json con toda la informacion respectiva para crear una nueva orden\n\n  const {\n    telefono,\n    art,\n    height,\n    width,\n    length,\n    weight,\n    origen,\n    destino,\n    descr\n  } = req.body;\n  ordenModel.find({}, (error, order) => {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"ERROR: al buscar ordenes.\"\n      });\n    } else {\n      const orders = order.map(o => o); // Se verifica que se hayan registrado las ordenes en el array\n\n      console.log(orders); // Se hace un loop para determinar el valor de la ultima orden\n\n      let last = 0;\n\n      for (var i = 0; i < orders.length; i++) {\n        var obj = orders[i];\n\n        if (last <= obj.order_id) {\n          last += 1;\n        }\n      } // Se asigna un nuevo numero de orden\n\n\n      const orderId = last + 1;\n      console.log(orderId); // Se hace una busqueda del documento para ver si ya existe\n\n      ordenModel.findOne({\n        order_id: orderId\n      }, function (error, oldOrder) {\n        if (error) {\n          return res.send({\n            estado: \"error\",\n            msg: \"ERROR: al buscar orden\"\n          });\n        } else {\n          if (oldOrder !== null && oldOrder !== undefined) {\n            return res.send({\n              estado: \"ok\",\n              msg: \"Error: La orden ya se encuentra registrada en el sistema.\"\n            });\n          } else {\n            /*--------------------------------------------------------Modulo para calcular precio a pagar-------------------------------------------------------*/\n            puertoModel.find({\n              nombre_puerto: {\n                $in: [origen, destino]\n              }\n            }, (error, port) => {\n              if (error) {\n                return res.send({\n                  estado: \"error\",\n                  msg: \"Error: Uno de los puertos no aparece registrado en nuestro sistema.\"\n                });\n              } else {\n                const ports = port.map(p => p); // Se verifica que se hayan registrado ambos puertos\n\n                console.log(ports); // Se suman las distancias de ambos puertos para determinar el valor a pagar\n\n                const distancia = ports[0].distancia + ports[1].distancia; // Se verifica que se haya sumado la distancia\n\n                console.log(distancia); // Se busca el valor de la milla actual\n\n                configModel.find({}, (error, milla) => {\n                  if (error) {\n                    return res.send({\n                      estado: \"error\",\n                      msg: \"No se pudo validar el precio a pagar.\"\n                    });\n                  } else {\n                    console.log(milla); // Se calcula el valor en pesos segun la tasa del dolar manifestada al inicio del archivo\n\n                    const pesos = milla[0].valor * tasaDolar; // Se determina el precio total a cancelar en pesos segun la distancia de ambos puertos\n\n                    const precio = pesos * distancia;\n                    /*------------------------------------------------------------Modulo para crear nueva orden---------------------------------------------------------*/\n                    // Se crea una nueva orden con una instancia del modelo de orden y se le agrega toda la informacion que viene del front\n\n                    const newOrder = new ordenModel({\n                      order_id: orderId,\n                      fecha_origen_orden: defDate,\n                      nombre_contenedor: art,\n                      descripcion_contenedor: descr,\n                      peso_contenedor: weight,\n                      ancho_contenedor: width,\n                      alto_contenedor: height,\n                      largo_contenedor: length,\n                      puerto_origen: origen,\n                      puerto_destino: destino,\n                      estado_orden: \"Preparando para Embarcar\",\n                      costo: precio,\n                      usuario: telefono\n                    });\n                    console.log(newOrder);\n                    newOrder.save(function (error) {\n                      if (error) {\n                        return res.send({\n                          estado: \"error\",\n                          msg: \"ERROR: Al registrar nueva orden.\"\n                        });\n                      } else {\n                        return res.send({\n                          estado: \"ok\",\n                          msg: `Orden creada exitosamente con ID nÃºmero ${orderId}. En breve lo estaremos contactando para ofrecerle mÃ¡s detalles de su orden. Muchas gracias por usar nuestro servicio.`\n                        });\n                      }\n                    });\n                  }\n                });\n              }\n            });\n          }\n        }\n      });\n    }\n  });\n});\n/**\n * API Rest Modulo de busqueda de ordenes\n * Descripcion: Busca las ordenes\n * Ruta: /listarOrdenDetalle/?id_orden=1002\n * Metodo: GET\n * Headers:\"Content-Type: application/json\"\n * Datos de respuesta: { ordenDetalle }\n */\n\nordenesRutas.get(\"/listarOrdenDetalle/:orden\", function (req, res) {\n  /* Codigo para datos almacenados localmente\n  const numero = req.params.orden;\n  //console.log(numero);\n  const orden = ordenes.find(o => o.id_orden === parseInt(numero));\n  if (orden != null && orden != undefined) {\n      res.send({ estado: \"ok\", msg: \"Orden encontrada con Ã©xito.\", orden })\n  } else {\n      res.send({ estado: \"error\", msg: \"No se encontrÃ³ la orden solicitada\" })\n  }\n  */\n  // Se obtiene el parametro de la ruta\n  const numero = parseInt(req.params.orden);\n  ordenModel.findOne({\n    order_id: numero\n  }, function (error, orden) {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"No se encontrÃ³ la orden solicitada.\"\n      });\n    } else {\n      if (orden != null && orden != undefined) {\n        res.send({\n          estado: \"ok\",\n          msg: \"Orden encontrada con Ã©xito.\",\n          orden\n        });\n      } else {\n        res.send({\n          estado: \"error\",\n          msg: \"No se encontrÃ³ la orden solicitada\"\n        });\n      }\n    }\n  });\n});\n/**\n * API Rest Modulo de estado de ordenes\n * Descripcion: Indica el estado de las ordenes\n * Ruta: /listarOrden/?estado=Finalizada\n * Metodo: GET\n * Headers:\"Content-Type: application/json\"\n * Datos de respuesta: { estados }\n */\n\nordenesRutas.post(\"/listarOrden/factura\", function (req, res) {\n  ordenModel.find({}, (error, order) => {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"ERROR: al buscar ordenes.\"\n      });\n    } else {\n      const orders = order.map(o => o); // Se verifica que se hayan registrado las ordenes en el array\n      //console.log(orders);\n      // Se hace un loop para determinar el valor de la ultima orden\n\n      let last = 0;\n      let finalOrder;\n\n      for (var i = 0; i < orders.length; i++) {\n        var obj = orders[i];\n\n        if (last <= obj.order_id) {\n          last += 1;\n          finalOrder = obj;\n        }\n      } // Se asigna un nuevo numero de orden\n\n\n      const orderId = last;\n      console.log(orderId);\n      console.log(finalOrder);\n      res.send({\n        estado: \"ok\",\n        msg: \"Ultima orden encontrada\",\n        data: [finalOrder]\n      });\n    }\n  });\n});\n/**\n * API Rest Modulo de listar Ã³rdenes\n * Descripcion: Buscar las Ã³rdenes y muestra toda la informaciÃ³n de ellas\n * Ruta: /listarOrden\n * Metodo: GET\n * Headers:\"Content-Type: application/json\"\n * Datos de respuesta: { ordenes }\n */\n\nordenesRutas.post(\"/listarOrden/:user\", function (req, res) {\n  /* Codigo para datos almacenados localmente\n  //console.log(puertos);\n  res.send({ estado: \"ok\", data: ordenes })\n  */\n  const username = req.params.user;\n  ordenModel.find({\n    usuario: username\n  }, function (error, ordenes) {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"No se encontraron Ã³rdenes.\"\n      });\n    } else {\n      if (ordenes != null && ordenes != undefined) {\n        res.send({\n          estado: \"ok\",\n          msg: \"Ordenes encontradas con Ã©xito.\",\n          data: ordenes\n        });\n      } else {\n        res.send({\n          estado: \"error\",\n          msg: \"No se encontraron Ã³rdenes.\"\n        });\n      }\n    }\n  });\n});\n/**\n * API Rest Modulo de editar Ã³rdenes\n * Descripcion: Actualiza la informaciÃ³n de las Ã³rdenes ya creadas\n * Ruta: /editarOrden\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { editarOrden }\n * Datos de respuesta: { ordenUpdate }\n */\n\nordenesRutas.post(\"/editarOrden\", function (req, res) {\n  /* Codigo para datos almacenados localmente\n      // Desestructuracion\n      const {numero, estado, art, height, width, length, weight, origen, destino, descr} = req.body;\n      // Se hacen las alertas predeterminadas\n      let alerta = \"error\";\n      let mensaje = \"La orden no se encuentra registrada en nuestra base de datos\"\n      let i = 0;\n      for (const o of ordenes) {\n          if (o.id_orden === numero) {\n              if (o.estado_orden === \"Finalizada\" || o.estado_orden === \"Despachada\") {\n                  alerta = \"error\"\n                  mensaje = \"La orden ya fue despachada por ende no se puede editar.\"\n              } else {\n                  ordenes[i].articulo = art;\n                  ordenes[i].altura = height;\n                  ordenes[i].ancho = width;\n                  ordenes[i].largo = length;\n                  ordenes[i].peso = weight;\n                  ordenes[i].puerto_origen = origen;\n                  ordenes[i].puerto_destino = destino;\n                  ordenes[i].descripcion = descr;\n                  alerta = \"ok\";\n                  mensaje = \"Orden editada exitosamente\"\n                  break;\n              }       \n          }\n          i++;\n      }\n      res.send({estado : alerta, msg : mensaje});\n  \n      */\n  // Desestructuracion\n  const {\n    numero,\n    art,\n    height,\n    width,\n    length,\n    weight,\n    origen,\n    destino,\n    descr\n  } = req.body;\n  ordenModel.findOne({\n    order_id: numero\n  }, function (error, oldOrder) {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"ERROR: al buscar orden duplicada.\"\n      });\n    } else {\n      if (oldOrder !== null && oldOrder !== undefined) {\n        ordenModel.updateOne({\n          order_id: numero\n        }, {\n          $set: {\n            nombre_contenedor: art,\n            descripcion_contenedor: descr,\n            peso_contenedor: weight,\n            ancho_contenedor: width,\n            alto_contenedor: height,\n            largo_contenedor: length,\n            puerto_origen: origen,\n            puerto_destino: destino\n          }\n        }, function (error) {\n          if (error) {\n            return res.send({\n              estado: \"error\",\n              msg: \"ERROR: Al editar la orden.\"\n            });\n          } else {\n            res.send({\n              estado: \"ok\",\n              msg: \"Orden actualizada satisfactoriamente.\"\n            });\n          }\n        });\n      }\n    }\n  });\n});\n/**\n * API Rest Modulo de actualizar estados\n * Descripcion: Actualiza la informaciÃ³n de las Ã³rdenes ya creadas\n * Ruta: /editarEstado\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { estado }\n * Datos de respuesta: { estadoupdate }\n */\n\nordenesRutas.post(\"/editarEstado\", function (req, res) {\n  // Desestructuracion\n  const {\n    numero,\n    newEstado\n  } = req.body;\n  ordenModel.findOne({\n    order_id: numero\n  }, function (error, oldOrder) {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"ERROR: al buscar orden duplicada.\"\n      });\n    } else {\n      if (oldOrder !== null && oldOrder !== undefined) {\n        ordenModel.updateOne({\n          order_id: numero\n        }, {\n          $set: {\n            estado_orden: newEstado\n          }\n        }, function (error) {\n          if (error) {\n            return res.send({\n              estado: \"error\",\n              msg: \"ERROR: Al editar el estado de la orden.\"\n            });\n          } else {\n            res.send({\n              estado: \"ok\",\n              msg: \"Estado actualizado satisfactoriamente.\"\n            });\n          }\n        });\n      }\n    }\n  });\n});\nexports.ordenesRutas = ordenesRutas;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yZGVuZXNSdXRhcy5qcyJdLCJuYW1lcyI6WyJSb3V0ZXIiLCJyZXF1aXJlIiwib3JkZW5lc1J1dGFzIiwib3JkZW5Nb2RlbCIsInB1ZXJ0b01vZGVsIiwiY29uZmlnTW9kZWwiLCJjb21wYXJlIiwic2lnbiIsInJlZ2lzdHJvT3JkZW4iLCJuZXdPcmRlbiIsIm9yZGVuRGV0YWxsZSIsImVzdGFkb3MiLCJvcmRlbmVzIiwiZWRpdGFyT3JkZW4iLCJvcmRlblVwZGF0ZSIsInRhc2FEb2xhciIsInBvc3QiLCJyZXEiLCJyZXMiLCJkYXRlX29iIiwiRGF0ZSIsImRhdGUiLCJnZXREYXRlIiwic2xpY2UiLCJtb250aCIsImdldE1vbnRoIiwieWVhciIsImdldEZ1bGxZZWFyIiwiaG91cnMiLCJnZXRIb3VycyIsIm1pbnV0ZXMiLCJnZXRNaW51dGVzIiwic2Vjb25kcyIsImdldFNlY29uZHMiLCJkZWZEYXRlIiwiY29uc29sZSIsImxvZyIsInVzZXIiLCJhcnQiLCJoZWlnaHQiLCJ3aWR0aCIsImxlbmd0aCIsIndlaWdodCIsIm9yaWdlbiIsImRlc3Rpbm8iLCJkZXNjciIsImJvZHkiLCJmaW5kIiwiZXJyb3IiLCJvcmRlciIsInNlbmQiLCJlc3RhZG8iLCJtc2ciLCJvcmRlcnMiLCJtYXAiLCJvIiwibGFzdCIsImkiLCJvYmoiLCJvcmRlcl9pZCIsIm9yZGVySWQiLCJmaW5kT25lIiwib2xkT3JkZXIiLCJ1bmRlZmluZWQiLCJub21icmVfcHVlcnRvIiwiJGluIiwicG9ydCIsInBvcnRzIiwicCIsImRpc3RhbmNpYSIsIm1pbGxhIiwicGVzb3MiLCJ2YWxvciIsInByZWNpbyIsIm5ld09yZGVyIiwiZmVjaGFfb3JpZ2VuX29yZGVuIiwibm9tYnJlX2NvbnRlbmVkb3IiLCJkZXNjcmlwY2lvbl9jb250ZW5lZG9yIiwicGVzb19jb250ZW5lZG9yIiwiYW5jaG9fY29udGVuZWRvciIsImFsdG9fY29udGVuZWRvciIsImxhcmdvX2NvbnRlbmVkb3IiLCJwdWVydG9fb3JpZ2VuIiwicHVlcnRvX2Rlc3Rpbm8iLCJlc3RhZG9fb3JkZW4iLCJjb3N0byIsInVzdWFyaW8iLCJzYXZlIiwidGVsZWZvbm8iLCJnZXQiLCJudW1lcm8iLCJwYXJzZUludCIsInBhcmFtcyIsIm9yZGVuIiwiZmluYWxPcmRlciIsImRhdGEiLCJ1c2VybmFtZSIsInVwZGF0ZU9uZSIsIiRzZXQiLCJuZXdFc3RhZG8iLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBYUMsT0FBTyxDQUFDLFNBQUQsQ0FBMUI7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHRixNQUFNLEVBQTNCOztBQUNBLE1BQU07QUFBRUcsRUFBQUE7QUFBRixJQUFpQkYsT0FBTyxDQUFDLGtCQUFELENBQTlCOztBQUNBLE1BQU07QUFBRUcsRUFBQUE7QUFBRixJQUFrQkgsT0FBTyxDQUFDLG1CQUFELENBQS9COztBQUNBLE1BQU07QUFBRUksRUFBQUE7QUFBRixJQUFrQkosT0FBTyxDQUFDLDBCQUFELENBQS9COztBQUNBLE1BQU07QUFBRUssRUFBQUE7QUFBRixJQUFjTCxPQUFPLENBQUMsVUFBRCxDQUEzQjs7QUFDQSxNQUFNO0FBQUVNLEVBQUFBO0FBQUYsSUFBV04sT0FBTyxDQUFDLGNBQUQsQ0FBeEIsQyxDQUNBOzs7QUFFQSxNQUFNO0FBQUVPLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBLFFBQWpCO0FBQTJCQyxFQUFBQSxZQUEzQjtBQUF5Q0MsRUFBQUEsT0FBekM7QUFBa0RDLEVBQUFBLE9BQWxEO0FBQTJEQyxFQUFBQSxXQUEzRDtBQUF3RUMsRUFBQUE7QUFBeEUsSUFBd0ZiLE9BQU8sQ0FBQyxVQUFELENBQXJHOztBQUVBLE1BQU1jLFNBQVMsR0FBRyxJQUFsQjtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQ2IsWUFBWSxDQUFDYyxJQUFiLENBQWtCLGlCQUFsQixFQUFxQyxVQUFTQyxHQUFULEVBQWNDLEdBQWQsRUFBbUI7QUFFekQ7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RjtBQUFVUyxJQUFBQTtBQUFWLE1BQXdCbEYsR0FBRyxDQUFDNkIsSUFBbEM7QUFFQTNDLEVBQUFBLFVBQVUsQ0FBQzBELE9BQVgsQ0FBbUI7QUFBQ0YsSUFBQUEsUUFBUSxFQUFFK0I7QUFBWCxHQUFuQixFQUF1QyxVQUFVMUMsS0FBVixFQUFpQmMsUUFBakIsRUFBMkI7QUFDOUQsUUFBSWQsS0FBSixFQUFXO0FBQ1AsYUFBTzlCLEdBQUcsQ0FBQ2dDLElBQUosQ0FBUztBQUFFQyxRQUFBQSxNQUFNLEVBQUUsT0FBVjtBQUFtQkMsUUFBQUEsR0FBRyxFQUFFO0FBQXhCLE9BQVQsQ0FBUDtBQUNILEtBRkQsTUFFTztBQUNILFVBQUlVLFFBQVEsS0FBSyxJQUFiLElBQXFCQSxRQUFRLEtBQUtDLFNBQXRDLEVBQWlEO0FBQzdDNUQsUUFBQUEsVUFBVSxDQUFDOEYsU0FBWCxDQUFxQjtBQUFFdEMsVUFBQUEsUUFBUSxFQUFFK0I7QUFBWixTQUFyQixFQUEyQztBQUFFUSxVQUFBQSxJQUFJLEVBQUU7QUFBRWQsWUFBQUEsWUFBWSxFQUFFZTtBQUFoQjtBQUFSLFNBQTNDLEVBQWtGLFVBQVVuRCxLQUFWLEVBQWlCO0FBQy9GLGNBQUlBLEtBQUosRUFBVztBQUNQLG1CQUFPOUIsR0FBRyxDQUFDZ0MsSUFBSixDQUFTO0FBQUVDLGNBQUFBLE1BQU0sRUFBRSxPQUFWO0FBQW1CQyxjQUFBQSxHQUFHLEVBQUU7QUFBeEIsYUFBVCxDQUFQO0FBQ0gsV0FGRCxNQUVPO0FBQ0hsQyxZQUFBQSxHQUFHLENBQUNnQyxJQUFKLENBQVM7QUFBRUMsY0FBQUEsTUFBTSxFQUFFLElBQVY7QUFBZ0JDLGNBQUFBLEdBQUcsRUFBRTtBQUFyQixhQUFUO0FBQ0g7QUFDSixTQU5EO0FBT0g7QUFDSjtBQUNKLEdBZEQ7QUFlSCxDQXBCRDtBQXdCQWdELE9BQU8sQ0FBQ2xHLFlBQVIsR0FBdUJBLFlBQXZCIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9tYXJpb2dvbWV6L0RvY3VtZW50cy9HaXRIdWIvQmFja0VuZFBsYXRhZm9ybWFUcmFuc3BvcnRlRmx1dmlhbC9zcmMvcnV0YXMvIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBSb3V0ZXIgfSA9IHJlcXVpcmUoXCJleHByZXNzXCIpO1xuY29uc3Qgb3JkZW5lc1J1dGFzID0gUm91dGVyKCk7XG5jb25zdCB7IG9yZGVuTW9kZWwgfSA9IHJlcXVpcmUoXCIuLi9tb2RlbG9zL29yZGVuXCIpO1xuY29uc3QgeyBwdWVydG9Nb2RlbCB9ID0gcmVxdWlyZShcIi4uL21vZGVsb3MvcHVlcnRvXCIpO1xuY29uc3QgeyBjb25maWdNb2RlbCB9ID0gcmVxdWlyZShcIi4uL21vZGVsb3MvY29uZmlndXJhY2lvblwiKTtcbmNvbnN0IHsgY29tcGFyZSB9ID0gcmVxdWlyZShcImJjcnlwdGpzXCIpO1xuY29uc3QgeyBzaWduIH0gPSByZXF1aXJlKFwianNvbndlYnRva2VuXCIpO1xuLy9jb25zdCB7IHVzZXJHdWFyZCB9ID0gcmVxdWlyZShcIi4uL2d1YXJkcy91c2VyR3VhcmRcIik7XG5cbmNvbnN0IHsgcmVnaXN0cm9PcmRlbiwgbmV3T3JkZW4sIG9yZGVuRGV0YWxsZSwgZXN0YWRvcywgb3JkZW5lcywgZWRpdGFyT3JkZW4sIG9yZGVuVXBkYXRlIH0gPSByZXF1aXJlKFwiLi4vZGF0b3NcIik7XG5cbmNvbnN0IHRhc2FEb2xhciA9IDQwMDA7XG5cblxuXG4vKipcbiAqIEFQSSBSZXN0IE1vZHVsbyBkZSByZWdpc3RybyBkZSDDs3JkZW5lc1xuICogRGVzY3JpcGNpb246IFJlZ2lzdHJhIGxhcyBvcmRlbmVzIGRlIGxvcyB1c3Vhcmlvc1xuICogUnV0YTogL3JlZ2lzdHJhck9yZGVuXG4gKiBNZXRvZG86IFBPU1RcbiAqIEhlYWRlcnM6XCJDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cIlxuICogRGF0b3MgZGUgZW50cmFkYTogeyByZWdpc3Ryb09yZGVuIH1cbiAqIFJlc3B1ZXN0YTogeyBuZXdPcmRlbiB9XG4gKi9cblxuIG9yZGVuZXNSdXRhcy5wb3N0KFwiL3JlZ2lzdHJhck9yZGVuXCIsIGZ1bmN0aW9uKHJlcSwgcmVzKSB7XG5cbi8qIENvZGlnbyBwYXJhIHJlYWxpemFyIHJlZ2lzdHJvIGRlIG9yZGVuIGRlIG1hbmVyYSBsb2NhbFxuXG4gICAgLy8gU2UgcmVjaWJlIHVuIGpzb24gY29uIHRvZGEgbGEgaW5mb3JtYWNpb24gcmVzcGVjdGl2YSBwYXJhIGNyZWFyIHVuYSBudWV2YSBvcmRlblxuICAgIGNvbnN0IHsgYXJ0LCBoZWlnaHQsIHdpZHRoLCBsZW5ndGgsIHdlaWdodCwgb3JpZ2VuLCBkZXN0aW5vLCBkZXNjciB9ID0gcmVxLmJvZHk7XG4gICAgLy8gU2UgaGFjZSB1biBsb29wIHBhcmEgZGV0ZXJtaW5hciBlbCB2YWxvciBkZSBsYSB1bHRpbWEgb3JkZW5cbiAgICBsZXQgbGFzdCA9IDA7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IG9yZGVuZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG9iaiA9IG9yZGVuZXNbaV07XG4gICAgICAgIGlmIChsYXN0IDw9IG9iai5pZF9vcmRlbikge1xuICAgICAgICAgICAgbGFzdCArPSAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFNlIGFzaWduYSB1biBudWV2byBudW1lcm8gZGUgb3JkZW5cbiAgICBjb25zdCBvcmRlcklkID0gbGFzdCArIDE7XG4gICAgLy8gU2UgY29tcGFyYSB1bmEgdWx0aW1hIHZleiBzaSBleGlzdGUgZWwgbnVtZXJvIGRlIG9yZGVuXG4gICAgY29uc3QgbGFzdElEID0gb3JkZW5lcy5maW5kKG8gPT4gby5pZF9vcmRlbiA9PT0gb3JkZXJJZCk7XG4gICAgLy8gU2kgbGEgb3JkZW4geWEgZXhpc3RlIGVudmlhIHVuYSBhbGVydGEgXG4gICAgaWYgKGxhc3RJRCAhPSBudWxsICYmIGxhc3RJRCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzLnNlbmQoe2VzdGFkbyA6IFwiZXJyb3JcIiwgbXNnIDogXCJZYSBleGlzdGUgdW5hIG9yZGVuIHJlZ2lzdHJhZGEuXCJ9KTtcbiAgICB9IGVsc2UgeyAvLyBkZSBsbyBjb250cmFyaW86XG4gICAgICAgIC8vIFNlIGNyZWEgdW5hIHZhcmlhYmxlIG5ld09yZGVyIGRvbmRlIGEgY2FkYSBLZXkgc2UgbGUgYXNpZ25hIGxvcyB2YWxvcmVzIHF1ZSB2aWVuZW4gZGVsIGpzb24gZGVsIGZyb250IGVuZFxuICAgICAgICBjb25zdCBuZXdPcmRlciA9IHtpZF9vcmRlbjogb3JkZXJJZCwgYXJ0aWN1bG86IGFydCwgbGFyZ286IGxlbmd0aCwgYW5jaG86IHdpZHRoLCBhbHRvOiBoZWlnaHQsIHBlc286IHdlaWdodCwgcHVlcnRvX29yaWdlbjogb3JpZ2VuLCBwdWVydG9fZGVzdGlubzogZGVzdGlubywgRGVzY3JpcGNpb246IGRlc2NyLCBlc3RhZG9fb3JkZW46IFwicHJlcGFyYW5kbyBwYXJhIEVtYmFyY2FyXCIgfTtcbiAgICAgICAgLy8gU2UgYWdyZWdhIGxhIG51ZXZhIG9yZGVuIGEgYmFzZSBkZSBkYXRvc1xuICAgICAgICBvcmRlbmVzLnB1c2gobmV3T3JkZXIpO1xuICAgICAgICAvLyBTZSBjb25maXJtYSBxdWUgc2UgZXN0YW4gcmVjaWJpZW5kbyB0b2RvcyBsb3MgZGF0b3MgY29ycmVzcG9uZGllbnRlc1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhvcmRlbmVzKTtcbiAgICAgICAgLy8gU2UgZW52aWEgZXN0YWRvIHkgbWVuc2FqZSBhbCBmcm9udCBlbmQgcGFyYSBjb25maXJtYXIgcXVlIGxhIG9yZGVuIGZ1ZSBjcmVhZGEgY29uIHVuIElELCBxdWUgc2UgbGUgZW50cmVnYSBhbCB1c3VhcmlvXG4gICAgICAgIHJlcy5zZW5kKHtlc3RhZG8gOiBcIm9rXCIsIG1zZyA6IGBPcmRlbiBjcmVhZGEgZXhpdG9zYW1lbnRlIGNvbiBJRCBuw7ptZXJvICR7b3JkZXJJZH0uIEVuIGxhIHDDoWdpbmEgZGUgaW5pY2lvIHBvZHLDoSBlbmNvbnRyYXIgbcOhcyBkZXRhbGxlcyBkZSBzdSBvcmRlbi4gTXVjaGFzIGdyYWNpYXMgcG9yIHVzYXIgbnVlc3RybyBzZXJ2aWNpby5gfSk7XG5cbiAgICB9XG4qL1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1TZWNjaW9uIHBhcmEgZGV0ZXJtaW5hciBmZWNoYS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgLy8gTnVldm8gb2JqZXRvIHBhcmEgZGV0ZXJtaW5hciBmZWNoYVxuICAgIGxldCBkYXRlX29iID0gbmV3IERhdGUoKTtcblxuICAgIC8vIGN1cnJlbnQgZGF0ZVxuICAgIC8vIGFkanVzdCAwIGJlZm9yZSBzaW5nbGUgZGlnaXQgZGF0ZVxuICAgIGxldCBkYXRlID0gKFwiMFwiICsgZGF0ZV9vYi5nZXREYXRlKCkpLnNsaWNlKC0yKTtcblxuICAgIC8vIGN1cnJlbnQgbW9udGhcbiAgICBsZXQgbW9udGggPSAoXCIwXCIgKyAoZGF0ZV9vYi5nZXRNb250aCgpICsgMSkpLnNsaWNlKC0yKTtcblxuICAgIC8vIGN1cnJlbnQgeWVhclxuICAgIGxldCB5ZWFyID0gZGF0ZV9vYi5nZXRGdWxsWWVhcigpO1xuXG4gICAgLy8gY3VycmVudCBob3Vyc1xuICAgIGxldCBob3VycyA9IGRhdGVfb2IuZ2V0SG91cnMoKTtcblxuICAgIC8vIGN1cnJlbnQgbWludXRlc1xuICAgIGxldCBtaW51dGVzID0gZGF0ZV9vYi5nZXRNaW51dGVzKCk7XG5cbiAgICAvLyBjdXJyZW50IHNlY29uZHNcbiAgICBsZXQgc2Vjb25kcyA9IGRhdGVfb2IuZ2V0U2Vjb25kcygpO1xuXG4gICAgLy8gcHJpbnRzIGRhdGUgJiB0aW1lIGluIFlZWVktTU0tREQgSEg6TU06U1MgZm9ybWF0XG4gICAgY29uc3QgZGVmRGF0ZSA9IHllYXIgKyBcIi1cIiArIG1vbnRoICsgXCItXCIgKyBkYXRlICsgXCIgXCIgKyBob3VycyArIFwiOlwiICsgbWludXRlcyArIFwiOlwiICsgc2Vjb25kc1xuICAgIGNvbnNvbGUubG9nKHllYXIgKyBcIi1cIiArIG1vbnRoICsgXCItXCIgKyBkYXRlICsgXCIgXCIgKyBob3VycyArIFwiOlwiICsgbWludXRlcyArIFwiOlwiICsgc2Vjb25kcyk7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVNlY2Npb24gcGFyYSBkZXRlcm1pbmFyIGZlY2hhLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXG4gICAgLy8gU2UgcmVjaWJlIHVuIGpzb24gY29uIHRvZGEgbGEgaW5mb3JtYWNpb24gcmVzcGVjdGl2YSBwYXJhIGNyZWFyIHVuYSBudWV2YSBvcmRlblxuICAgIGNvbnN0IHsgdXNlciwgYXJ0LCBoZWlnaHQsIHdpZHRoLCBsZW5ndGgsIHdlaWdodCwgb3JpZ2VuLCBkZXN0aW5vLCBkZXNjciB9ID0gcmVxLmJvZHk7XG5cblxuICAgIG9yZGVuTW9kZWwuZmluZCh7fSwgKGVycm9yLCBvcmRlcikgPT4geyBcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoeyBlc3RhZG86IFwiZXJyb3JcIiwgbXNnOiBcIkVSUk9SOiBhbCBidXNjYXIgb3JkZW5lcy5cIiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG9yZGVycyA9IG9yZGVyLm1hcChvID0+IG8pO1xuICAgICAgICAgICAgLy8gU2UgdmVyaWZpY2EgcXVlIHNlIGhheWFuIHJlZ2lzdHJhZG8gbGFzIG9yZGVuZXMgZW4gZWwgYXJyYXlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG9yZGVycyk7XG5cbiAgICAgICAgICAgIC8vIFNlIGhhY2UgdW4gbG9vcCBwYXJhIGRldGVybWluYXIgZWwgdmFsb3IgZGUgbGEgdWx0aW1hIG9yZGVuXG4gICAgICAgICAgICBsZXQgbGFzdCA9IDA7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgb3JkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IG9yZGVyc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdCA8PSBvYmoub3JkZXJfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdCArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNlIGFzaWduYSB1biBudWV2byBudW1lcm8gZGUgb3JkZW5cbiAgICAgICAgICAgIGNvbnN0IG9yZGVySWQgPSBsYXN0ICsgMTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG9yZGVySWQpXG4gIFxuXG4gICAgICAgICAgICAvLyBTZSBoYWNlIHVuYSBidXNxdWVkYSBkZWwgZG9jdW1lbnRvIHBhcmEgdmVyIHNpIHlhIGV4aXN0ZVxuICAgICAgICAgICAgb3JkZW5Nb2RlbC5maW5kT25lKHtvcmRlcl9pZDogb3JkZXJJZH0sIGZ1bmN0aW9uIChlcnJvciwgb2xkT3JkZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zZW5kKHsgZXN0YWRvOiBcImVycm9yXCIsIG1zZzogXCJFUlJPUjogYWwgYnVzY2FyIG9yZGVuXCIgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZE9yZGVyICE9PSBudWxsICYmIG9sZE9yZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuc2VuZCh7IGVzdGFkbzogXCJva1wiLCBtc2c6IFwiRXJyb3I6IExhIG9yZGVuIHlhIHNlIGVuY3VlbnRyYSByZWdpc3RyYWRhIGVuIGVsIHNpc3RlbWEuXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tTW9kdWxvIHBhcmEgY2FsY3VsYXIgcHJlY2lvIGEgcGFnYXItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIHB1ZXJ0b01vZGVsLmZpbmQoeyBub21icmVfcHVlcnRvOiB7JGluOiBbb3JpZ2VuLCBkZXN0aW5vXSB9IH0sIChlcnJvciwgcG9ydCkgPT4geyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zZW5kKHsgZXN0YWRvOiBcImVycm9yXCIsIG1zZzogXCJFcnJvcjogVW5vIGRlIGxvcyBwdWVydG9zIG5vIGFwYXJlY2UgcmVnaXN0cmFkbyBlbiBudWVzdHJvIHNpc3RlbWEuXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9ydHMgPSBwb3J0Lm1hcChwID0+IHApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZSB2ZXJpZmljYSBxdWUgc2UgaGF5YW4gcmVnaXN0cmFkbyBhbWJvcyBwdWVydG9zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHBvcnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2Ugc3VtYW4gbGFzIGRpc3RhbmNpYXMgZGUgYW1ib3MgcHVlcnRvcyBwYXJhIGRldGVybWluYXIgZWwgdmFsb3IgYSBwYWdhclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXN0YW5jaWEgPSBwb3J0c1swXS5kaXN0YW5jaWEgKyBwb3J0c1sxXS5kaXN0YW5jaWE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlIHZlcmlmaWNhIHF1ZSBzZSBoYXlhIHN1bWFkbyBsYSBkaXN0YW5jaWFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGlzdGFuY2lhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2UgYnVzY2EgZWwgdmFsb3IgZGUgbGEgbWlsbGEgYWN0dWFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ01vZGVsLmZpbmQoe30sIChlcnJvciwgbWlsbGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuc2VuZCh7IGVzdGFkbzogXCJlcnJvclwiLCBtc2c6IFwiTm8gc2UgcHVkbyB2YWxpZGFyIGVsIHByZWNpbyBhIHBhZ2FyLlwiIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtaWxsYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2UgY2FsY3VsYSBlbCB2YWxvciBlbiBwZXNvcyBzZWd1biBsYSB0YXNhIGRlbCBkb2xhciBtYW5pZmVzdGFkYSBhbCBpbmljaW8gZGVsIGFyY2hpdm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwZXNvcyA9IG1pbGxhWzBdLnZhbG9yICogdGFzYURvbGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlIGRldGVybWluYSBlbCBwcmVjaW8gdG90YWwgYSBjYW5jZWxhciBlbiBwZXNvcyBzZWd1biBsYSBkaXN0YW5jaWEgZGUgYW1ib3MgcHVlcnRvc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZWNpbyA9IHBlc29zICogZGlzdGFuY2lhO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLU1vZHVsbyBwYXJhIGNyZWFyIG51ZXZhIG9yZGVuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZSBjcmVhIHVuYSBudWV2YSBvcmRlbiBjb24gdW5hIGluc3RhbmNpYSBkZWwgbW9kZWxvIGRlIG9yZGVuIHkgc2UgbGUgYWdyZWdhIHRvZGEgbGEgaW5mb3JtYWNpb24gcXVlIHZpZW5lIGRlbCBmcm9udFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld09yZGVyID0gbmV3IG9yZGVuTW9kZWwoIHtvcmRlcl9pZDogb3JkZXJJZCwgZmVjaGFfb3JpZ2VuX29yZGVuOiBkZWZEYXRlLCBub21icmVfY29udGVuZWRvcjogYXJ0LCBkZXNjcmlwY2lvbl9jb250ZW5lZG9yOiBkZXNjciwgcGVzb19jb250ZW5lZG9yOiB3ZWlnaHQsIGFuY2hvX2NvbnRlbmVkb3I6IHdpZHRoLCBhbHRvX2NvbnRlbmVkb3I6IGhlaWdodCwgbGFyZ29fY29udGVuZWRvcjogbGVuZ3RoLCBwdWVydG9fb3JpZ2VuOiBvcmlnZW4sIHB1ZXJ0b19kZXN0aW5vOiBkZXN0aW5vLCBlc3RhZG9fb3JkZW46IFwiUHJlcGFyYW5kbyBwYXJhIEVtYmFyY2FyXCIsY29zdG86IHByZWNpbywgdXN1YXJpbzogdXNlcn0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG5ld09yZGVyKSAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdPcmRlci5zYXZlKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuc2VuZCh7IGVzdGFkbzogXCJlcnJvclwiLCBtc2c6IFwiRVJST1I6IEFsIHJlZ2lzdHJhciBudWV2YSBvcmRlbi5cIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuc2VuZCh7IGVzdGFkbzogXCJva1wiLCBtc2c6IGBPcmRlbiBjcmVhZGEgZXhpdG9zYW1lbnRlIGNvbiBJRCBuw7ptZXJvICR7b3JkZXJJZH0uIEVuIGxhIHDDoWdpbmEgZGUgaW5pY2lvIHBvZHLDoSBlbmNvbnRyYXIgbcOhcyBkZXRhbGxlcyBkZSBzdSBvcmRlbi4gTXVjaGFzIGdyYWNpYXMgcG9yIHVzYXIgbnVlc3RybyBzZXJ2aWNpby5gIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSk7XG59KVxuXG4vKipcbiAqIEFQSSBSZXN0IE1vZHVsbyBkZSBjcmVhY2nDs24gZGUgw7NyZGVuZXMgcG9yIHVzdWFyaW9zIGV4dGVybm9zXG4gKiBEZXNjcmlwY2lvbjogUmVnaXN0cmEgbGFzIG9yZGVuZXMgZGUgbG9zIHVzdWFyaW9zIGV4dGVybm9zXG4gKiBSdXRhOiAvY3JlYXJPcmRlblxuICogTWV0b2RvOiBQT1NUXG4gKiBIZWFkZXJzOlwiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXCJcbiAqIERhdG9zIGRlIGVudHJhZGE6IHsgcmVnaXN0cm9PcmRlbiB9XG4gKiBSZXNwdWVzdGE6IHsgbmV3T3JkZW4gfVxuICovXG5cbiBvcmRlbmVzUnV0YXMucG9zdChcIi9jcmVhck9yZGVuXCIsIGZ1bmN0aW9uKHJlcSwgcmVzKSB7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVNlY2Npb24gcGFyYSBkZXRlcm1pbmFyIGZlY2hhLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAvLyBOdWV2byBvYmpldG8gcGFyYSBkZXRlcm1pbmFyIGZlY2hhXG4gICAgbGV0IGRhdGVfb2IgPSBuZXcgRGF0ZSgpO1xuXG4gICAgLy8gY3VycmVudCBkYXRlXG4gICAgLy8gYWRqdXN0IDAgYmVmb3JlIHNpbmdsZSBkaWdpdCBkYXRlXG4gICAgbGV0IGRhdGUgPSAoXCIwXCIgKyBkYXRlX29iLmdldERhdGUoKSkuc2xpY2UoLTIpO1xuXG4gICAgLy8gY3VycmVudCBtb250aFxuICAgIGxldCBtb250aCA9IChcIjBcIiArIChkYXRlX29iLmdldE1vbnRoKCkgKyAxKSkuc2xpY2UoLTIpO1xuXG4gICAgLy8gY3VycmVudCB5ZWFyXG4gICAgbGV0IHllYXIgPSBkYXRlX29iLmdldEZ1bGxZZWFyKCk7XG5cbiAgICAvLyBjdXJyZW50IGhvdXJzXG4gICAgbGV0IGhvdXJzID0gZGF0ZV9vYi5nZXRIb3VycygpO1xuXG4gICAgLy8gY3VycmVudCBtaW51dGVzXG4gICAgbGV0IG1pbnV0ZXMgPSBkYXRlX29iLmdldE1pbnV0ZXMoKTtcblxuICAgIC8vIGN1cnJlbnQgc2Vjb25kc1xuICAgIGxldCBzZWNvbmRzID0gZGF0ZV9vYi5nZXRTZWNvbmRzKCk7XG5cbiAgICAvLyBwcmludHMgZGF0ZSAmIHRpbWUgaW4gWVlZWS1NTS1ERCBISDpNTTpTUyBmb3JtYXRcbiAgICBjb25zdCBkZWZEYXRlID0geWVhciArIFwiLVwiICsgbW9udGggKyBcIi1cIiArIGRhdGUgKyBcIiBcIiArIGhvdXJzICsgXCI6XCIgKyBtaW51dGVzICsgXCI6XCIgKyBzZWNvbmRzXG4gICAgY29uc29sZS5sb2coeWVhciArIFwiLVwiICsgbW9udGggKyBcIi1cIiArIGRhdGUgKyBcIiBcIiArIGhvdXJzICsgXCI6XCIgKyBtaW51dGVzICsgXCI6XCIgKyBzZWNvbmRzKTtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tU2VjY2lvbiBwYXJhIGRldGVybWluYXIgZmVjaGEtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cbiAgICAvLyBTZSByZWNpYmUgdW4ganNvbiBjb24gdG9kYSBsYSBpbmZvcm1hY2lvbiByZXNwZWN0aXZhIHBhcmEgY3JlYXIgdW5hIG51ZXZhIG9yZGVuXG4gICAgY29uc3QgeyB0ZWxlZm9ubywgYXJ0LCBoZWlnaHQsIHdpZHRoLCBsZW5ndGgsIHdlaWdodCwgb3JpZ2VuLCBkZXN0aW5vLCBkZXNjciB9ID0gcmVxLmJvZHk7XG5cblxuICAgIG9yZGVuTW9kZWwuZmluZCh7fSwgKGVycm9yLCBvcmRlcikgPT4geyBcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoeyBlc3RhZG86IFwiZXJyb3JcIiwgbXNnOiBcIkVSUk9SOiBhbCBidXNjYXIgb3JkZW5lcy5cIiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG9yZGVycyA9IG9yZGVyLm1hcChvID0+IG8pO1xuICAgICAgICAgICAgLy8gU2UgdmVyaWZpY2EgcXVlIHNlIGhheWFuIHJlZ2lzdHJhZG8gbGFzIG9yZGVuZXMgZW4gZWwgYXJyYXlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG9yZGVycyk7XG5cbiAgICAgICAgICAgIC8vIFNlIGhhY2UgdW4gbG9vcCBwYXJhIGRldGVybWluYXIgZWwgdmFsb3IgZGUgbGEgdWx0aW1hIG9yZGVuXG4gICAgICAgICAgICBsZXQgbGFzdCA9IDA7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgb3JkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IG9yZGVyc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdCA8PSBvYmoub3JkZXJfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdCArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNlIGFzaWduYSB1biBudWV2byBudW1lcm8gZGUgb3JkZW5cbiAgICAgICAgICAgIGNvbnN0IG9yZGVySWQgPSBsYXN0ICsgMTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG9yZGVySWQpXG4gIFxuXG4gICAgICAgICAgICAvLyBTZSBoYWNlIHVuYSBidXNxdWVkYSBkZWwgZG9jdW1lbnRvIHBhcmEgdmVyIHNpIHlhIGV4aXN0ZVxuICAgICAgICAgICAgb3JkZW5Nb2RlbC5maW5kT25lKHtvcmRlcl9pZDogb3JkZXJJZH0sIGZ1bmN0aW9uIChlcnJvciwgb2xkT3JkZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zZW5kKHsgZXN0YWRvOiBcImVycm9yXCIsIG1zZzogXCJFUlJPUjogYWwgYnVzY2FyIG9yZGVuXCIgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZE9yZGVyICE9PSBudWxsICYmIG9sZE9yZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuc2VuZCh7IGVzdGFkbzogXCJva1wiLCBtc2c6IFwiRXJyb3I6IExhIG9yZGVuIHlhIHNlIGVuY3VlbnRyYSByZWdpc3RyYWRhIGVuIGVsIHNpc3RlbWEuXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tTW9kdWxvIHBhcmEgY2FsY3VsYXIgcHJlY2lvIGEgcGFnYXItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIHB1ZXJ0b01vZGVsLmZpbmQoeyBub21icmVfcHVlcnRvOiB7JGluOiBbb3JpZ2VuLCBkZXN0aW5vXSB9IH0sIChlcnJvciwgcG9ydCkgPT4geyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zZW5kKHsgZXN0YWRvOiBcImVycm9yXCIsIG1zZzogXCJFcnJvcjogVW5vIGRlIGxvcyBwdWVydG9zIG5vIGFwYXJlY2UgcmVnaXN0cmFkbyBlbiBudWVzdHJvIHNpc3RlbWEuXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9ydHMgPSBwb3J0Lm1hcChwID0+IHApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZSB2ZXJpZmljYSBxdWUgc2UgaGF5YW4gcmVnaXN0cmFkbyBhbWJvcyBwdWVydG9zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHBvcnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2Ugc3VtYW4gbGFzIGRpc3RhbmNpYXMgZGUgYW1ib3MgcHVlcnRvcyBwYXJhIGRldGVybWluYXIgZWwgdmFsb3IgYSBwYWdhclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXN0YW5jaWEgPSBwb3J0c1swXS5kaXN0YW5jaWEgKyBwb3J0c1sxXS5kaXN0YW5jaWE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlIHZlcmlmaWNhIHF1ZSBzZSBoYXlhIHN1bWFkbyBsYSBkaXN0YW5jaWFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGlzdGFuY2lhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2UgYnVzY2EgZWwgdmFsb3IgZGUgbGEgbWlsbGEgYWN0dWFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ01vZGVsLmZpbmQoe30sIChlcnJvciwgbWlsbGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuc2VuZCh7IGVzdGFkbzogXCJlcnJvclwiLCBtc2c6IFwiTm8gc2UgcHVkbyB2YWxpZGFyIGVsIHByZWNpbyBhIHBhZ2FyLlwiIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtaWxsYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2UgY2FsY3VsYSBlbCB2YWxvciBlbiBwZXNvcyBzZWd1biBsYSB0YXNhIGRlbCBkb2xhciBtYW5pZmVzdGFkYSBhbCBpbmljaW8gZGVsIGFyY2hpdm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwZXNvcyA9IG1pbGxhWzBdLnZhbG9yICogdGFzYURvbGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNlIGRldGVybWluYSBlbCBwcmVjaW8gdG90YWwgYSBjYW5jZWxhciBlbiBwZXNvcyBzZWd1biBsYSBkaXN0YW5jaWEgZGUgYW1ib3MgcHVlcnRvc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZWNpbyA9IHBlc29zICogZGlzdGFuY2lhO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLU1vZHVsbyBwYXJhIGNyZWFyIG51ZXZhIG9yZGVuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZSBjcmVhIHVuYSBudWV2YSBvcmRlbiBjb24gdW5hIGluc3RhbmNpYSBkZWwgbW9kZWxvIGRlIG9yZGVuIHkgc2UgbGUgYWdyZWdhIHRvZGEgbGEgaW5mb3JtYWNpb24gcXVlIHZpZW5lIGRlbCBmcm9udFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld09yZGVyID0gbmV3IG9yZGVuTW9kZWwoIHtvcmRlcl9pZDogb3JkZXJJZCwgZmVjaGFfb3JpZ2VuX29yZGVuOiBkZWZEYXRlLCBub21icmVfY29udGVuZWRvcjogYXJ0LCBkZXNjcmlwY2lvbl9jb250ZW5lZG9yOiBkZXNjciwgcGVzb19jb250ZW5lZG9yOiB3ZWlnaHQsIGFuY2hvX2NvbnRlbmVkb3I6IHdpZHRoLCBhbHRvX2NvbnRlbmVkb3I6IGhlaWdodCwgbGFyZ29fY29udGVuZWRvcjogbGVuZ3RoLCBwdWVydG9fb3JpZ2VuOiBvcmlnZW4sIHB1ZXJ0b19kZXN0aW5vOiBkZXN0aW5vLCBlc3RhZG9fb3JkZW46IFwiUHJlcGFyYW5kbyBwYXJhIEVtYmFyY2FyXCIsY29zdG86IHByZWNpbywgdXN1YXJpbzogdGVsZWZvbm99KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhuZXdPcmRlcikgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3T3JkZXIuc2F2ZShmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoeyBlc3RhZG86IFwiZXJyb3JcIiwgbXNnOiBcIkVSUk9SOiBBbCByZWdpc3RyYXIgbnVldmEgb3JkZW4uXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoeyBlc3RhZG86IFwib2tcIiwgbXNnOiBgT3JkZW4gY3JlYWRhIGV4aXRvc2FtZW50ZSBjb24gSUQgbsO6bWVybyAke29yZGVySWR9LiBFbiBicmV2ZSBsbyBlc3RhcmVtb3MgY29udGFjdGFuZG8gcGFyYSBvZnJlY2VybGUgbcOhcyBkZXRhbGxlcyBkZSBzdSBvcmRlbi4gTXVjaGFzIGdyYWNpYXMgcG9yIHVzYXIgbnVlc3RybyBzZXJ2aWNpby5gIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSk7XG59KVxuXG5cbi8qKlxuICogQVBJIFJlc3QgTW9kdWxvIGRlIGJ1c3F1ZWRhIGRlIG9yZGVuZXNcbiAqIERlc2NyaXBjaW9uOiBCdXNjYSBsYXMgb3JkZW5lc1xuICogUnV0YTogL2xpc3Rhck9yZGVuRGV0YWxsZS8/aWRfb3JkZW49MTAwMlxuICogTWV0b2RvOiBHRVRcbiAqIEhlYWRlcnM6XCJDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cIlxuICogRGF0b3MgZGUgcmVzcHVlc3RhOiB7IG9yZGVuRGV0YWxsZSB9XG4gKi9cblxuIG9yZGVuZXNSdXRhcy5nZXQoXCIvbGlzdGFyT3JkZW5EZXRhbGxlLzpvcmRlblwiLCBmdW5jdGlvbihyZXEsIHJlcykge1xuICAgIFxuICAgIC8qIENvZGlnbyBwYXJhIGRhdG9zIGFsbWFjZW5hZG9zIGxvY2FsbWVudGVcbiAgICBjb25zdCBudW1lcm8gPSByZXEucGFyYW1zLm9yZGVuO1xuICAgIC8vY29uc29sZS5sb2cobnVtZXJvKTtcbiAgICBjb25zdCBvcmRlbiA9IG9yZGVuZXMuZmluZChvID0+IG8uaWRfb3JkZW4gPT09IHBhcnNlSW50KG51bWVybykpO1xuICAgIGlmIChvcmRlbiAhPSBudWxsICYmIG9yZGVuICE9IHVuZGVmaW5lZCkge1xuICAgICAgICByZXMuc2VuZCh7IGVzdGFkbzogXCJva1wiLCBtc2c6IFwiT3JkZW4gZW5jb250cmFkYSBjb24gw6l4aXRvLlwiLCBvcmRlbiB9KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcy5zZW5kKHsgZXN0YWRvOiBcImVycm9yXCIsIG1zZzogXCJObyBzZSBlbmNvbnRyw7MgbGEgb3JkZW4gc29saWNpdGFkYVwiIH0pXG4gICAgfVxuICAgICovXG4gICAvLyBTZSBvYnRpZW5lIGVsIHBhcmFtZXRybyBkZSBsYSBydXRhXG4gICAgY29uc3QgbnVtZXJvID0gcGFyc2VJbnQocmVxLnBhcmFtcy5vcmRlbik7XG5cbiAgICBvcmRlbk1vZGVsLmZpbmRPbmUoe29yZGVyX2lkOiBudW1lcm99LCBmdW5jdGlvbihlcnJvciwgb3JkZW4pIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoeyBlc3RhZG86IFwiZXJyb3JcIiwgbXNnOiBcIk5vIHNlIGVuY29udHLDsyBsYSBvcmRlbiBzb2xpY2l0YWRhLlwiIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3JkZW4gIT0gbnVsbCAmJiBvcmRlbiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXMuc2VuZCh7IGVzdGFkbzogXCJva1wiLCBtc2c6IFwiT3JkZW4gZW5jb250cmFkYSBjb24gw6l4aXRvLlwiLCBvcmRlbiB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXMuc2VuZCh7IGVzdGFkbzogXCJlcnJvclwiLCBtc2c6IFwiTm8gc2UgZW5jb250csOzIGxhIG9yZGVuIHNvbGljaXRhZGFcIiB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSlcbn0pXG5cblxuLyoqXG4gKiBBUEkgUmVzdCBNb2R1bG8gZGUgZXN0YWRvIGRlIG9yZGVuZXNcbiAqIERlc2NyaXBjaW9uOiBJbmRpY2EgZWwgZXN0YWRvIGRlIGxhcyBvcmRlbmVzXG4gKiBSdXRhOiAvbGlzdGFyT3JkZW4vP2VzdGFkbz1GaW5hbGl6YWRhXG4gKiBNZXRvZG86IEdFVFxuICogSGVhZGVyczpcIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblwiXG4gKiBEYXRvcyBkZSByZXNwdWVzdGE6IHsgZXN0YWRvcyB9XG4gKi9cblxub3JkZW5lc1J1dGFzLnBvc3QoXCIvbGlzdGFyT3JkZW4vZmFjdHVyYVwiLCBmdW5jdGlvbihyZXEsIHJlcykge1xuXG4gICAgb3JkZW5Nb2RlbC5maW5kKHt9LCAoZXJyb3IsIG9yZGVyKSA9PiB7IFxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc2VuZCh7IGVzdGFkbzogXCJlcnJvclwiLCBtc2c6IFwiRVJST1I6IGFsIGJ1c2NhciBvcmRlbmVzLlwiIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgb3JkZXJzID0gb3JkZXIubWFwKG8gPT4gbyk7XG4gICAgICAgICAgICAvLyBTZSB2ZXJpZmljYSBxdWUgc2UgaGF5YW4gcmVnaXN0cmFkbyBsYXMgb3JkZW5lcyBlbiBlbCBhcnJheVxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhvcmRlcnMpO1xuXG4gICAgICAgICAgICAvLyBTZSBoYWNlIHVuIGxvb3AgcGFyYSBkZXRlcm1pbmFyIGVsIHZhbG9yIGRlIGxhIHVsdGltYSBvcmRlblxuICAgICAgICAgICAgbGV0IGxhc3QgPSAwO1xuICAgICAgICAgICAgbGV0IGZpbmFsT3JkZXI7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgb3JkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IG9yZGVyc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdCA8PSBvYmoub3JkZXJfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdCArPSAxO1xuICAgICAgICAgICAgICAgICAgICBmaW5hbE9yZGVyID0gb2JqO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNlIGFzaWduYSB1biBudWV2byBudW1lcm8gZGUgb3JkZW5cbiAgICAgICAgICAgIGNvbnN0IG9yZGVySWQgPSBsYXN0O1xuICAgICAgICAgICAgY29uc29sZS5sb2cob3JkZXJJZClcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGZpbmFsT3JkZXIpXG4gICAgICAgICAgICByZXMuc2VuZCh7IGVzdGFkbzogXCJva1wiLCBtc2c6IFwiVWx0aW1hIG9yZGVuIGVuY29udHJhZGFcIiwgZGF0YTogW2ZpbmFsT3JkZXJdIH0pO1xuICAgICAgICB9XG4gICAgfSlcbn0pXG5cblxuLyoqXG4gKiBBUEkgUmVzdCBNb2R1bG8gZGUgbGlzdGFyIMOzcmRlbmVzXG4gKiBEZXNjcmlwY2lvbjogQnVzY2FyIGxhcyDDs3JkZW5lcyB5IG11ZXN0cmEgdG9kYSBsYSBpbmZvcm1hY2nDs24gZGUgZWxsYXNcbiAqIFJ1dGE6IC9saXN0YXJPcmRlblxuICogTWV0b2RvOiBHRVRcbiAqIEhlYWRlcnM6XCJDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cIlxuICogRGF0b3MgZGUgcmVzcHVlc3RhOiB7IG9yZGVuZXMgfVxuICovXG5cbiBvcmRlbmVzUnV0YXMucG9zdChcIi9saXN0YXJPcmRlbi86dXNlclwiLCBmdW5jdGlvbihyZXEsIHJlcykge1xuICAgIFxuICAgIC8qIENvZGlnbyBwYXJhIGRhdG9zIGFsbWFjZW5hZG9zIGxvY2FsbWVudGVcbiAgICAvL2NvbnNvbGUubG9nKHB1ZXJ0b3MpO1xuICAgIHJlcy5zZW5kKHsgZXN0YWRvOiBcIm9rXCIsIGRhdGE6IG9yZGVuZXMgfSlcbiAgICAqL1xuXG4gICAgY29uc3QgdXNlcm5hbWUgPSByZXEucGFyYW1zLnVzZXI7XG5cbiAgICBvcmRlbk1vZGVsLmZpbmQoe3VzdWFyaW86IHVzZXJuYW1lfSwgZnVuY3Rpb24oZXJyb3IsIG9yZGVuZXMpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoeyBlc3RhZG86IFwiZXJyb3JcIiwgbXNnOiBcIk5vIHNlIGVuY29udHJhcm9uIMOzcmRlbmVzLlwiIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3JkZW5lcyAhPSBudWxsICYmIG9yZGVuZXMgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzLnNlbmQoeyBlc3RhZG86IFwib2tcIiwgbXNnOiBcIk9yZGVuZXMgZW5jb250cmFkYXMgY29uIMOpeGl0by5cIiwgZGF0YTogb3JkZW5lcyB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXMuc2VuZCh7IGVzdGFkbzogXCJlcnJvclwiLCBtc2c6IFwiTm8gc2UgZW5jb250cmFyb24gw7NyZGVuZXMuXCIgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pXG59KVxuXG5cblxuLyoqXG4gKiBBUEkgUmVzdCBNb2R1bG8gZGUgZWRpdGFyIMOzcmRlbmVzXG4gKiBEZXNjcmlwY2lvbjogQWN0dWFsaXphIGxhIGluZm9ybWFjacOzbiBkZSBsYXMgw7NyZGVuZXMgeWEgY3JlYWRhc1xuICogUnV0YTogL2VkaXRhck9yZGVuXG4gKiBNZXRvZG86IFBPU1RcbiAqIEhlYWRlcnM6XCJDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cIlxuICogRGF0b3MgZGUgZW50cmFkYTogeyBlZGl0YXJPcmRlbiB9XG4gKiBEYXRvcyBkZSByZXNwdWVzdGE6IHsgb3JkZW5VcGRhdGUgfVxuICovXG5cbm9yZGVuZXNSdXRhcy5wb3N0KFwiL2VkaXRhck9yZGVuXCIsIGZ1bmN0aW9uKHJlcSwgcmVzKSB7XG5cbi8qIENvZGlnbyBwYXJhIGRhdG9zIGFsbWFjZW5hZG9zIGxvY2FsbWVudGVcbiAgICAvLyBEZXNlc3RydWN0dXJhY2lvblxuICAgIGNvbnN0IHtudW1lcm8sIGVzdGFkbywgYXJ0LCBoZWlnaHQsIHdpZHRoLCBsZW5ndGgsIHdlaWdodCwgb3JpZ2VuLCBkZXN0aW5vLCBkZXNjcn0gPSByZXEuYm9keTtcbiAgICAvLyBTZSBoYWNlbiBsYXMgYWxlcnRhcyBwcmVkZXRlcm1pbmFkYXNcbiAgICBsZXQgYWxlcnRhID0gXCJlcnJvclwiO1xuICAgIGxldCBtZW5zYWplID0gXCJMYSBvcmRlbiBubyBzZSBlbmN1ZW50cmEgcmVnaXN0cmFkYSBlbiBudWVzdHJhIGJhc2UgZGUgZGF0b3NcIlxuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKGNvbnN0IG8gb2Ygb3JkZW5lcykge1xuICAgICAgICBpZiAoby5pZF9vcmRlbiA9PT0gbnVtZXJvKSB7XG4gICAgICAgICAgICBpZiAoby5lc3RhZG9fb3JkZW4gPT09IFwiRmluYWxpemFkYVwiIHx8IG8uZXN0YWRvX29yZGVuID09PSBcIkRlc3BhY2hhZGFcIikge1xuICAgICAgICAgICAgICAgIGFsZXJ0YSA9IFwiZXJyb3JcIlxuICAgICAgICAgICAgICAgIG1lbnNhamUgPSBcIkxhIG9yZGVuIHlhIGZ1ZSBkZXNwYWNoYWRhIHBvciBlbmRlIG5vIHNlIHB1ZWRlIGVkaXRhci5cIlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcmRlbmVzW2ldLmFydGljdWxvID0gYXJ0O1xuICAgICAgICAgICAgICAgIG9yZGVuZXNbaV0uYWx0dXJhID0gaGVpZ2h0O1xuICAgICAgICAgICAgICAgIG9yZGVuZXNbaV0uYW5jaG8gPSB3aWR0aDtcbiAgICAgICAgICAgICAgICBvcmRlbmVzW2ldLmxhcmdvID0gbGVuZ3RoO1xuICAgICAgICAgICAgICAgIG9yZGVuZXNbaV0ucGVzbyA9IHdlaWdodDtcbiAgICAgICAgICAgICAgICBvcmRlbmVzW2ldLnB1ZXJ0b19vcmlnZW4gPSBvcmlnZW47XG4gICAgICAgICAgICAgICAgb3JkZW5lc1tpXS5wdWVydG9fZGVzdGlubyA9IGRlc3Rpbm87XG4gICAgICAgICAgICAgICAgb3JkZW5lc1tpXS5kZXNjcmlwY2lvbiA9IGRlc2NyO1xuICAgICAgICAgICAgICAgIGFsZXJ0YSA9IFwib2tcIjtcbiAgICAgICAgICAgICAgICBtZW5zYWplID0gXCJPcmRlbiBlZGl0YWRhIGV4aXRvc2FtZW50ZVwiXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9ICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG4gICAgcmVzLnNlbmQoe2VzdGFkbyA6IGFsZXJ0YSwgbXNnIDogbWVuc2FqZX0pO1xuXG4gICAgKi9cblxuICAgIC8vIERlc2VzdHJ1Y3R1cmFjaW9uXG4gICAgY29uc3Qge251bWVybywgYXJ0LCBoZWlnaHQsIHdpZHRoLCBsZW5ndGgsIHdlaWdodCwgb3JpZ2VuLCBkZXN0aW5vLCBkZXNjcn0gPSByZXEuYm9keTtcblxuICAgIG9yZGVuTW9kZWwuZmluZE9uZSh7b3JkZXJfaWQ6IG51bWVyb30sIGZ1bmN0aW9uIChlcnJvciwgb2xkT3JkZXIpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoeyBlc3RhZG86IFwiZXJyb3JcIiwgbXNnOiBcIkVSUk9SOiBhbCBidXNjYXIgb3JkZW4gZHVwbGljYWRhLlwiIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG9sZE9yZGVyICE9PSBudWxsICYmIG9sZE9yZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBvcmRlbk1vZGVsLnVwZGF0ZU9uZSh7IG9yZGVyX2lkOiBudW1lcm8gfSwgeyAkc2V0OiB7IG5vbWJyZV9jb250ZW5lZG9yOiBhcnQsIGRlc2NyaXBjaW9uX2NvbnRlbmVkb3I6IGRlc2NyLCBwZXNvX2NvbnRlbmVkb3I6IHdlaWdodCwgYW5jaG9fY29udGVuZWRvcjogd2lkdGgsIGFsdG9fY29udGVuZWRvcjogaGVpZ2h0LCBsYXJnb19jb250ZW5lZG9yOiBsZW5ndGgsIHB1ZXJ0b19vcmlnZW46IG9yaWdlbiwgcHVlcnRvX2Rlc3Rpbm86IGRlc3Rpbm8gfSB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoeyBlc3RhZG86IFwiZXJyb3JcIiwgbXNnOiBcIkVSUk9SOiBBbCBlZGl0YXIgbGEgb3JkZW4uXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMuc2VuZCh7IGVzdGFkbzogXCJva1wiLCBtc2c6IFwiT3JkZW4gYWN0dWFsaXphZGEgc2F0aXNmYWN0b3JpYW1lbnRlLlwiIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IFxuICAgICAgICB9XG4gICAgfSk7XG59KTsgXG5cblxuXG4vKipcbiAqIEFQSSBSZXN0IE1vZHVsbyBkZSBhY3R1YWxpemFyIGVzdGFkb3NcbiAqIERlc2NyaXBjaW9uOiBBY3R1YWxpemEgbGEgaW5mb3JtYWNpw7NuIGRlIGxhcyDDs3JkZW5lcyB5YSBjcmVhZGFzXG4gKiBSdXRhOiAvZWRpdGFyRXN0YWRvXG4gKiBNZXRvZG86IFBPU1RcbiAqIEhlYWRlcnM6XCJDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cIlxuICogRGF0b3MgZGUgZW50cmFkYTogeyBlc3RhZG8gfVxuICogRGF0b3MgZGUgcmVzcHVlc3RhOiB7IGVzdGFkb3VwZGF0ZSB9XG4gKi9cblxub3JkZW5lc1J1dGFzLnBvc3QoXCIvZWRpdGFyRXN0YWRvXCIsIGZ1bmN0aW9uKHJlcSwgcmVzKSB7XG5cbiAgICAvLyBEZXNlc3RydWN0dXJhY2lvblxuICAgIGNvbnN0IHsgbnVtZXJvLCBuZXdFc3RhZG8gfSA9IHJlcS5ib2R5O1xuXG4gICAgb3JkZW5Nb2RlbC5maW5kT25lKHtvcmRlcl9pZDogbnVtZXJvfSwgZnVuY3Rpb24gKGVycm9yLCBvbGRPcmRlcikge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc2VuZCh7IGVzdGFkbzogXCJlcnJvclwiLCBtc2c6IFwiRVJST1I6IGFsIGJ1c2NhciBvcmRlbiBkdXBsaWNhZGEuXCIgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob2xkT3JkZXIgIT09IG51bGwgJiYgb2xkT3JkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG9yZGVuTW9kZWwudXBkYXRlT25lKHsgb3JkZXJfaWQ6IG51bWVybyB9LCB7ICRzZXQ6IHsgZXN0YWRvX29yZGVuOiBuZXdFc3RhZG8gfSB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzLnNlbmQoeyBlc3RhZG86IFwiZXJyb3JcIiwgbXNnOiBcIkVSUk9SOiBBbCBlZGl0YXIgZWwgZXN0YWRvIGRlIGxhIG9yZGVuLlwiIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnNlbmQoeyBlc3RhZG86IFwib2tcIiwgbXNnOiBcIkVzdGFkbyBhY3R1YWxpemFkbyBzYXRpc2ZhY3RvcmlhbWVudGUuXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gXG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyBcblxuXG5cbmV4cG9ydHMub3JkZW5lc1J1dGFzID0gb3JkZW5lc1J1dGFzOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "ordenesRutas.js"
      ],
      "names": [
        "Router",
        "require",
        "ordenesRutas",
        "ordenModel",
        "puertoModel",
        "configModel",
        "compare",
        "sign",
        "registroOrden",
        "newOrden",
        "ordenDetalle",
        "estados",
        "ordenes",
        "editarOrden",
        "ordenUpdate",
        "tasaDolar",
        "post",
        "req",
        "res",
        "date_ob",
        "Date",
        "date",
        "getDate",
        "slice",
        "month",
        "getMonth",
        "year",
        "getFullYear",
        "hours",
        "getHours",
        "minutes",
        "getMinutes",
        "seconds",
        "getSeconds",
        "defDate",
        "console",
        "log",
        "user",
        "art",
        "height",
        "width",
        "length",
        "weight",
        "origen",
        "destino",
        "descr",
        "body",
        "find",
        "error",
        "order",
        "send",
        "estado",
        "msg",
        "orders",
        "map",
        "o",
        "last",
        "i",
        "obj",
        "order_id",
        "orderId",
        "findOne",
        "oldOrder",
        "undefined",
        "nombre_puerto",
        "$in",
        "port",
        "ports",
        "p",
        "distancia",
        "milla",
        "pesos",
        "valor",
        "precio",
        "newOrder",
        "fecha_origen_orden",
        "nombre_contenedor",
        "descripcion_contenedor",
        "peso_contenedor",
        "ancho_contenedor",
        "alto_contenedor",
        "largo_contenedor",
        "puerto_origen",
        "puerto_destino",
        "estado_orden",
        "costo",
        "usuario",
        "save",
        "telefono",
        "get",
        "numero",
        "parseInt",
        "params",
        "orden",
        "finalOrder",
        "data",
        "username",
        "updateOne",
        "$set",
        "newEstado",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/",
      "sourcesContent": [
        "const { Router } = require(\"express\");\nconst ordenesRutas = Router();\nconst { ordenModel } = require(\"../modelos/orden\");\nconst { puertoModel } = require(\"../modelos/puerto\");\nconst { configModel } = require(\"../modelos/configuracion\");\nconst { compare } = require(\"bcryptjs\");\nconst { sign } = require(\"jsonwebtoken\");\n//const { userGuard } = require(\"../guards/userGuard\");\n\nconst { registroOrden, newOrden, ordenDetalle, estados, ordenes, editarOrden, ordenUpdate } = require(\"../datos\");\n\nconst tasaDolar = 4000;\n\n\n\n/**\n * API Rest Modulo de registro de Ã³rdenes\n * Descripcion: Registra las ordenes de los usuarios\n * Ruta: /registrarOrden\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { registroOrden }\n * Respuesta: { newOrden }\n */\n\n ordenesRutas.post(\"/registrarOrden\", function(req, res) {\n\n/* Codigo para realizar registro de orden de manera local\n\n    // Se recibe un json con toda la informacion respectiva para crear una nueva orden\n    const { art, height, width, length, weight, origen, destino, descr } = req.body;\n    // Se hace un loop para determinar el valor de la ultima orden\n    let last = 0;\n    for(var i = 0; i < ordenes.length; i++) {\n        var obj = ordenes[i];\n        if (last <= obj.id_orden) {\n            last += 1;\n        }\n    }\n    // Se asigna un nuevo numero de orden\n    const orderId = last + 1;\n    // Se compara una ultima vez si existe el numero de orden\n    const lastID = ordenes.find(o => o.id_orden === orderId);\n    // Si la orden ya existe envia una alerta \n    if (lastID != null && lastID != undefined) {\n        res.send({estado : \"error\", msg : \"Ya existe una orden registrada.\"});\n    } else { // de lo contrario:\n        // Se crea una variable newOrder donde a cada Key se le asigna los valores que vienen del json del front end\n        const newOrder = {id_orden: orderId, articulo: art, largo: length, ancho: width, alto: height, peso: weight, puerto_origen: origen, puerto_destino: destino, Descripcion: descr, estado_orden: \"preparando para Embarcar\" };\n        // Se agrega la nueva orden a base de datos\n        ordenes.push(newOrder);\n        // Se confirma que se estan recibiendo todos los datos correspondientes\n        // console.log(ordenes);\n        // Se envia estado y mensaje al front end para confirmar que la orden fue creada con un ID, que se le entrega al usuario\n        res.send({estado : \"ok\", msg : `Orden creada exitosamente con ID nÃºmero ${orderId}. En la pÃ¡gina de inicio podrÃ¡ encontrar mÃ¡s detalles de su orden. Muchas gracias por usar nuestro servicio.`});\n\n    }\n*/\n\n/* ------------------------------------------------------Seccion para determinar fecha---------------------------------------------------------------*/\n    // Nuevo objeto para determinar fecha\n    let date_ob = new Date();\n\n    // current date\n    // adjust 0 before single digit date\n    let date = (\"0\" + date_ob.getDate()).slice(-2);\n\n    // current month\n    let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n\n    // current year\n    let year = date_ob.getFullYear();\n\n    // current hours\n    let hours = date_ob.getHours();\n\n    // current minutes\n    let minutes = date_ob.getMinutes();\n\n    // current seconds\n    let seconds = date_ob.getSeconds();\n\n    // prints date & time in YYYY-MM-DD HH:MM:SS format\n    const defDate = year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds\n    console.log(year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds);\n\n/* ------------------------------------------------------Seccion para determinar fecha---------------------------------------------------------------*/\n\n\n    // Se recibe un json con toda la informacion respectiva para crear una nueva orden\n    const { user, art, height, width, length, weight, origen, destino, descr } = req.body;\n\n\n    ordenModel.find({}, (error, order) => { \n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar ordenes.\" });\n        } else {\n            const orders = order.map(o => o);\n            // Se verifica que se hayan registrado las ordenes en el array\n            console.log(orders);\n\n            // Se hace un loop para determinar el valor de la ultima orden\n            let last = 0;\n            for(var i = 0; i < orders.length; i++) {\n                var obj = orders[i];\n                if (last <= obj.order_id) {\n                    last += 1;\n                }\n            }\n            // Se asigna un nuevo numero de orden\n            const orderId = last + 1;\n            console.log(orderId)\n  \n\n            // Se hace una busqueda del documento para ver si ya existe\n            ordenModel.findOne({order_id: orderId}, function (error, oldOrder) {\n                if (error) {\n                    return res.send({ estado: \"error\", msg: \"ERROR: al buscar orden\" });\n                } else {\n                    if (oldOrder !== null && oldOrder !== undefined) {\n                        return res.send({ estado: \"ok\", msg: \"Error: La orden ya se encuentra registrada en el sistema.\" });\n                    } else {\n/*--------------------------------------------------------Modulo para calcular precio a pagar-------------------------------------------------------*/\n                        puertoModel.find({ nombre_puerto: {$in: [origen, destino] } }, (error, port) => { \n                            if (error) {\n                                return res.send({ estado: \"error\", msg: \"Error: Uno de los puertos no aparece registrado en nuestro sistema.\" });\n                            } else {\n                                const ports = port.map(p => p);\n                                // Se verifica que se hayan registrado ambos puertos\n                                console.log(ports);\n                                // Se suman las distancias de ambos puertos para determinar el valor a pagar\n                                const distancia = ports[0].distancia + ports[1].distancia;\n                                // Se verifica que se haya sumado la distancia\n                                console.log(distancia);\n                                // Se busca el valor de la milla actual\n                                configModel.find({}, (error, milla) => {\n                                    if (error) {\n                                        return res.send({ estado: \"error\", msg: \"No se pudo validar el precio a pagar.\" });\n                                    } else {\n                                        console.log(milla);\n                                        // Se calcula el valor en pesos segun la tasa del dolar manifestada al inicio del archivo\n                                        const pesos = milla[0].valor * tasaDolar;\n                                        // Se determina el precio total a cancelar en pesos segun la distancia de ambos puertos\n                                        const precio = pesos * distancia;\n\n/*------------------------------------------------------------Modulo para crear nueva orden---------------------------------------------------------*/\n                                        // Se crea una nueva orden con una instancia del modelo de orden y se le agrega toda la informacion que viene del front\n                                        const newOrder = new ordenModel( {order_id: orderId, fecha_origen_orden: defDate, nombre_contenedor: art, descripcion_contenedor: descr, peso_contenedor: weight, ancho_contenedor: width, alto_contenedor: height, largo_contenedor: length, puerto_origen: origen, puerto_destino: destino, estado_orden: \"Preparando para Embarcar\",costo: precio, usuario: user});\n                                        console.log(newOrder)                         \n                                        newOrder.save(function (error) {\n                                            if (error) {\n                                                return res.send({ estado: \"error\", msg: \"ERROR: Al registrar nueva orden.\" });\n                                            } else {\n                                                return res.send({ estado: \"ok\", msg: `Orden creada exitosamente con ID nÃºmero ${orderId}. En la pÃ¡gina de inicio podrÃ¡ encontrar mÃ¡s detalles de su orden. Muchas gracias por usar nuestro servicio.` });\n                                            }\n                                        });\n                                    }\n                                })\n                            }\n                        });   \n                    }\n                }\n            })\n        }\n    });\n})\n\n/**\n * API Rest Modulo de creaciÃ³n de Ã³rdenes por usuarios externos\n * Descripcion: Registra las ordenes de los usuarios externos\n * Ruta: /crearOrden\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { registroOrden }\n * Respuesta: { newOrden }\n */\n\n ordenesRutas.post(\"/crearOrden\", function(req, res) {\n\n/* ------------------------------------------------------Seccion para determinar fecha---------------------------------------------------------------*/\n    // Nuevo objeto para determinar fecha\n    let date_ob = new Date();\n\n    // current date\n    // adjust 0 before single digit date\n    let date = (\"0\" + date_ob.getDate()).slice(-2);\n\n    // current month\n    let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n\n    // current year\n    let year = date_ob.getFullYear();\n\n    // current hours\n    let hours = date_ob.getHours();\n\n    // current minutes\n    let minutes = date_ob.getMinutes();\n\n    // current seconds\n    let seconds = date_ob.getSeconds();\n\n    // prints date & time in YYYY-MM-DD HH:MM:SS format\n    const defDate = year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds\n    console.log(year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds);\n\n/* ------------------------------------------------------Seccion para determinar fecha---------------------------------------------------------------*/\n\n\n    // Se recibe un json con toda la informacion respectiva para crear una nueva orden\n    const { telefono, art, height, width, length, weight, origen, destino, descr } = req.body;\n\n\n    ordenModel.find({}, (error, order) => { \n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar ordenes.\" });\n        } else {\n            const orders = order.map(o => o);\n            // Se verifica que se hayan registrado las ordenes en el array\n            console.log(orders);\n\n            // Se hace un loop para determinar el valor de la ultima orden\n            let last = 0;\n            for(var i = 0; i < orders.length; i++) {\n                var obj = orders[i];\n                if (last <= obj.order_id) {\n                    last += 1;\n                }\n            }\n            // Se asigna un nuevo numero de orden\n            const orderId = last + 1;\n            console.log(orderId)\n  \n\n            // Se hace una busqueda del documento para ver si ya existe\n            ordenModel.findOne({order_id: orderId}, function (error, oldOrder) {\n                if (error) {\n                    return res.send({ estado: \"error\", msg: \"ERROR: al buscar orden\" });\n                } else {\n                    if (oldOrder !== null && oldOrder !== undefined) {\n                        return res.send({ estado: \"ok\", msg: \"Error: La orden ya se encuentra registrada en el sistema.\" });\n                    } else {\n/*--------------------------------------------------------Modulo para calcular precio a pagar-------------------------------------------------------*/\n                        puertoModel.find({ nombre_puerto: {$in: [origen, destino] } }, (error, port) => { \n                            if (error) {\n                                return res.send({ estado: \"error\", msg: \"Error: Uno de los puertos no aparece registrado en nuestro sistema.\" });\n                            } else {\n                                const ports = port.map(p => p);\n                                // Se verifica que se hayan registrado ambos puertos\n                                console.log(ports);\n                                // Se suman las distancias de ambos puertos para determinar el valor a pagar\n                                const distancia = ports[0].distancia + ports[1].distancia;\n                                // Se verifica que se haya sumado la distancia\n                                console.log(distancia);\n                                // Se busca el valor de la milla actual\n                                configModel.find({}, (error, milla) => {\n                                    if (error) {\n                                        return res.send({ estado: \"error\", msg: \"No se pudo validar el precio a pagar.\" });\n                                    } else {\n                                        console.log(milla);\n                                        // Se calcula el valor en pesos segun la tasa del dolar manifestada al inicio del archivo\n                                        const pesos = milla[0].valor * tasaDolar;\n                                        // Se determina el precio total a cancelar en pesos segun la distancia de ambos puertos\n                                        const precio = pesos * distancia;\n\n/*------------------------------------------------------------Modulo para crear nueva orden---------------------------------------------------------*/\n                                        // Se crea una nueva orden con una instancia del modelo de orden y se le agrega toda la informacion que viene del front\n                                        const newOrder = new ordenModel( {order_id: orderId, fecha_origen_orden: defDate, nombre_contenedor: art, descripcion_contenedor: descr, peso_contenedor: weight, ancho_contenedor: width, alto_contenedor: height, largo_contenedor: length, puerto_origen: origen, puerto_destino: destino, estado_orden: \"Preparando para Embarcar\",costo: precio, usuario: telefono});\n                                        console.log(newOrder)                         \n                                        newOrder.save(function (error) {\n                                            if (error) {\n                                                return res.send({ estado: \"error\", msg: \"ERROR: Al registrar nueva orden.\" });\n                                            } else {\n                                                return res.send({ estado: \"ok\", msg: `Orden creada exitosamente con ID nÃºmero ${orderId}. En breve lo estaremos contactando para ofrecerle mÃ¡s detalles de su orden. Muchas gracias por usar nuestro servicio.` });\n                                            }\n                                        });\n                                    }\n                                })\n                            }\n                        });   \n                    }\n                }\n            })\n        }\n    });\n})\n\n\n/**\n * API Rest Modulo de busqueda de ordenes\n * Descripcion: Busca las ordenes\n * Ruta: /listarOrdenDetalle/?id_orden=1002\n * Metodo: GET\n * Headers:\"Content-Type: application/json\"\n * Datos de respuesta: { ordenDetalle }\n */\n\n ordenesRutas.get(\"/listarOrdenDetalle/:orden\", function(req, res) {\n    \n    /* Codigo para datos almacenados localmente\n    const numero = req.params.orden;\n    //console.log(numero);\n    const orden = ordenes.find(o => o.id_orden === parseInt(numero));\n    if (orden != null && orden != undefined) {\n        res.send({ estado: \"ok\", msg: \"Orden encontrada con Ã©xito.\", orden })\n    } else {\n        res.send({ estado: \"error\", msg: \"No se encontrÃ³ la orden solicitada\" })\n    }\n    */\n   // Se obtiene el parametro de la ruta\n    const numero = parseInt(req.params.orden);\n\n    ordenModel.findOne({order_id: numero}, function(error, orden) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"No se encontrÃ³ la orden solicitada.\" })\n        } else {\n            if (orden != null && orden != undefined) {\n                res.send({ estado: \"ok\", msg: \"Orden encontrada con Ã©xito.\", orden })\n            } else {\n                res.send({ estado: \"error\", msg: \"No se encontrÃ³ la orden solicitada\" })\n            }\n        }\n    })\n})\n\n\n/**\n * API Rest Modulo de estado de ordenes\n * Descripcion: Indica el estado de las ordenes\n * Ruta: /listarOrden/?estado=Finalizada\n * Metodo: GET\n * Headers:\"Content-Type: application/json\"\n * Datos de respuesta: { estados }\n */\n\nordenesRutas.post(\"/listarOrden/factura\", function(req, res) {\n\n    ordenModel.find({}, (error, order) => { \n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar ordenes.\" });\n        } else {\n            const orders = order.map(o => o);\n            // Se verifica que se hayan registrado las ordenes en el array\n            //console.log(orders);\n\n            // Se hace un loop para determinar el valor de la ultima orden\n            let last = 0;\n            let finalOrder;\n            for(var i = 0; i < orders.length; i++) {\n                var obj = orders[i];\n                if (last <= obj.order_id) {\n                    last += 1;\n                    finalOrder = obj;\n                }\n            }\n            // Se asigna un nuevo numero de orden\n            const orderId = last;\n            console.log(orderId)\n            console.log(finalOrder)\n            res.send({ estado: \"ok\", msg: \"Ultima orden encontrada\", data: [finalOrder] });\n        }\n    })\n})\n\n\n/**\n * API Rest Modulo de listar Ã³rdenes\n * Descripcion: Buscar las Ã³rdenes y muestra toda la informaciÃ³n de ellas\n * Ruta: /listarOrden\n * Metodo: GET\n * Headers:\"Content-Type: application/json\"\n * Datos de respuesta: { ordenes }\n */\n\n ordenesRutas.post(\"/listarOrden/:user\", function(req, res) {\n    \n    /* Codigo para datos almacenados localmente\n    //console.log(puertos);\n    res.send({ estado: \"ok\", data: ordenes })\n    */\n\n    const username = req.params.user;\n\n    ordenModel.find({usuario: username}, function(error, ordenes) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"No se encontraron Ã³rdenes.\" })\n        } else {\n            if (ordenes != null && ordenes != undefined) {\n                res.send({ estado: \"ok\", msg: \"Ordenes encontradas con Ã©xito.\", data: ordenes })\n            } else {\n                res.send({ estado: \"error\", msg: \"No se encontraron Ã³rdenes.\" })\n            }\n        }\n    })\n})\n\n\n\n/**\n * API Rest Modulo de editar Ã³rdenes\n * Descripcion: Actualiza la informaciÃ³n de las Ã³rdenes ya creadas\n * Ruta: /editarOrden\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { editarOrden }\n * Datos de respuesta: { ordenUpdate }\n */\n\nordenesRutas.post(\"/editarOrden\", function(req, res) {\n\n/* Codigo para datos almacenados localmente\n    // Desestructuracion\n    const {numero, estado, art, height, width, length, weight, origen, destino, descr} = req.body;\n    // Se hacen las alertas predeterminadas\n    let alerta = \"error\";\n    let mensaje = \"La orden no se encuentra registrada en nuestra base de datos\"\n    let i = 0;\n    for (const o of ordenes) {\n        if (o.id_orden === numero) {\n            if (o.estado_orden === \"Finalizada\" || o.estado_orden === \"Despachada\") {\n                alerta = \"error\"\n                mensaje = \"La orden ya fue despachada por ende no se puede editar.\"\n            } else {\n                ordenes[i].articulo = art;\n                ordenes[i].altura = height;\n                ordenes[i].ancho = width;\n                ordenes[i].largo = length;\n                ordenes[i].peso = weight;\n                ordenes[i].puerto_origen = origen;\n                ordenes[i].puerto_destino = destino;\n                ordenes[i].descripcion = descr;\n                alerta = \"ok\";\n                mensaje = \"Orden editada exitosamente\"\n                break;\n            }       \n        }\n        i++;\n    }\n    res.send({estado : alerta, msg : mensaje});\n\n    */\n\n    // Desestructuracion\n    const {numero, art, height, width, length, weight, origen, destino, descr} = req.body;\n\n    ordenModel.findOne({order_id: numero}, function (error, oldOrder) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar orden duplicada.\" });\n        } else {\n            if (oldOrder !== null && oldOrder !== undefined) {\n                ordenModel.updateOne({ order_id: numero }, { $set: { nombre_contenedor: art, descripcion_contenedor: descr, peso_contenedor: weight, ancho_contenedor: width, alto_contenedor: height, largo_contenedor: length, puerto_origen: origen, puerto_destino: destino } }, function (error) {\n                    if (error) {\n                        return res.send({ estado: \"error\", msg: \"ERROR: Al editar la orden.\" });\n                    } else {\n                        res.send({ estado: \"ok\", msg: \"Orden actualizada satisfactoriamente.\" });\n                    }\n                });\n            } \n        }\n    });\n}); \n\n\n\n/**\n * API Rest Modulo de actualizar estados\n * Descripcion: Actualiza la informaciÃ³n de las Ã³rdenes ya creadas\n * Ruta: /editarEstado\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { estado }\n * Datos de respuesta: { estadoupdate }\n */\n\nordenesRutas.post(\"/editarEstado\", function(req, res) {\n\n    // Desestructuracion\n    const { numero, newEstado } = req.body;\n\n    ordenModel.findOne({order_id: numero}, function (error, oldOrder) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: al buscar orden duplicada.\" });\n        } else {\n            if (oldOrder !== null && oldOrder !== undefined) {\n                ordenModel.updateOne({ order_id: numero }, { $set: { estado_orden: newEstado } }, function (error) {\n                    if (error) {\n                        return res.send({ estado: \"error\", msg: \"ERROR: Al editar el estado de la orden.\" });\n                    } else {\n                        res.send({ estado: \"ok\", msg: \"Estado actualizado satisfactoriamente.\" });\n                    }\n                });\n            } \n        }\n    });\n}); \n\n\n\nexports.ordenesRutas = ordenesRutas;"
      ]
    },
    "sourceType": "module",
    "mtime": 1640046856898
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"filename\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/puertosRutas.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.0": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/puertosRutas.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/puertosRutas.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/puertosRutas.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/",
        "sourceFileName": "puertosRutas.js"
      }
    },
    "ast": null,
    "code": "const {\n  Router\n} = require(\"express\");\n\nconst puertosRutas = Router();\n\nconst {\n  puertoModel\n} = require(\"../modelos/puerto\");\n\nconst {\n  configModel\n} = require(\"../modelos/configuracion\");\n\nconst {\n  compare\n} = require(\"bcryptjs\");\n\nconst {\n  sign\n} = require(\"jsonwebtoken\"); //const { userGuard } = require(\"../guards/userGuard\");\n\n\nconst {\n  registroPuerto,\n  puertoRegistrado,\n  puertos,\n  distanciaPuertos,\n  costoMilla,\n  costoUpdate,\n  costo,\n  distancias\n} = require(\"../datos\");\n\nconst tasaDolar = 4000;\n/**\n * API Rest Modulo de registro de puertos\n * Descripcion: Registra los puertos en la plataforma\n * Ruta: /registrarPuerto\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { registroPuerto }\n * Respuesta: { puertoRegistrado }\n */\n\npuertosRutas.post(\"/registrarPuerto\", function (req, res) {\n  /* Codigo para realizar registro de orden de manera local\n  \n      // Se recibe un json con toda la informacion respectiva para crear un usuario nuevo\n      const {nomPto, idPto, distPto, munPto, rioPto} = req.body;\n      // Se obtiene el numero de documento para revisar si el usuario ya existe\n      const id = req.body.idPto;\n      // Se hace una busqueda del documento para ver si ya existe\n      const puerto = puertos.find(p => p.id_puerto === id);\n      // Si el usuario ya existe envia una alerta \n      if (puerto != null && puerto != undefined) {\n          res.send({estado : \"error\", msg : \"El puerto ya se encuentra registrado en el sistema.\"});\n      } else { // de lo contrario:\n          // Se crea una variable newPort donde a cada Key se le asigna los valores que vienen del json del front end\n          const newPort = {nombre: nomPto, id_puerto: idPto, millas: distPto, municipio: munPto, rioPto};\n          // Se agrega el newUser a base de datos\n          puertos.push(newPort);\n          // Se confirma que se estan recibiendo todos los datos correspondientes\n          console.log(puertos);\n          // Se envia estado y mensaje al front end para confirmar que el usuario se registro\n          res.send({estado : \"ok\", msg : \"Puerto registrado exitosamente.\"});\n  \n      }\n      */\n  // Inicio del codigo con base de datos\n  // Se recibe un json con toda la informacion respectiva para crear un usuario nuevo\n  const {\n    nomPto,\n    idPto,\n    distPto,\n    munPto,\n    rioPto\n  } = req.body; // Se obtiene el numero de documento para revisar si el usuario ya existe\n  //const port = req.body.idPto;\n  // Se hace una busqueda del documento para ver si ya existe\n\n  puertoModel.findOne({\n    puerto_id: idPto\n  }, function (error, oldPort) {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"ERROR: en el proceso\"\n      });\n    } else {\n      if (oldPort !== null && oldPort !== undefined) {\n        return res.send({\n          estado: \"ok\",\n          msg: \"Error: El puerto ya se encuentra registrado en nuestra base de datos.\"\n        });\n      } else {\n        // Se crea un nuevo usuario con una instancia del modelo de usuario y se le agrega toda la informacion que viene del front\n        const newPort = new puertoModel({\n          nombre_puerto: nomPto,\n          puerto_id: idPto,\n          distancia: distPto\n        });\n        newPort.save(function (error) {\n          if (error) {\n            return res.send({\n              estado: \"error\",\n              msg: \"ERROR: Al registrar un nuevo puerto\"\n            });\n          }\n\n          res.send({\n            estado: \"ok\",\n            msg: \"Puerto registrado exitosamente.\"\n          });\n        });\n      }\n    }\n  });\n});\n/**\n* API Rest Modulo de listado de puertos\n* Descripcion: Indica los puertos activos\n* Ruta: /listarPuerto\n* Metodo: POST\n* Headers:\"Content-Type: application/json\"\n* Datos de respuesta: { puertos }\n*/\n\npuertosRutas.post(\"/listarPuerto\", function (req, res) {\n  puertoModel.find({}, (error, port) => {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"ERROR: en el proceso\"\n      });\n    } else {\n      const ports = port.map(p => p);\n      res.send({\n        estado: \"ok\",\n        data: ports\n      });\n    }\n  });\n});\n/**\n* API Rest Modulo de calculo de distancia\n* Descripcion: Indica el precio segun la distancia calculada\n* Ruta: /listarDistanciaPuerto/\n* Metodo: POST\n* Headers:\"Content-Type: application/json\"\n* Datos de respuesta: { distanciaPuertos, costo }\n*/\n\npuertosRutas.post(\"/listarDistanciaPuerto\", function (req, res) {\n  /* Codigo para manejo de datos locales\n      const { origen, destino } = req.body;\n      //const portA = determinarPuerto(origen);\n      //console.log(portA);\n      // Se buscan los puertos en BD para determinar sus distancias\n      const puertoA = distancias.find(d => d.nombre.toLowerCase() === origen.toLowerCase());\n      const puertoB = distancias.find(d => d.nombre.toLowerCase() === destino.toLowerCase());\n      // Se suman las distancias de ambos puertos para determinar el valor a pagar\n      const distancia = puertoA.distancia + puertoB.distancia;\n      // Se calcula el valor en pesos segun la tasa del dolar manifestada al inicio del archivo\n      const pesos = costo.valor * tasaDolar;\n      // Se determina el precio total a cancelar en pesos segun la distancia de ambos puertos\n      const precio = pesos * distancia;\n      // Se hacen las respectivas validaciones de cada uno de los datos antes de enviarlos al Front\n      //console.log(puertoA)\n      //console.log(puertoB)\n      //console.log(distancia)\n      //console.log(precio)\n  \n      res.send({ estado:\"ok\", msg:\"Distancia y valor calculado\", distancia, precio })\n  \n  */\n  let alerta = \"No se pudo realizar la operaciÃ³n\";\n  let estado = \"error\"; // Se reciben los datos de origen para poder hacer los calculos\n\n  const {\n    origen,\n    destino\n  } = req.body; // Se buscan los puertos en BD para determinar sus distancias\n\n  puertoModel.find({\n    nombre_puerto: {\n      $in: [origen, destino]\n    }\n  }, (error, port) => {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"Error: Uno de los puertos no aparece registrado en nuestro sistema.\"\n      });\n    } else {\n      const ports = port.map(p => p); // Se verifica que se hayan registrado ambos puertos\n\n      console.log(ports); // Se suman las distancias de ambos puertos para determinar el valor a pagar\n\n      const distancia = ports[0].distancia + ports[1].distancia; // Se verifica que se haya sumado la distancia\n\n      console.log(distancia); // Se busca el valor de la milla actual\n\n      configModel.find({}, (error, costo) => {\n        if (error) {\n          return res.send({\n            estado: \"error\",\n            msg: \"No se pudo validar el precio a pagar.\"\n          });\n        } else {\n          console.log(costo); // Se calcula el valor en pesos segun la tasa del dolar manifestada al inicio del archivo\n\n          const pesos = costo[0].valor * tasaDolar; // Se determina el precio total a cancelar en pesos segun la distancia de ambos puertos\n\n          const precio = pesos * distancia;\n          console.log(precio); // Se envia la info al front\n\n          return res.send({\n            estado: \"ok\",\n            msg: \"Distancia y valor calculado exitosamente.\",\n            distancia,\n            precio\n          });\n        }\n      });\n    }\n  });\n});\n/**\n* API Rest Modulo de configuracion de costo de milla\n* Descripcion: Edita el valor del costo de milla\n* Ruta: /editarCostoMilla\n* Metodo: POST\n* Headers:\"Content-Type: application/json\"\n* Datos de entrada:{ costoMilla }   \n* Datos de respuesta: { costoUpdate }\n*/\n\npuertosRutas.post(\"/editarCostoMilla\", function (req, res) {\n  /*\n  // Recibe el valor en dolares del Front\n  const { dolares } = req.body;\n  // Se hace seguimiento de como llega el valor\n  //console.log(dolares)\n  // Se actualiza el costo de la milla en BD\n  costo.valor = dolares;\n   res.send({estado: \"ok\", msg:\"Costo de milla actualizado satisfactoriamente\"});\n  */\n  // Se recibe info del front\n  const {\n    dolares\n  } = req.body; // Se actualiza el valor de la milla en BD\n\n  configModel.updateOne({}, {\n    $set: {\n      valor: dolares\n    }\n  }, function (error) {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"ERROR: Al configurar el costo de la milla.\"\n      });\n    } else {\n      return res.send({\n        estado: \"ok\",\n        msg: \"Costo de milla actualizado satisfactoriamente.\"\n      });\n    }\n  });\n});\n/**\n* API Rest Modulo de vista de costo de milla\n* Descripcion: Identifica el valor del costo de milla\n* Ruta: /verCostoMilla\n* Metodo: GET\n* Headers:\"Content-Type: application/json\"\n* Datos de respuesta: { costo }\n*/\n\npuertosRutas.post(\"/verCostoMilla\", function (req, res) {\n  /* Codigo con datos locales\n      // Hace la conversion a pesos segun el valor en doalres\n      const pesos = costo.valor * tasaDolar;\n      // Se hace seguimiento por consola para ver si la operacion es correcta\n      //console.log(pesos);\n      //console.log(costo.valor);\n      // Envia un estado ok, con un mensaje y los respectivos valores en dolares y pesos\n      res.send({ estado: \"ok\", msg: \"Costo de milla actual\", data: costo.valor, pesos });\n  \n  */\n  // Se busca el valor actual de la milla en BD\n  configModel.findOne({}, function (error, costo) {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"ERROR: Al identificar el costo de la milla.\"\n      });\n    } else {\n      // Hace la conversion a pesos segun el valor en dolares\n      const pesos = costo.valor * tasaDolar; // Envia un estado ok, con un mensaje y los respectivos valores en dolares y pesos\n\n      return res.send({\n        estado: \"ok\",\n        msg: \"Costo de milla actual\",\n        data: costo.valor,\n        pesos\n      });\n    }\n  });\n});\n/**\n* API Rest Modulo de eliminar puertos\n* Descripcion: Elimina los puertos registrados\n* Ruta: /eliminarPuerto\n* Metodo: POST\n* Headers:\"Content-Type: application/json\"\n* Datos de respuesta: { msg }\n*/\n\npuertosRutas.post(\"/eliminarPuerto\", function (req, res) {\n  // Desestructuracion\n  const {\n    puerto\n  } = req.body;\n  puertoModel.findOne({\n    puerto_id: puerto\n  }, function (error, oldPort) {\n    if (error) {\n      return res.send({\n        estado: \"error\",\n        msg: \"ERROR: No se encontrÃ³ el puerto solicitado.\"\n      });\n    } else {\n      if (oldPort !== null && oldPort !== undefined) {\n        puertoModel.remove({\n          puerto_id: puerto\n        }, function (error) {\n          if (error) {\n            return res.send({\n              estado: \"error\",\n              msg: \"ERROR: Al eliminar el puerto\"\n            });\n          } else {\n            res.send({\n              estado: \"ok\",\n              msg: \"Puerto eliminado exitosamente.\"\n            });\n          }\n        });\n      }\n    }\n  });\n});\nexports.puertosRutas = puertosRutas;\n\nfunction determinarPuerto(item) {\n  let port = \"\";\n\n  if (item === 'Item 2') {\n    port = \"Puerto_CarreÃ±o\";\n  } else if (item === 'Item 3') {\n    port = \"Puerto_NariÃ±o\";\n  } else if (item === 'Item 4') {\n    port = \"Puerto_Banqueta\";\n  } else if (item === 'Item 5') {\n    port = \"Puerto_Cabuyo\";\n  } else if (item === 'Item 6') {\n    port = \"Puerto_LÃ³pez\";\n  } else if (item === 'Item 7') {\n    port = \"Puerto_Guaviare\";\n  } else if (item === 'Item 8') {\n    port = \"Puerto_MitÃº\";\n  } else if (item === 'Item 9') {\n    port = \"Puerto_YuruparÃ­\";\n  } else if (item === 'Item 10') {\n    port = \"Puerto_PucarÃ³n\";\n  } else if (item === 'Item 11') {\n    port = \"Puerto_Calamar\";\n  } else if (item === 'Item 12') {\n    port = \"Puerto_InÃ­rida\";\n  } else if (item === 'Item 13') {\n    port = \"Puerto_Tumaco\";\n  } else if (item === 'Item 14') {\n    port = \"Puerto_Buenaventura\";\n  } else if (item === 'Item 15') {\n    port = \"Puerto_Salgar\";\n  } else if (item === 'Item 16') {\n    port = \"Puerto_Berrio\";\n  } else if (item === 'Item 17') {\n    port = \"Puerto_Barrancabermeja\";\n  } else if (item === 'Item 18') {\n    port = \"Puerto_Cartagena\";\n  } else if (item === 'Item 19') {\n    port = \"Puerto_Santa_Marta\";\n  } else if (item === 'Item 20') {\n    port = \"Puerto_Barranquilla\";\n  } else if (item === 'Item 21') {\n    port = \"Puerto_Gamarra\";\n  }\n\n  return port;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "puertosRutas.js"
      ],
      "names": [
        "Router",
        "require",
        "puertosRutas",
        "puertoModel",
        "configModel",
        "compare",
        "sign",
        "registroPuerto",
        "puertoRegistrado",
        "puertos",
        "distanciaPuertos",
        "costoMilla",
        "costoUpdate",
        "costo",
        "distancias",
        "tasaDolar",
        "post",
        "req",
        "res",
        "nomPto",
        "idPto",
        "distPto",
        "munPto",
        "rioPto",
        "body",
        "findOne",
        "puerto_id",
        "error",
        "oldPort",
        "send",
        "estado",
        "msg",
        "undefined",
        "newPort",
        "nombre_puerto",
        "distancia",
        "save",
        "find",
        "port",
        "ports",
        "map",
        "p",
        "data",
        "alerta",
        "origen",
        "destino",
        "$in",
        "console",
        "log",
        "pesos",
        "valor",
        "precio",
        "dolares",
        "updateOne",
        "$set",
        "puerto",
        "remove",
        "exports",
        "determinarPuerto",
        "item"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/rutas/",
      "sourcesContent": [
        "const { Router } = require(\"express\");\nconst puertosRutas = Router();\nconst { puertoModel } = require(\"../modelos/puerto\");\nconst { configModel } = require(\"../modelos/configuracion\");\nconst { compare } = require(\"bcryptjs\");\nconst { sign } = require(\"jsonwebtoken\");\n//const { userGuard } = require(\"../guards/userGuard\");\n\nconst { registroPuerto, puertoRegistrado, puertos, distanciaPuertos, costoMilla, costoUpdate, costo, distancias } = require(\"../datos\");\n\nconst tasaDolar = 4000;\n\n/**\n * API Rest Modulo de registro de puertos\n * Descripcion: Registra los puertos en la plataforma\n * Ruta: /registrarPuerto\n * Metodo: POST\n * Headers:\"Content-Type: application/json\"\n * Datos de entrada: { registroPuerto }\n * Respuesta: { puertoRegistrado }\n */\n\n puertosRutas.post(\"/registrarPuerto\", function(req, res) {\n\n/* Codigo para realizar registro de orden de manera local\n\n    // Se recibe un json con toda la informacion respectiva para crear un usuario nuevo\n    const {nomPto, idPto, distPto, munPto, rioPto} = req.body;\n    // Se obtiene el numero de documento para revisar si el usuario ya existe\n    const id = req.body.idPto;\n    // Se hace una busqueda del documento para ver si ya existe\n    const puerto = puertos.find(p => p.id_puerto === id);\n    // Si el usuario ya existe envia una alerta \n    if (puerto != null && puerto != undefined) {\n        res.send({estado : \"error\", msg : \"El puerto ya se encuentra registrado en el sistema.\"});\n    } else { // de lo contrario:\n        // Se crea una variable newPort donde a cada Key se le asigna los valores que vienen del json del front end\n        const newPort = {nombre: nomPto, id_puerto: idPto, millas: distPto, municipio: munPto, rioPto};\n        // Se agrega el newUser a base de datos\n        puertos.push(newPort);\n        // Se confirma que se estan recibiendo todos los datos correspondientes\n        console.log(puertos);\n        // Se envia estado y mensaje al front end para confirmar que el usuario se registro\n        res.send({estado : \"ok\", msg : \"Puerto registrado exitosamente.\"});\n\n    }\n    */\n\n    // Inicio del codigo con base de datos\n\n    // Se recibe un json con toda la informacion respectiva para crear un usuario nuevo\n    const {nomPto, idPto, distPto, munPto, rioPto} = req.body;\n    // Se obtiene el numero de documento para revisar si el usuario ya existe\n    //const port = req.body.idPto;\n    // Se hace una busqueda del documento para ver si ya existe\n    puertoModel.findOne({puerto_id: idPto}, function (error, oldPort) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: en el proceso\" });\n        } else {\n            if (oldPort !== null && oldPort !== undefined) {\n                return res.send({ estado: \"ok\", msg: \"Error: El puerto ya se encuentra registrado en nuestra base de datos.\" });\n            } else {\n                // Se crea un nuevo usuario con una instancia del modelo de usuario y se le agrega toda la informacion que viene del front\n                const newPort = new puertoModel({ nombre_puerto: nomPto, puerto_id: idPto, distancia: distPto});\n                newPort.save(function (error) {\n                    if (error) {\n                        return res.send({ estado: \"error\", msg: \"ERROR: Al registrar un nuevo puerto\" });\n                    }\n                    res.send({ estado: \"ok\", msg: \"Puerto registrado exitosamente.\" });\n                });\n            }\n        }\n    })\n})\n\n\n\n/**\n* API Rest Modulo de listado de puertos\n* Descripcion: Indica los puertos activos\n* Ruta: /listarPuerto\n* Metodo: POST\n* Headers:\"Content-Type: application/json\"\n* Datos de respuesta: { puertos }\n*/\n\npuertosRutas.post(\"/listarPuerto\", function(req, res) {\n    puertoModel.find({}, (error, port) => {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: en el proceso\" });\n        } else {\n            const ports = port.map(p => p);\n            res.send({ estado: \"ok\", data: ports })\n        }\n      });\n})\n\n\n\n/**\n* API Rest Modulo de calculo de distancia\n* Descripcion: Indica el precio segun la distancia calculada\n* Ruta: /listarDistanciaPuerto/\n* Metodo: POST\n* Headers:\"Content-Type: application/json\"\n* Datos de respuesta: { distanciaPuertos, costo }\n*/\n\npuertosRutas.post(\"/listarDistanciaPuerto\", function(req, res) {\n\n/* Codigo para manejo de datos locales\n    const { origen, destino } = req.body;\n    //const portA = determinarPuerto(origen);\n    //console.log(portA);\n    // Se buscan los puertos en BD para determinar sus distancias\n    const puertoA = distancias.find(d => d.nombre.toLowerCase() === origen.toLowerCase());\n    const puertoB = distancias.find(d => d.nombre.toLowerCase() === destino.toLowerCase());\n    // Se suman las distancias de ambos puertos para determinar el valor a pagar\n    const distancia = puertoA.distancia + puertoB.distancia;\n    // Se calcula el valor en pesos segun la tasa del dolar manifestada al inicio del archivo\n    const pesos = costo.valor * tasaDolar;\n    // Se determina el precio total a cancelar en pesos segun la distancia de ambos puertos\n    const precio = pesos * distancia;\n    // Se hacen las respectivas validaciones de cada uno de los datos antes de enviarlos al Front\n    //console.log(puertoA)\n    //console.log(puertoB)\n    //console.log(distancia)\n    //console.log(precio)\n\n    res.send({ estado:\"ok\", msg:\"Distancia y valor calculado\", distancia, precio })\n\n*/\n    let alerta = \"No se pudo realizar la operaciÃ³n\"\n    let estado = \"error\"\n    // Se reciben los datos de origen para poder hacer los calculos\n    const { origen, destino } = req.body;\n    // Se buscan los puertos en BD para determinar sus distancias\n    puertoModel.find({ nombre_puerto: {$in: [origen, destino] } }, (error, port) => { \n        if (error) {\n            return res.send({ estado: \"error\", msg: \"Error: Uno de los puertos no aparece registrado en nuestro sistema.\" });\n        } else {\n            const ports = port.map(p => p);\n            // Se verifica que se hayan registrado ambos puertos\n            console.log(ports);\n            // Se suman las distancias de ambos puertos para determinar el valor a pagar\n            const distancia = ports[0].distancia + ports[1].distancia;\n            // Se verifica que se haya sumado la distancia\n            console.log(distancia);\n            // Se busca el valor de la milla actual\n            configModel.find({}, (error, costo) => {\n                if (error) {\n                    return res.send({ estado: \"error\", msg: \"No se pudo validar el precio a pagar.\" });\n                } else {\n                    console.log(costo);\n                    // Se calcula el valor en pesos segun la tasa del dolar manifestada al inicio del archivo\n                    const pesos = costo[0].valor * tasaDolar;\n                    // Se determina el precio total a cancelar en pesos segun la distancia de ambos puertos\n                    const precio = pesos * distancia;\n                    console.log(precio)\n                    // Se envia la info al front\n                    return res.send({ estado: \"ok\", msg: \"Distancia y valor calculado exitosamente.\", distancia, precio });\n                }\n            })\n        }\n    });   \n})\n\n\n\n/**\n* API Rest Modulo de configuracion de costo de milla\n* Descripcion: Edita el valor del costo de milla\n* Ruta: /editarCostoMilla\n* Metodo: POST\n* Headers:\"Content-Type: application/json\"\n* Datos de entrada:{ costoMilla }   \n* Datos de respuesta: { costoUpdate }\n*/\n\npuertosRutas.post(\"/editarCostoMilla\", function(req, res) {\n\n    /*\n    // Recibe el valor en dolares del Front\n    const { dolares } = req.body;\n    // Se hace seguimiento de como llega el valor\n    //console.log(dolares)\n    // Se actualiza el costo de la milla en BD\n    costo.valor = dolares;\n\n    res.send({estado: \"ok\", msg:\"Costo de milla actualizado satisfactoriamente\"});\n    */\n\n   // Se recibe info del front\n    const { dolares } = req.body;\n\n    // Se actualiza el valor de la milla en BD\n    configModel.updateOne({}, { $set: { valor: dolares } }, function (error) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: Al configurar el costo de la milla.\" });\n        } else {\n            return res.send({ estado: \"ok\", msg: \"Costo de milla actualizado satisfactoriamente.\"});\n        }\n    })   \n});\n\n\n/**\n* API Rest Modulo de vista de costo de milla\n* Descripcion: Identifica el valor del costo de milla\n* Ruta: /verCostoMilla\n* Metodo: GET\n* Headers:\"Content-Type: application/json\"\n* Datos de respuesta: { costo }\n*/\n\npuertosRutas.post(\"/verCostoMilla\", function(req, res) {\n\n/* Codigo con datos locales\n    // Hace la conversion a pesos segun el valor en doalres\n    const pesos = costo.valor * tasaDolar;\n    // Se hace seguimiento por consola para ver si la operacion es correcta\n    //console.log(pesos);\n    //console.log(costo.valor);\n    // Envia un estado ok, con un mensaje y los respectivos valores en dolares y pesos\n    res.send({ estado: \"ok\", msg: \"Costo de milla actual\", data: costo.valor, pesos });\n\n*/\n\n    // Se busca el valor actual de la milla en BD\n    configModel.findOne({}, function (error, costo) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: Al identificar el costo de la milla.\" });\n        } else {\n            // Hace la conversion a pesos segun el valor en dolares\n            const pesos = costo.valor * tasaDolar;\n            // Envia un estado ok, con un mensaje y los respectivos valores en dolares y pesos\n            return res.send({ estado: \"ok\", msg: \"Costo de milla actual\", data: costo.valor, pesos });\n        }\n    })\n});\n\n\n\n/**\n* API Rest Modulo de eliminar puertos\n* Descripcion: Elimina los puertos registrados\n* Ruta: /eliminarPuerto\n* Metodo: POST\n* Headers:\"Content-Type: application/json\"\n* Datos de respuesta: { msg }\n*/\n\npuertosRutas.post(\"/eliminarPuerto\", function(req, res) {\n    // Desestructuracion\n    const { puerto } = req.body;\n    puertoModel.findOne({puerto_id: puerto}, function (error, oldPort) {\n        if (error) {\n            return res.send({ estado: \"error\", msg: \"ERROR: No se encontrÃ³ el puerto solicitado.\" });\n        } else {\n            if (oldPort !== null && oldPort !== undefined) {\n                puertoModel.remove({ puerto_id: puerto }, function (error) {\n                    if (error) {\n                        return res.send({ estado: \"error\", msg: \"ERROR: Al eliminar el puerto\" });\n                    } else {\n                        res.send({ estado: \"ok\", msg: \"Puerto eliminado exitosamente.\" });\n                    }\n                });\n            } \n        }\n    });    \n})\n\n\nexports.puertosRutas = puertosRutas;\n\n\n\nfunction determinarPuerto(item) {\n    let port = \"\";\n    if (item === 'Item 2') {\n        port = \"Puerto_CarreÃ±o\";\n    } else if (item === 'Item 3') {\n        port = \"Puerto_NariÃ±o\";\n    } else if (item === 'Item 4') {\n        port = \"Puerto_Banqueta\";\n    } else if (item === 'Item 5') {\n        port = \"Puerto_Cabuyo\";\n    } else if (item === 'Item 6') {\n        port = \"Puerto_LÃ³pez\";\n    } else if (item === 'Item 7') {\n        port = \"Puerto_Guaviare\";\n    } else if (item === 'Item 8') {\n        port = \"Puerto_MitÃº\";\n    } else if (item === 'Item 9') {\n        port = \"Puerto_YuruparÃ­\";\n    } else if (item === 'Item 10') {\n        port = \"Puerto_PucarÃ³n\";\n    } else if (item === 'Item 11') {\n        port = \"Puerto_Calamar\";\n    } else if (item === 'Item 12') {\n        port = \"Puerto_InÃ­rida\";\n    } else if (item === 'Item 13') {\n        port = \"Puerto_Tumaco\";\n    } else if (item === 'Item 14') {\n        port = \"Puerto_Buenaventura\";\n    } else if (item === 'Item 15') {\n        port = \"Puerto_Salgar\";\n    } else if (item === 'Item 16') {\n        port = \"Puerto_Berrio\";\n    } else if (item === 'Item 17') {\n        port = \"Puerto_Barrancabermeja\";\n    } else if (item === 'Item 18') {\n        port = \"Puerto_Cartagena\";\n    } else if (item === 'Item 19') {\n        port = \"Puerto_Santa_Marta\";\n    } else if (item === 'Item 20') {\n        port = \"Puerto_Barranquilla\";\n    } else if (item === 'Item 21') {\n        port = \"Puerto_Gamarra\";\n    }\n    return port;\n}"
      ]
    },
    "sourceType": "module",
    "mtime": 1639935018782
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"filename\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/configuracion.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.0": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/configuracion.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/configuracion.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/configuracion.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/",
        "sourceFileName": "configuracion.js"
      }
    },
    "ast": null,
    "code": "const {\n  model,\n  Schema\n} = require(\"mongoose\");\n\nconst configuracionSchema = new Schema({\n  descripcion: {\n    type: \"string\",\n    required: true\n  },\n  valor: {\n    type: \"number\",\n    required: true\n  }\n});\nconst configModel = model(\"configuraciones\", configuracionSchema);\nexports.configModel = configModel;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZ3VyYWNpb24uanMiXSwibmFtZXMiOlsibW9kZWwiLCJTY2hlbWEiLCJyZXF1aXJlIiwiY29uZmlndXJhY2lvblNjaGVtYSIsImRlc2NyaXBjaW9uIiwidHlwZSIsInJlcXVpcmVkIiwidmFsb3IiLCJjb25maWdNb2RlbCIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU07QUFBRUEsRUFBQUEsS0FBRjtBQUFTQyxFQUFBQTtBQUFULElBQW9CQyxPQUFPLENBQUMsVUFBRCxDQUFqQzs7QUFFQSxNQUFNQyxtQkFBbUIsR0FBRyxJQUFJRixNQUFKLENBQ3hCO0FBQ0lHLEVBQUFBLFdBQVcsRUFBQztBQUNSQyxJQUFBQSxJQUFJLEVBQUUsUUFERTtBQUVSQyxJQUFBQSxRQUFRLEVBQUM7QUFGRCxHQURoQjtBQUtJQyxFQUFBQSxLQUFLLEVBQUM7QUFDRkYsSUFBQUEsSUFBSSxFQUFFLFFBREo7QUFFRkMsSUFBQUEsUUFBUSxFQUFDO0FBRlA7QUFMVixDQUR3QixDQUE1QjtBQWNBLE1BQU1FLFdBQVcsR0FBR1IsS0FBSyxDQUFDLGlCQUFELEVBQW9CRyxtQkFBcEIsQ0FBekI7QUFFQU0sT0FBTyxDQUFDRCxXQUFSLEdBQXNCQSxXQUF0QiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbWFyaW9nb21lei9Eb2N1bWVudHMvR2l0SHViL0JhY2tFbmRQbGF0YWZvcm1hVHJhbnNwb3J0ZUZsdXZpYWwvc3JjL21vZGVsb3MvIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBtb2RlbCwgU2NoZW1hIH0gPSByZXF1aXJlKFwibW9uZ29vc2VcIik7XHJcblxyXG5jb25zdCBjb25maWd1cmFjaW9uU2NoZW1hID0gbmV3IFNjaGVtYShcclxuICAgIHtcclxuICAgICAgICBkZXNjcmlwY2lvbjp7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOnRydWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZhbG9yOntcclxuICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIixcclxuICAgICAgICAgICAgcmVxdWlyZWQ6dHJ1ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuKTtcclxuXHJcblxyXG5jb25zdCBjb25maWdNb2RlbCA9IG1vZGVsKFwiY29uZmlndXJhY2lvbmVzXCIsIGNvbmZpZ3VyYWNpb25TY2hlbWEpO1xyXG5cclxuZXhwb3J0cy5jb25maWdNb2RlbCA9IGNvbmZpZ01vZGVsOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "configuracion.js"
      ],
      "names": [
        "model",
        "Schema",
        "require",
        "configuracionSchema",
        "descripcion",
        "type",
        "required",
        "valor",
        "configModel",
        "exports"
      ],
      "mappings": "AAAA,MAAM;AAAEA,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAAoBC,OAAO,CAAC,UAAD,CAAjC;;AAEA,MAAMC,mBAAmB,GAAG,IAAIF,MAAJ,CACxB;AACIG,EAAAA,WAAW,EAAC;AACRC,IAAAA,IAAI,EAAE,QADE;AAERC,IAAAA,QAAQ,EAAC;AAFD,GADhB;AAKIC,EAAAA,KAAK,EAAC;AACFF,IAAAA,IAAI,EAAE,QADJ;AAEFC,IAAAA,QAAQ,EAAC;AAFP;AALV,CADwB,CAA5B;AAcA,MAAME,WAAW,GAAGR,KAAK,CAAC,iBAAD,EAAoBG,mBAApB,CAAzB;AAEAM,OAAO,CAACD,WAAR,GAAsBA,WAAtB",
      "sourceRoot": "/Users/mariogomez/Documents/GitHub/BackEndPlataformaTransporteFluvial/src/modelos/",
      "sourcesContent": [
        "const { model, Schema } = require(\"mongoose\");\r\n\r\nconst configuracionSchema = new Schema(\r\n    {\r\n        descripcion:{\r\n            type: \"string\",\r\n            required:true\r\n        },\r\n        valor:{\r\n            type: \"number\",\r\n            required:true\r\n        }\r\n    }\r\n);\r\n\r\n\r\nconst configModel = model(\"configuraciones\", configuracionSchema);\r\n\r\nexports.configModel = configModel;"
      ]
    },
    "sourceType": "module",
    "mtime": 1639871676889
  }
}